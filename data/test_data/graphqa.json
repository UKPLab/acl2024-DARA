[
    {
        "qid": 256000000,
        "question": "where was the brickyard 400 held? The linked entity is Brickyard 400 (m.032gdy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h63n",
                "entity_name": "Indianapolis Motor Speedway"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_venue",
                    "class": "base.nascar.nascar_venue",
                    "friendly_name": "NASCAR Venue",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.032gdy",
                    "class": "base.nascar.nascar_race",
                    "friendly_name": "Brickyard 400",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_race.venue",
                    "friendly_name": "Venue"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_venue . \nVALUES ?x1 { :m.032gdy } \n?x1 :base.nascar.nascar_race.venue ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_venue (JOIN (R base.nascar.nascar_race.venue) m.032gdy))",
        "program": "step1:(JOIN (R base.nascar.nascar_race.venue) m.032gdy)[SEP]step2:(AND base.nascar.nascar_venue step1)[SEP]"
    },
    {
        "qid": 256000100,
        "question": "what's the venue for the brickyard 400? The linked entity is Brickyard 400 (m.032gdy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h63n",
                "entity_name": "Indianapolis Motor Speedway"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_venue",
                    "class": "base.nascar.nascar_venue",
                    "friendly_name": "NASCAR Venue",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.032gdy",
                    "class": "base.nascar.nascar_race",
                    "friendly_name": "Brickyard 400",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_race.venue",
                    "friendly_name": "Venue"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_venue . \nVALUES ?x1 { :m.032gdy } \n?x1 :base.nascar.nascar_race.venue ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_venue (JOIN (R base.nascar.nascar_race.venue) m.032gdy))",
        "program": "step1:(JOIN (R base.nascar.nascar_race.venue) m.032gdy)[SEP]step2:(AND base.nascar.nascar_venue step1)[SEP]"
    },
    {
        "qid": 256000200,
        "question": "the brickyard 400 was hosted at what venue? The linked entity is Brickyard 400 (m.032gdy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h63n",
                "entity_name": "Indianapolis Motor Speedway"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_venue",
                    "class": "base.nascar.nascar_venue",
                    "friendly_name": "NASCAR Venue",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.032gdy",
                    "class": "base.nascar.nascar_race",
                    "friendly_name": "Brickyard 400",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_race.venue",
                    "friendly_name": "Venue"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_venue . \nVALUES ?x1 { :m.032gdy } \n?x1 :base.nascar.nascar_race.venue ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_venue (JOIN (R base.nascar.nascar_race.venue) m.032gdy))",
        "program": "step1:(JOIN (R base.nascar.nascar_race.venue) m.032gdy)[SEP]step2:(AND base.nascar.nascar_venue step1)[SEP]"
    },
    {
        "qid": 256000300,
        "question": "where was the nascar brickyard 400 held? The linked entity is Brickyard 400 (m.032gdy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h63n",
                "entity_name": "Indianapolis Motor Speedway"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_venue",
                    "class": "base.nascar.nascar_venue",
                    "friendly_name": "NASCAR Venue",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.032gdy",
                    "class": "base.nascar.nascar_race",
                    "friendly_name": "Brickyard 400",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_race.venue",
                    "friendly_name": "Venue"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_venue . \nVALUES ?x1 { :m.032gdy } \n?x1 :base.nascar.nascar_race.venue ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_venue (JOIN (R base.nascar.nascar_race.venue) m.032gdy))",
        "program": "step1:(JOIN (R base.nascar.nascar_race.venue) m.032gdy)[SEP]step2:(AND base.nascar.nascar_venue step1)[SEP]"
    },
    {
        "qid": 259000000,
        "question": "what inspired the harlem renaissance? The linked entity is Harlem Renaissance (m.019y_2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x67",
                "entity_name": "African American"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.inspiration.inspiration",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Inspiration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019y_2",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Harlem Renaissance",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.inspiration.inspiration.inspired_by",
                    "friendly_name": "Inspired by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.inspiration.inspiration . \nVALUES ?x1 { :m.019y_2 } \n?x1 :base.inspiration.inspiration.inspired_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.inspiration.inspiration (JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2))",
        "program": "step1:(JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2)[SEP]step2:(AND base.inspiration.inspiration step1)[SEP]"
    },
    {
        "qid": 259000100,
        "question": "how is harlem renaissance inspired? The linked entity is Harlem Renaissance (m.019y_2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x67",
                "entity_name": "African American"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.inspiration.inspiration",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Inspiration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019y_2",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Harlem Renaissance",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.inspiration.inspiration.inspired_by",
                    "friendly_name": "Inspired by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.inspiration.inspiration . \nVALUES ?x1 { :m.019y_2 } \n?x1 :base.inspiration.inspiration.inspired_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.inspiration.inspiration (JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2))",
        "program": "step1:(JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2)[SEP]step2:(AND base.inspiration.inspiration step1)[SEP]"
    },
    {
        "qid": 259000200,
        "question": "harlem renaissance took inspiration from where? The linked entity is Harlem Renaissance (m.019y_2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x67",
                "entity_name": "African American"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.inspiration.inspiration",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Inspiration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019y_2",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Harlem Renaissance",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.inspiration.inspiration.inspired_by",
                    "friendly_name": "Inspired by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.inspiration.inspiration . \nVALUES ?x1 { :m.019y_2 } \n?x1 :base.inspiration.inspiration.inspired_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.inspiration.inspiration (JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2))",
        "program": "step1:(JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2)[SEP]step2:(AND base.inspiration.inspiration step1)[SEP]"
    },
    {
        "qid": 259000300,
        "question": "what gave the harlem renaissance inspiration? The linked entity is Harlem Renaissance (m.019y_2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x67",
                "entity_name": "African American"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.inspiration.inspiration",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Inspiration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019y_2",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Harlem Renaissance",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.inspiration.inspiration.inspired_by",
                    "friendly_name": "Inspired by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.inspiration.inspiration . \nVALUES ?x1 { :m.019y_2 } \n?x1 :base.inspiration.inspiration.inspired_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.inspiration.inspiration (JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2))",
        "program": "step1:(JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2)[SEP]step2:(AND base.inspiration.inspiration step1)[SEP]"
    },
    {
        "qid": 259000400,
        "question": "where did harlem renaissance take inspiration? The linked entity is Harlem Renaissance (m.019y_2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x67",
                "entity_name": "African American"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.inspiration.inspiration",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Inspiration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019y_2",
                    "class": "base.inspiration.inspiration",
                    "friendly_name": "Harlem Renaissance",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.inspiration.inspiration.inspired_by",
                    "friendly_name": "Inspired by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.inspiration.inspiration . \nVALUES ?x1 { :m.019y_2 } \n?x1 :base.inspiration.inspiration.inspired_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.inspiration.inspiration (JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2))",
        "program": "step1:(JOIN (R base.inspiration.inspiration.inspired_by) m.019y_2)[SEP]step2:(AND base.inspiration.inspiration step1)[SEP]"
    },
    {
        "qid": 260000000,
        "question": "what is the constitution for law of canada? The linked entity is Law of Canada (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "Law of Canada",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000001,
        "question": "what is the constitution for canadian law? The linked entity is canadian law (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "canadian law",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000002,
        "question": "what is the constitution for canadian legal system? The linked entity is canadian legal system (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "canadian legal system",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000100,
        "question": "which constitution is law of canada subject to? The linked entity is Law of Canada (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "Law of Canada",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000101,
        "question": "which constitution is canadian law subject to? The linked entity is canadian law (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "canadian law",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000102,
        "question": "which constitution is canadian legal system subject to? The linked entity is canadian legal system (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "canadian legal system",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000200,
        "question": "what's the supreme law in the law of canada? The linked entity is Law of Canada (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "Law of Canada",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000201,
        "question": "what's the supreme law in the canadian law? The linked entity is canadian law (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "canadian law",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 260000202,
        "question": "what's the supreme law in the canadian legal system? The linked entity is canadian legal system (m.01qk86).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ywgm",
                "entity_name": "Canadian Charter of Rights and Freedoms"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitution",
                    "class": "law.constitution",
                    "friendly_name": "Constitution",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qk86",
                    "class": "base.morelaw.legal_system",
                    "friendly_name": "canadian legal system",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.legal_system.constitution",
                    "friendly_name": "Constitution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitution . \nVALUES ?x1 { :m.01qk86 } \n?x1 :base.morelaw.legal_system.constitution ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitution (JOIN (R base.morelaw.legal_system.constitution) m.01qk86))",
        "program": "step1:(JOIN (R base.morelaw.legal_system.constitution) m.01qk86)[SEP]step2:(AND law.constitution step1)[SEP]"
    },
    {
        "qid": 261000000,
        "question": "what is needed to prepare cuba libre? The linked entity is Cuba Libre (m.024jj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yvs",
                "entity_name": "Coca-Cola"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cocktails.cocktail_ingredient",
                    "class": "base.cocktails.cocktail_ingredient",
                    "friendly_name": "Cocktail Ingredient",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.024jj",
                    "class": "base.cocktails.cocktail",
                    "friendly_name": "Cuba Libre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient",
                    "friendly_name": "Cocktails with this ingredient"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cocktails.cocktail_ingredient . \nVALUES ?x1 { :m.024jj } \n?x0 :base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cocktails.cocktail_ingredient (JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj))",
        "program": "step1:(JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj)[SEP]step2:(AND base.cocktails.cocktail_ingredient step1)[SEP]"
    },
    {
        "qid": 261000100,
        "question": "cuba libre requires which ingredients? The linked entity is Cuba Libre (m.024jj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yvs",
                "entity_name": "Coca-Cola"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cocktails.cocktail_ingredient",
                    "class": "base.cocktails.cocktail_ingredient",
                    "friendly_name": "Cocktail Ingredient",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.024jj",
                    "class": "base.cocktails.cocktail",
                    "friendly_name": "Cuba Libre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient",
                    "friendly_name": "Cocktails with this ingredient"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cocktails.cocktail_ingredient . \nVALUES ?x1 { :m.024jj } \n?x0 :base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cocktails.cocktail_ingredient (JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj))",
        "program": "step1:(JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj)[SEP]step2:(AND base.cocktails.cocktail_ingredient step1)[SEP]"
    },
    {
        "qid": 261000200,
        "question": "a cuba libre is made from which ingredients? The linked entity is Cuba Libre (m.024jj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yvs",
                "entity_name": "Coca-Cola"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cocktails.cocktail_ingredient",
                    "class": "base.cocktails.cocktail_ingredient",
                    "friendly_name": "Cocktail Ingredient",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.024jj",
                    "class": "base.cocktails.cocktail",
                    "friendly_name": "Cuba Libre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient",
                    "friendly_name": "Cocktails with this ingredient"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cocktails.cocktail_ingredient . \nVALUES ?x1 { :m.024jj } \n?x0 :base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cocktails.cocktail_ingredient (JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj))",
        "program": "step1:(JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj)[SEP]step2:(AND base.cocktails.cocktail_ingredient step1)[SEP]"
    },
    {
        "qid": 261000300,
        "question": "what ingredients are needed for cuba libre? The linked entity is Cuba Libre (m.024jj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yvs",
                "entity_name": "Coca-Cola"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cocktails.cocktail_ingredient",
                    "class": "base.cocktails.cocktail_ingredient",
                    "friendly_name": "Cocktail Ingredient",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.024jj",
                    "class": "base.cocktails.cocktail",
                    "friendly_name": "Cuba Libre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient",
                    "friendly_name": "Cocktails with this ingredient"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cocktails.cocktail_ingredient . \nVALUES ?x1 { :m.024jj } \n?x0 :base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cocktails.cocktail_ingredient (JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj))",
        "program": "step1:(JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj)[SEP]step2:(AND base.cocktails.cocktail_ingredient step1)[SEP]"
    },
    {
        "qid": 261000400,
        "question": "what do you need to make a cuba libre? The linked entity is Cuba Libre (m.024jj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yvs",
                "entity_name": "Coca-Cola"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cocktails.cocktail_ingredient",
                    "class": "base.cocktails.cocktail_ingredient",
                    "friendly_name": "Cocktail Ingredient",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.024jj",
                    "class": "base.cocktails.cocktail",
                    "friendly_name": "Cuba Libre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient",
                    "friendly_name": "Cocktails with this ingredient"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cocktails.cocktail_ingredient . \nVALUES ?x1 { :m.024jj } \n?x0 :base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cocktails.cocktail_ingredient (JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj))",
        "program": "step1:(JOIN base.cocktails.cocktail_ingredient.cocktails_with_this_ingredient m.024jj)[SEP]step2:(AND base.cocktails.cocktail_ingredient step1)[SEP]"
    },
    {
        "qid": 263000000,
        "question": "bruce farr designed what ship? The linked entity is Bruce Farr (m.01m1w6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07lq2l",
                "entity_name": "KZ1"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.ship",
                    "class": "boats.ship",
                    "friendly_name": "Ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01m1w6",
                    "class": "boats.ship_designer",
                    "friendly_name": "Bruce Farr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "boats.ship_designer.boats_designed",
                    "friendly_name": "Boats Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship . \nVALUES ?x1 { :m.01m1w6 } \n?x1 :boats.ship_designer.boats_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND boats.ship (JOIN (R boats.ship_designer.boats_designed) m.01m1w6))",
        "program": "step1:(JOIN (R boats.ship_designer.boats_designed) m.01m1w6)[SEP]step2:(AND boats.ship step1)[SEP]"
    },
    {
        "qid": 263000100,
        "question": "which ship was designed by bruce farr? The linked entity is Bruce Farr (m.01m1w6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07lq2l",
                "entity_name": "KZ1"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.ship",
                    "class": "boats.ship",
                    "friendly_name": "Ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01m1w6",
                    "class": "boats.ship_designer",
                    "friendly_name": "Bruce Farr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "boats.ship_designer.boats_designed",
                    "friendly_name": "Boats Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship . \nVALUES ?x1 { :m.01m1w6 } \n?x1 :boats.ship_designer.boats_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND boats.ship (JOIN (R boats.ship_designer.boats_designed) m.01m1w6))",
        "program": "step1:(JOIN (R boats.ship_designer.boats_designed) m.01m1w6)[SEP]step2:(AND boats.ship step1)[SEP]"
    },
    {
        "qid": 263000200,
        "question": "what ships has bruce farr designed? The linked entity is Bruce Farr (m.01m1w6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07lq2l",
                "entity_name": "KZ1"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.ship",
                    "class": "boats.ship",
                    "friendly_name": "Ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01m1w6",
                    "class": "boats.ship_designer",
                    "friendly_name": "Bruce Farr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "boats.ship_designer.boats_designed",
                    "friendly_name": "Boats Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship . \nVALUES ?x1 { :m.01m1w6 } \n?x1 :boats.ship_designer.boats_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND boats.ship (JOIN (R boats.ship_designer.boats_designed) m.01m1w6))",
        "program": "step1:(JOIN (R boats.ship_designer.boats_designed) m.01m1w6)[SEP]step2:(AND boats.ship step1)[SEP]"
    },
    {
        "qid": 263000300,
        "question": "bruce farr was the designer for which ships? The linked entity is Bruce Farr (m.01m1w6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07lq2l",
                "entity_name": "KZ1"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.ship",
                    "class": "boats.ship",
                    "friendly_name": "Ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01m1w6",
                    "class": "boats.ship_designer",
                    "friendly_name": "Bruce Farr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "boats.ship_designer.boats_designed",
                    "friendly_name": "Boats Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship . \nVALUES ?x1 { :m.01m1w6 } \n?x1 :boats.ship_designer.boats_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND boats.ship (JOIN (R boats.ship_designer.boats_designed) m.01m1w6))",
        "program": "step1:(JOIN (R boats.ship_designer.boats_designed) m.01m1w6)[SEP]step2:(AND boats.ship step1)[SEP]"
    },
    {
        "qid": 264000000,
        "question": "which company produces pic microcontroller? The linked entity is PIC microcontroller (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "PIC microcontroller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000001,
        "question": "which company produces pic? The linked entity is pic (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "pic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000002,
        "question": "which company produces picmicro? The linked entity is picmicro (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "picmicro",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000100,
        "question": "what is the name of the company that produces pic microcontroller? The linked entity is PIC microcontroller (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "PIC microcontroller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000101,
        "question": "what is the name of the company that produces pic? The linked entity is pic (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "pic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000102,
        "question": "what is the name of the company that produces picmicro? The linked entity is picmicro (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "picmicro",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000200,
        "question": "the pic microcontroller is produced by what company? The linked entity is PIC microcontroller (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "PIC microcontroller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000201,
        "question": "the pic is produced by what company? The linked entity is pic (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "pic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000202,
        "question": "the picmicro is produced by what company? The linked entity is picmicro (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "picmicro",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000300,
        "question": "who produces pic microcontrollers? The linked entity is PIC microcontroller (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "PIC microcontroller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000301,
        "question": "who produces pics? The linked entity is pic (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "pic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000302,
        "question": "who produces picmicros? The linked entity is picmicro (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "picmicro",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000400,
        "question": "identify pic microcontroller manufacturers. The linked entity is PIC microcontroller (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "PIC microcontroller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000401,
        "question": "identify pic manufacturers. The linked entity is pic (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "pic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000402,
        "question": "identify picmicro manufacturers. The linked entity is picmicro (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "picmicro",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000500,
        "question": "who is the manufacturer of the pic microcontroller? The linked entity is PIC microcontroller (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "PIC microcontroller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000501,
        "question": "who is the manufacturer of the pic? The linked entity is pic (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "pic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 264000502,
        "question": "who is the manufacturer of the picmicro? The linked entity is picmicro (m.0196qx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5zfd",
                "entity_name": "Microchip Technology"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.processor_manufacturer",
                    "class": "computer.processor_manufacturer",
                    "friendly_name": "Processor Manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0196qx",
                    "class": "computer.computer_processor",
                    "friendly_name": "picmicro",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.computer_processor.manufacturers",
                    "friendly_name": "Manufacturers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.0196qx } \n?x1 :computer.computer_processor.manufacturers ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) m.0196qx))",
        "program": "step1:(JOIN (R computer.computer_processor.manufacturers) m.0196qx)[SEP]step2:(AND computer.processor_manufacturer step1)[SEP]"
    },
    {
        "qid": 265000000,
        "question": "what weight division were the fighters of the rumble in the jungle in? The linked entity is The Rumble in the Jungle (m.019rd7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t3ww",
                "entity_name": "Heavyweight"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.boxing_weight_division",
                    "class": "sports.boxing_weight_division",
                    "friendly_name": "Boxing Weight Division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019rd7",
                    "class": "boxing.boxing_match",
                    "friendly_name": "The Rumble in the Jungle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "sports.boxing_weight_division.matches",
                    "friendly_name": "Matches"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxing_weight_division . \nVALUES ?x1 { :m.019rd7 } \n?x0 :sports.boxing_weight_division.matches ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND sports.boxing_weight_division (JOIN sports.boxing_weight_division.matches m.019rd7))",
        "program": "step1:(JOIN sports.boxing_weight_division.matches m.019rd7)[SEP]step2:(AND sports.boxing_weight_division step1)[SEP]"
    },
    {
        "qid": 265000100,
        "question": "the rumble in the jungle boxing match was what weight division? The linked entity is The Rumble in the Jungle (m.019rd7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t3ww",
                "entity_name": "Heavyweight"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.boxing_weight_division",
                    "class": "sports.boxing_weight_division",
                    "friendly_name": "Boxing Weight Division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019rd7",
                    "class": "boxing.boxing_match",
                    "friendly_name": "The Rumble in the Jungle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "sports.boxing_weight_division.matches",
                    "friendly_name": "Matches"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxing_weight_division . \nVALUES ?x1 { :m.019rd7 } \n?x0 :sports.boxing_weight_division.matches ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND sports.boxing_weight_division (JOIN sports.boxing_weight_division.matches m.019rd7))",
        "program": "step1:(JOIN sports.boxing_weight_division.matches m.019rd7)[SEP]step2:(AND sports.boxing_weight_division step1)[SEP]"
    },
    {
        "qid": 265000200,
        "question": "the rumble in the jungle was a fight in what weight class? The linked entity is The Rumble in the Jungle (m.019rd7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t3ww",
                "entity_name": "Heavyweight"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.boxing_weight_division",
                    "class": "sports.boxing_weight_division",
                    "friendly_name": "Boxing Weight Division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019rd7",
                    "class": "boxing.boxing_match",
                    "friendly_name": "The Rumble in the Jungle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "sports.boxing_weight_division.matches",
                    "friendly_name": "Matches"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxing_weight_division . \nVALUES ?x1 { :m.019rd7 } \n?x0 :sports.boxing_weight_division.matches ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND sports.boxing_weight_division (JOIN sports.boxing_weight_division.matches m.019rd7))",
        "program": "step1:(JOIN sports.boxing_weight_division.matches m.019rd7)[SEP]step2:(AND sports.boxing_weight_division step1)[SEP]"
    },
    {
        "qid": 265000300,
        "question": "what was the weight division of the boxing match the rumble in the jungle? The linked entity is The Rumble in the Jungle (m.019rd7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t3ww",
                "entity_name": "Heavyweight"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.boxing_weight_division",
                    "class": "sports.boxing_weight_division",
                    "friendly_name": "Boxing Weight Division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019rd7",
                    "class": "boxing.boxing_match",
                    "friendly_name": "The Rumble in the Jungle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "sports.boxing_weight_division.matches",
                    "friendly_name": "Matches"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxing_weight_division . \nVALUES ?x1 { :m.019rd7 } \n?x0 :sports.boxing_weight_division.matches ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND sports.boxing_weight_division (JOIN sports.boxing_weight_division.matches m.019rd7))",
        "program": "step1:(JOIN sports.boxing_weight_division.matches m.019rd7)[SEP]step2:(AND sports.boxing_weight_division step1)[SEP]"
    },
    {
        "qid": 265000400,
        "question": "under which weight division was the boxing match the rumble in the jungle categorized? The linked entity is The Rumble in the Jungle (m.019rd7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t3ww",
                "entity_name": "Heavyweight"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.boxing_weight_division",
                    "class": "sports.boxing_weight_division",
                    "friendly_name": "Boxing Weight Division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.019rd7",
                    "class": "boxing.boxing_match",
                    "friendly_name": "The Rumble in the Jungle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "sports.boxing_weight_division.matches",
                    "friendly_name": "Matches"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxing_weight_division . \nVALUES ?x1 { :m.019rd7 } \n?x0 :sports.boxing_weight_division.matches ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND sports.boxing_weight_division (JOIN sports.boxing_weight_division.matches m.019rd7))",
        "program": "step1:(JOIN sports.boxing_weight_division.matches m.019rd7)[SEP]step2:(AND sports.boxing_weight_division step1)[SEP]"
    },
    {
        "qid": 266000000,
        "question": "what is the sex of gamera? The linked entity is Gamera (m.0h9fv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.monster.monster_gender",
                    "class": "base.monster.monster_gender",
                    "friendly_name": "Monster Gender",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h9fv",
                    "class": "base.monster.monster",
                    "friendly_name": "Gamera",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.monster.monster.gender",
                    "friendly_name": "Gender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.monster.monster_gender . \nVALUES ?x1 { :m.0h9fv } \n?x1 :base.monster.monster.gender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.monster.monster_gender (JOIN (R base.monster.monster.gender) m.0h9fv))",
        "program": "step1:(JOIN (R base.monster.monster.gender) m.0h9fv)[SEP]step2:(AND base.monster.monster_gender step1)[SEP]"
    },
    {
        "qid": 266000100,
        "question": "what gender is gamera? The linked entity is Gamera (m.0h9fv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.monster.monster_gender",
                    "class": "base.monster.monster_gender",
                    "friendly_name": "Monster Gender",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h9fv",
                    "class": "base.monster.monster",
                    "friendly_name": "Gamera",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.monster.monster.gender",
                    "friendly_name": "Gender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.monster.monster_gender . \nVALUES ?x1 { :m.0h9fv } \n?x1 :base.monster.monster.gender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.monster.monster_gender (JOIN (R base.monster.monster.gender) m.0h9fv))",
        "program": "step1:(JOIN (R base.monster.monster.gender) m.0h9fv)[SEP]step2:(AND base.monster.monster_gender step1)[SEP]"
    },
    {
        "qid": 266000200,
        "question": "is gamera male or female? The linked entity is Gamera (m.0h9fv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.monster.monster_gender",
                    "class": "base.monster.monster_gender",
                    "friendly_name": "Monster Gender",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h9fv",
                    "class": "base.monster.monster",
                    "friendly_name": "Gamera",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.monster.monster.gender",
                    "friendly_name": "Gender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.monster.monster_gender . \nVALUES ?x1 { :m.0h9fv } \n?x1 :base.monster.monster.gender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.monster.monster_gender (JOIN (R base.monster.monster.gender) m.0h9fv))",
        "program": "step1:(JOIN (R base.monster.monster.gender) m.0h9fv)[SEP]step2:(AND base.monster.monster_gender step1)[SEP]"
    },
    {
        "qid": 266000300,
        "question": "what's the gender of gamera? The linked entity is Gamera (m.0h9fv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.monster.monster_gender",
                    "class": "base.monster.monster_gender",
                    "friendly_name": "Monster Gender",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h9fv",
                    "class": "base.monster.monster",
                    "friendly_name": "Gamera",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.monster.monster.gender",
                    "friendly_name": "Gender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.monster.monster_gender . \nVALUES ?x1 { :m.0h9fv } \n?x1 :base.monster.monster.gender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.monster.monster_gender (JOIN (R base.monster.monster.gender) m.0h9fv))",
        "program": "step1:(JOIN (R base.monster.monster.gender) m.0h9fv)[SEP]step2:(AND base.monster.monster_gender step1)[SEP]"
    },
    {
        "qid": 266000400,
        "question": "gamera is of what gender? The linked entity is Gamera (m.0h9fv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.monster.monster_gender",
                    "class": "base.monster.monster_gender",
                    "friendly_name": "Monster Gender",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h9fv",
                    "class": "base.monster.monster",
                    "friendly_name": "Gamera",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.monster.monster.gender",
                    "friendly_name": "Gender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.monster.monster_gender . \nVALUES ?x1 { :m.0h9fv } \n?x1 :base.monster.monster.gender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.monster.monster_gender (JOIN (R base.monster.monster.gender) m.0h9fv))",
        "program": "step1:(JOIN (R base.monster.monster.gender) m.0h9fv)[SEP]step2:(AND base.monster.monster_gender step1)[SEP]"
    },
    {
        "qid": 267000000,
        "question": "what topics does the exhibition venice biennale of architecture cover? The linked entity is Venice Biennale of Architecture (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "Venice Biennale of Architecture",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 267000001,
        "question": "what topics does the exhibition venice architecture biennale cover? The linked entity is venice architecture biennale (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "venice architecture biennale",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 267000100,
        "question": "what is the exhibition venice biennale of architecture about? The linked entity is Venice Biennale of Architecture (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "Venice Biennale of Architecture",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 267000101,
        "question": "what is the exhibition venice architecture biennale about? The linked entity is venice architecture biennale (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "venice architecture biennale",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 267000200,
        "question": "what subjects are presented in the venice biennale of architecture? The linked entity is Venice Biennale of Architecture (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "Venice Biennale of Architecture",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 267000201,
        "question": "what subjects are presented in the venice architecture biennale? The linked entity is venice architecture biennale (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "venice architecture biennale",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 267000300,
        "question": "what kinds of exhibits does venice biennale of architecture showcase? The linked entity is Venice Biennale of Architecture (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "Venice Biennale of Architecture",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 267000301,
        "question": "what kinds of exhibits does venice architecture biennale showcase? The linked entity is venice architecture biennale (m.08h3_7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nfmq",
                "entity_name": "Architecture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_subject",
                    "class": "exhibitions.exhibition_subject",
                    "friendly_name": "Exhibition subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08h3_7",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "venice architecture biennale",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \nVALUES ?x1 { :m.08h3_7 } \n?x1 :exhibitions.exhibition.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) m.08h3_7))",
        "program": "step1:(JOIN (R exhibitions.exhibition.subjects) m.08h3_7)[SEP]step2:(AND exhibitions.exhibition_subject step1)[SEP]"
    },
    {
        "qid": 268000000,
        "question": "what ciphers are created by francis bacon? The linked entity is Francis Bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "Francis Bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000001,
        "question": "what ciphers are created by bacon? The linked entity is bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000002,
        "question": "what ciphers are created by lord bacon? The linked entity is lord bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "lord bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000100,
        "question": "francis bacon created what ciphers? The linked entity is Francis Bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "Francis Bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000101,
        "question": "bacon created what ciphers? The linked entity is bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000102,
        "question": "lord bacon created what ciphers? The linked entity is lord bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "lord bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000200,
        "question": "which siphers did francis bacon make? The linked entity is Francis Bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "Francis Bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000201,
        "question": "which siphers did bacon make? The linked entity is bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 268000202,
        "question": "which siphers did lord bacon make? The linked entity is lord bacon (m.030dr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.056d01",
                "entity_name": "Bacon's cipher"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.cryptography.cipher",
                    "class": "base.cryptography.cipher",
                    "friendly_name": "Cipher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.030dr",
                    "class": "base.cryptography.cryptographer",
                    "friendly_name": "lord bacon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.cryptography.cryptographer.ciphers_created",
                    "friendly_name": "Ciphers created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.cryptography.cipher . \nVALUES ?x1 { :m.030dr } \n?x1 :base.cryptography.cryptographer.ciphers_created ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.cryptography.cipher (JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr))",
        "program": "step1:(JOIN (R base.cryptography.cryptographer.ciphers_created) m.030dr)[SEP]step2:(AND base.cryptography.cipher step1)[SEP]"
    },
    {
        "qid": 269000000,
        "question": "the anglican diocese of new westminster contains which churches? The linked entity is Anglican Diocese of New Westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "Anglican Diocese of New Westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000001,
        "question": "the diocese of new westminster contains which churches? The linked entity is diocese of new westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "diocese of new westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000002,
        "question": "the new westminster diocese contains which churches? The linked entity is new westminster diocese (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "new westminster diocese",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000100,
        "question": "the anglican diocese of new westminster is comprised of what churches? The linked entity is Anglican Diocese of New Westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "Anglican Diocese of New Westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000101,
        "question": "the diocese of new westminster is comprised of what churches? The linked entity is diocese of new westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "diocese of new westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000102,
        "question": "the new westminster diocese is comprised of what churches? The linked entity is new westminster diocese (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "new westminster diocese",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000200,
        "question": "the anglican diocese of new westminster consists of which churches? The linked entity is Anglican Diocese of New Westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "Anglican Diocese of New Westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000201,
        "question": "the diocese of new westminster consists of which churches? The linked entity is diocese of new westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "diocese of new westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000202,
        "question": "the new westminster diocese consists of which churches? The linked entity is new westminster diocese (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "new westminster diocese",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000300,
        "question": "what churches are in the anglican diocese of new westminster? The linked entity is Anglican Diocese of New Westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "Anglican Diocese of New Westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000301,
        "question": "what churches are in the diocese of new westminster? The linked entity is diocese of new westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "diocese of new westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000302,
        "question": "what churches are in the new westminster diocese? The linked entity is new westminster diocese (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "new westminster diocese",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000400,
        "question": "the anglican diocese of new westminster is made up of which churches? The linked entity is Anglican Diocese of New Westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "Anglican Diocese of New Westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000401,
        "question": "the diocese of new westminster is made up of which churches? The linked entity is diocese of new westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "diocese of new westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000402,
        "question": "the new westminster diocese is made up of which churches? The linked entity is new westminster diocese (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "new westminster diocese",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000500,
        "question": "what church can be found in the anglican diocese of new westminster? The linked entity is Anglican Diocese of New Westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "Anglican Diocese of New Westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000501,
        "question": "what church can be found in the diocese of new westminster? The linked entity is diocese of new westminster (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "diocese of new westminster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 269000502,
        "question": "what church can be found in the new westminster diocese? The linked entity is new westminster diocese (m.03qsr8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04drnj",
                "entity_name": "Anglican Church of Canada"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.anglican.church",
                    "class": "base.anglican.church",
                    "friendly_name": "Church",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03qsr8",
                    "class": "base.anglican.diocese",
                    "friendly_name": "new westminster diocese",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.anglican.diocese.church",
                    "friendly_name": "Church"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.anglican.church . \nVALUES ?x1 { :m.03qsr8 } \n?x1 :base.anglican.diocese.church ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.anglican.church (JOIN (R base.anglican.diocese.church) m.03qsr8))",
        "program": "step1:(JOIN (R base.anglican.diocese.church) m.03qsr8)[SEP]step2:(AND base.anglican.church step1)[SEP]"
    },
    {
        "qid": 270000000,
        "question": "who decided to come up with first amendment? The linked entity is First Amendment (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "First Amendment",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000001,
        "question": "who decided to come up with first amendment to the us constitution? The linked entity is first amendment to the us constitution (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "first amendment to the us constitution",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000100,
        "question": "who's idea was the first amendment? The linked entity is First Amendment (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "First Amendment",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000101,
        "question": "who's idea was the first amendment to the us constitution? The linked entity is first amendment to the us constitution (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "first amendment to the us constitution",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000200,
        "question": "who was the person who proposed the first amendment? The linked entity is First Amendment (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "First Amendment",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000201,
        "question": "who was the person who proposed the first amendment to the us constitution? The linked entity is first amendment to the us constitution (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "first amendment to the us constitution",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000300,
        "question": "the proposal of the first amendment can be credited to whom? The linked entity is First Amendment (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "First Amendment",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000301,
        "question": "the proposal of the first amendment to the us constitution can be credited to whom? The linked entity is first amendment to the us constitution (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "first amendment to the us constitution",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000400,
        "question": "the first amendment was proposed by who? The linked entity is First Amendment (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "First Amendment",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000401,
        "question": "the first amendment to the us constitution was proposed by who? The linked entity is first amendment to the us constitution (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "first amendment to the us constitution",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000500,
        "question": "who is the proposer of the first amendment? The linked entity is First Amendment (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "First Amendment",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000501,
        "question": "who is the proposer of the first amendment to the us constitution? The linked entity is first amendment to the us constitution (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "first amendment to the us constitution",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000600,
        "question": "who proposed the first amendment? The linked entity is First Amendment (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "First Amendment",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 270000601,
        "question": "who proposed the first amendment to the us constitution? The linked entity is first amendment to the us constitution (m.07sgz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0424m",
                "entity_name": "James Madison"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.constitutional_amendment_proposer",
                    "class": "law.constitutional_amendment_proposer",
                    "friendly_name": "Constitutional Amendment Proposer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07sgz",
                    "class": "law.constitutional_amendment",
                    "friendly_name": "first amendment to the us constitution",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "law.constitutional_amendment.proposed_by",
                    "friendly_name": "Proposed by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07sgz } \n?x1 :law.constitutional_amendment.proposed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.constitutional_amendment_proposer (JOIN (R law.constitutional_amendment.proposed_by) m.07sgz))",
        "program": "step1:(JOIN (R law.constitutional_amendment.proposed_by) m.07sgz)[SEP]step2:(AND law.constitutional_amendment_proposer step1)[SEP]"
    },
    {
        "qid": 275000000,
        "question": "what are the causes of attention deficit hyperactivity disorder? The linked entity is Attention deficit hyperactivity disorder (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "Attention deficit hyperactivity disorder",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000001,
        "question": "what are the causes of adhd? The linked entity is adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000002,
        "question": "what are the causes of add/adhd? The linked entity is add/adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "add/adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000100,
        "question": "what are the likely factors of attention deficit hyperactivity disorder? The linked entity is Attention deficit hyperactivity disorder (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "Attention deficit hyperactivity disorder",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000101,
        "question": "what are the likely factors of adhd? The linked entity is adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000102,
        "question": "what are the likely factors of add/adhd? The linked entity is add/adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "add/adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000200,
        "question": "what may cause the attention deficit hyperactivity disorder? The linked entity is Attention deficit hyperactivity disorder (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "Attention deficit hyperactivity disorder",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000201,
        "question": "what may cause the adhd? The linked entity is adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000202,
        "question": "what may cause the add/adhd? The linked entity is add/adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "add/adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000300,
        "question": "what predisposing factors does the attention deficit hyperactivity disorder have? The linked entity is Attention deficit hyperactivity disorder (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "Attention deficit hyperactivity disorder",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000301,
        "question": "what predisposing factors does the adhd have? The linked entity is adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000302,
        "question": "what predisposing factors does the add/adhd have? The linked entity is add/adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "add/adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000400,
        "question": "how is attention deficit hyperactivity disorder caused? The linked entity is Attention deficit hyperactivity disorder (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "Attention deficit hyperactivity disorder",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000401,
        "question": "how is adhd caused? The linked entity is adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 275000402,
        "question": "how is add/adhd caused? The linked entity is add/adhd (m.0h99n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zppz",
                "entity_name": "Male"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qwpq0",
                "entity_name": "Learning disability"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hpx",
                "entity_name": "Preterm birth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086q2q",
                "entity_name": "Oppositional defiant disorder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wfn5t",
                "entity_name": "Family History of Attention Deficit - Hyperactivity Disorder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.risk_factor",
                    "class": "medicine.risk_factor",
                    "friendly_name": "Risk Factor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h99n",
                    "class": "base.aubreymaturin.malady",
                    "friendly_name": "add/adhd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.disease.risk_factors",
                    "friendly_name": "Risk Factors"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.risk_factor . \nVALUES ?x1 { :m.0h99n } \n?x1 :medicine.disease.risk_factors ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.risk_factor (JOIN (R medicine.disease.risk_factors) m.0h99n))",
        "program": "step1:(JOIN (R medicine.disease.risk_factors) m.0h99n)[SEP]step2:(AND medicine.risk_factor step1)[SEP]"
    },
    {
        "qid": 277000000,
        "question": "what asterisms are there in orion? The linked entity is Orion (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "Orion",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000001,
        "question": "what asterisms are there in orion the hunter? The linked entity is orion the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "orion the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000002,
        "question": "what asterisms are there in the hunter? The linked entity is the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000100,
        "question": "what asterisms are in orion? The linked entity is Orion (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "Orion",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000101,
        "question": "what asterisms are in orion the hunter? The linked entity is orion the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "orion the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000102,
        "question": "what asterisms are in the hunter? The linked entity is the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000200,
        "question": "what asterisms make up orion? The linked entity is Orion (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "Orion",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000201,
        "question": "what asterisms make up orion the hunter? The linked entity is orion the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "orion the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000202,
        "question": "what asterisms make up the hunter? The linked entity is the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000300,
        "question": "which asterisms appear in orion? The linked entity is Orion (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "Orion",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000301,
        "question": "which asterisms appear in orion the hunter? The linked entity is orion the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "orion the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000302,
        "question": "which asterisms appear in the hunter? The linked entity is the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000400,
        "question": "which asterisms are located in the orion constellation? The linked entity is Orion (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "Orion",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000401,
        "question": "which asterisms are located in the orion the hunter constellation? The linked entity is orion the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "orion the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 277000402,
        "question": "which asterisms are located in the the hunter constellation? The linked entity is the hunter (m.0142jk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlltw",
                "entity_name": "Orion's Belt"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.asterism",
                    "class": "astronomy.asterism",
                    "friendly_name": "Asterism",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0142jk",
                    "class": "astronomy.constellation",
                    "friendly_name": "the hunter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.asterism.constellations",
                    "friendly_name": "Constellations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asterism . \nVALUES ?x1 { :m.0142jk } \n?x0 :astronomy.asterism.constellations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND astronomy.asterism (JOIN astronomy.asterism.constellations m.0142jk))",
        "program": "step1:(JOIN astronomy.asterism.constellations m.0142jk)[SEP]step2:(AND astronomy.asterism step1)[SEP]"
    },
    {
        "qid": 278000000,
        "question": "elk can be found as supporter in which coat of arms? The linked entity is Elk (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Elk",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000001,
        "question": "wapiti can be found as supporter in which coat of arms? The linked entity is wapiti (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "wapiti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000002,
        "question": "cervus canadensis can be found as supporter in which coat of arms? The linked entity is cervus canadensis (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "cervus canadensis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000100,
        "question": "which coat of arms used elk as a supporter? The linked entity is Elk (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Elk",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000101,
        "question": "which coat of arms used wapiti as a supporter? The linked entity is wapiti (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "wapiti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000102,
        "question": "which coat of arms used cervus canadensis as a supporter? The linked entity is cervus canadensis (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "cervus canadensis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000200,
        "question": "in which coat of arms is elk used as a supporter? The linked entity is Elk (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Elk",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000201,
        "question": "in which coat of arms is wapiti used as a supporter? The linked entity is wapiti (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "wapiti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000202,
        "question": "in which coat of arms is cervus canadensis used as a supporter? The linked entity is cervus canadensis (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "cervus canadensis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000300,
        "question": "the elk is used as supporter in which coat of arms? The linked entity is Elk (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Elk",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000301,
        "question": "the wapiti is used as supporter in which coat of arms? The linked entity is wapiti (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "wapiti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 278000302,
        "question": "the cervus canadensis is used as supporter in which coat of arms? The linked entity is cervus canadensis (m.026545k).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vy7d",
                "entity_name": "Coat of arms of British Columbia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of Arms",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026545k",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "cervus canadensis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.heraldic_supporter.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.026545k } \n?x1 :symbols.heraldic_supporter.coat_of_arms ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms (JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k))",
        "program": "step1:(JOIN (R symbols.heraldic_supporter.coat_of_arms) m.026545k)[SEP]step2:(AND symbols.coat_of_arms step1)[SEP]"
    },
    {
        "qid": 279000000,
        "question": "what are the apparel sold at kismet? The linked entity is Kismet (m.0dksddv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09j2d",
                "entity_name": "Clothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06rrc",
                "entity_name": "Shoe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.garment",
                    "class": "fashion.garment",
                    "friendly_name": "Garment",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dksddv",
                    "class": "base.services.apparel_store",
                    "friendly_name": "Kismet",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.apparel_store.apparel_item",
                    "friendly_name": "Apparel item"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.garment . \nVALUES ?x1 { :m.0dksddv } \n?x1 :base.services.apparel_store.apparel_item ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fashion.garment (JOIN (R base.services.apparel_store.apparel_item) m.0dksddv))",
        "program": "step1:(JOIN (R base.services.apparel_store.apparel_item) m.0dksddv)[SEP]step2:(AND fashion.garment step1)[SEP]"
    },
    {
        "qid": 279000100,
        "question": "what kinds of garments are sold by kismet? The linked entity is Kismet (m.0dksddv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09j2d",
                "entity_name": "Clothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06rrc",
                "entity_name": "Shoe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.garment",
                    "class": "fashion.garment",
                    "friendly_name": "Garment",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dksddv",
                    "class": "base.services.apparel_store",
                    "friendly_name": "Kismet",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.apparel_store.apparel_item",
                    "friendly_name": "Apparel item"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.garment . \nVALUES ?x1 { :m.0dksddv } \n?x1 :base.services.apparel_store.apparel_item ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fashion.garment (JOIN (R base.services.apparel_store.apparel_item) m.0dksddv))",
        "program": "step1:(JOIN (R base.services.apparel_store.apparel_item) m.0dksddv)[SEP]step2:(AND fashion.garment step1)[SEP]"
    },
    {
        "qid": 279000200,
        "question": "what type of clothing does kismet sell? The linked entity is Kismet (m.0dksddv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09j2d",
                "entity_name": "Clothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06rrc",
                "entity_name": "Shoe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.garment",
                    "class": "fashion.garment",
                    "friendly_name": "Garment",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dksddv",
                    "class": "base.services.apparel_store",
                    "friendly_name": "Kismet",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.apparel_store.apparel_item",
                    "friendly_name": "Apparel item"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.garment . \nVALUES ?x1 { :m.0dksddv } \n?x1 :base.services.apparel_store.apparel_item ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fashion.garment (JOIN (R base.services.apparel_store.apparel_item) m.0dksddv))",
        "program": "step1:(JOIN (R base.services.apparel_store.apparel_item) m.0dksddv)[SEP]step2:(AND fashion.garment step1)[SEP]"
    },
    {
        "qid": 279000300,
        "question": "what apparel is available in kismet? The linked entity is Kismet (m.0dksddv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09j2d",
                "entity_name": "Clothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06rrc",
                "entity_name": "Shoe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.garment",
                    "class": "fashion.garment",
                    "friendly_name": "Garment",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dksddv",
                    "class": "base.services.apparel_store",
                    "friendly_name": "Kismet",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.apparel_store.apparel_item",
                    "friendly_name": "Apparel item"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.garment . \nVALUES ?x1 { :m.0dksddv } \n?x1 :base.services.apparel_store.apparel_item ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fashion.garment (JOIN (R base.services.apparel_store.apparel_item) m.0dksddv))",
        "program": "step1:(JOIN (R base.services.apparel_store.apparel_item) m.0dksddv)[SEP]step2:(AND fashion.garment step1)[SEP]"
    },
    {
        "qid": 281000000,
        "question": "what heraldic supporters can be found in the royal coat of arms of the united kingdom? The linked entity is Royal coat of arms of the United Kingdom (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Royal coat of arms of the United Kingdom",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000001,
        "question": "what heraldic supporters can be found in the royal arms of the united kingdom? The linked entity is royal arms of the united kingdom (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "royal arms of the united kingdom",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000002,
        "question": "what heraldic supporters can be found in the british coat of arms? The linked entity is british coat of arms (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "british coat of arms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000100,
        "question": "what heraldic supporters are used in the royal coat of arms of the united kingdom? The linked entity is Royal coat of arms of the United Kingdom (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Royal coat of arms of the United Kingdom",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000101,
        "question": "what heraldic supporters are used in the royal arms of the united kingdom? The linked entity is royal arms of the united kingdom (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "royal arms of the united kingdom",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000102,
        "question": "what heraldic supporters are used in the british coat of arms? The linked entity is british coat of arms (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "british coat of arms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000200,
        "question": "the royal coat of arms of the united kingdom has which heraldic supporters included? The linked entity is Royal coat of arms of the United Kingdom (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Royal coat of arms of the United Kingdom",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000201,
        "question": "the royal arms of the united kingdom has which heraldic supporters included? The linked entity is royal arms of the united kingdom (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "royal arms of the united kingdom",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 281000202,
        "question": "the british coat of arms has which heraldic supporters included? The linked entity is british coat of arms (m.01g6hm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2811",
                "entity_name": "Lion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.heraldic_supporter",
                    "class": "symbols.heraldic_supporter",
                    "friendly_name": "Heraldic Supporter",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01g6hm",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "british coat of arms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "symbols.heraldic_crest.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_supporter . \nVALUES ?x1 { :m.01g6hm } \n?x0 :symbols.heraldic_crest.coat_of_arms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND symbols.heraldic_supporter (JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm))",
        "program": "step1:(JOIN symbols.heraldic_crest.coat_of_arms m.01g6hm)[SEP]step2:(AND symbols.heraldic_supporter step1)[SEP]"
    },
    {
        "qid": 282000000,
        "question": "what's the acting mechanism of tramadol? The linked entity is Tramadol (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Tramadol",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000001,
        "question": "what's the acting mechanism of ultram? The linked entity is ultram (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "ultram",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000100,
        "question": "how does the drug tramadol take effect? The linked entity is Tramadol (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Tramadol",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000101,
        "question": "how does the drug ultram take effect? The linked entity is ultram (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "ultram",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000200,
        "question": "in what way does tramadol work in the body? The linked entity is Tramadol (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Tramadol",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000201,
        "question": "in what way does ultram work in the body? The linked entity is ultram (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "ultram",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000300,
        "question": "what's the mechanism of action of tramadol? The linked entity is Tramadol (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Tramadol",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000301,
        "question": "what's the mechanism of action of ultram? The linked entity is ultram (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "ultram",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000400,
        "question": "how does tramadol act in the body? The linked entity is Tramadol (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Tramadol",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000401,
        "question": "how does ultram act in the body? The linked entity is ultram (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "ultram",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000500,
        "question": "how does tramadol work? The linked entity is Tramadol (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Tramadol",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 282000501,
        "question": "how does ultram work? The linked entity is ultram (m.01l6z8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqywfx",
                "entity_name": "Full Opioid Agonist"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.drug_mechanism_of_action",
                    "class": "medicine.drug_mechanism_of_action",
                    "friendly_name": "Drug mechanism of action",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01l6z8",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "ultram",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.drug.mechanism_of_action",
                    "friendly_name": "Mechanism of action"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.01l6z8 } \n?x1 :medicine.drug.mechanism_of_action ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN (R medicine.drug.mechanism_of_action) m.01l6z8))",
        "program": "step1:(JOIN (R medicine.drug.mechanism_of_action) m.01l6z8)[SEP]step2:(AND medicine.drug_mechanism_of_action step1)[SEP]"
    },
    {
        "qid": 283000000,
        "question": "what kind of amenities does the lanna thai restaurant have? The linked entity is Lanna Thai Restaurant (m.0dkw0j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yn76",
                "entity_name": "Catering"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8q",
                "entity_name": "Kid Friendly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w53b",
                "entity_name": "Take-out food"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8j",
                "entity_name": "Private Events"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.services.restaurant_amenities",
                    "class": "base.services.restaurant_amenities",
                    "friendly_name": "Restaurant amenities",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dkw0j3",
                    "class": "base.services.restaurant_additions",
                    "friendly_name": "Lanna Thai Restaurant",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.restaurant_additions.amenities",
                    "friendly_name": "Amenities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.services.restaurant_amenities . \nVALUES ?x1 { :m.0dkw0j3 } \n?x1 :base.services.restaurant_additions.amenities ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.services.restaurant_amenities (JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3))",
        "program": "step1:(JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3)[SEP]step2:(AND base.services.restaurant_amenities step1)[SEP]"
    },
    {
        "qid": 283000100,
        "question": "what amenities are available at the lanna thai restaurant? The linked entity is Lanna Thai Restaurant (m.0dkw0j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yn76",
                "entity_name": "Catering"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8q",
                "entity_name": "Kid Friendly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w53b",
                "entity_name": "Take-out food"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8j",
                "entity_name": "Private Events"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.services.restaurant_amenities",
                    "class": "base.services.restaurant_amenities",
                    "friendly_name": "Restaurant amenities",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dkw0j3",
                    "class": "base.services.restaurant_additions",
                    "friendly_name": "Lanna Thai Restaurant",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.restaurant_additions.amenities",
                    "friendly_name": "Amenities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.services.restaurant_amenities . \nVALUES ?x1 { :m.0dkw0j3 } \n?x1 :base.services.restaurant_additions.amenities ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.services.restaurant_amenities (JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3))",
        "program": "step1:(JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3)[SEP]step2:(AND base.services.restaurant_amenities step1)[SEP]"
    },
    {
        "qid": 283000200,
        "question": "does lanna thai restaurant have any special amenities? The linked entity is Lanna Thai Restaurant (m.0dkw0j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yn76",
                "entity_name": "Catering"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8q",
                "entity_name": "Kid Friendly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w53b",
                "entity_name": "Take-out food"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8j",
                "entity_name": "Private Events"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.services.restaurant_amenities",
                    "class": "base.services.restaurant_amenities",
                    "friendly_name": "Restaurant amenities",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dkw0j3",
                    "class": "base.services.restaurant_additions",
                    "friendly_name": "Lanna Thai Restaurant",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.restaurant_additions.amenities",
                    "friendly_name": "Amenities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.services.restaurant_amenities . \nVALUES ?x1 { :m.0dkw0j3 } \n?x1 :base.services.restaurant_additions.amenities ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.services.restaurant_amenities (JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3))",
        "program": "step1:(JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3)[SEP]step2:(AND base.services.restaurant_amenities step1)[SEP]"
    },
    {
        "qid": 283000300,
        "question": "the lanna thai restaurant has what kind of amenities? The linked entity is Lanna Thai Restaurant (m.0dkw0j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yn76",
                "entity_name": "Catering"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8q",
                "entity_name": "Kid Friendly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w53b",
                "entity_name": "Take-out food"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8j",
                "entity_name": "Private Events"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.services.restaurant_amenities",
                    "class": "base.services.restaurant_amenities",
                    "friendly_name": "Restaurant amenities",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dkw0j3",
                    "class": "base.services.restaurant_additions",
                    "friendly_name": "Lanna Thai Restaurant",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.restaurant_additions.amenities",
                    "friendly_name": "Amenities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.services.restaurant_amenities . \nVALUES ?x1 { :m.0dkw0j3 } \n?x1 :base.services.restaurant_additions.amenities ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.services.restaurant_amenities (JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3))",
        "program": "step1:(JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3)[SEP]step2:(AND base.services.restaurant_amenities step1)[SEP]"
    },
    {
        "qid": 283000400,
        "question": "what amenities are provided in the lanna thai restaurant? The linked entity is Lanna Thai Restaurant (m.0dkw0j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yn76",
                "entity_name": "Catering"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8q",
                "entity_name": "Kid Friendly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w53b",
                "entity_name": "Take-out food"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm2c8j",
                "entity_name": "Private Events"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.services.restaurant_amenities",
                    "class": "base.services.restaurant_amenities",
                    "friendly_name": "Restaurant amenities",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dkw0j3",
                    "class": "base.services.restaurant_additions",
                    "friendly_name": "Lanna Thai Restaurant",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.services.restaurant_additions.amenities",
                    "friendly_name": "Amenities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.services.restaurant_amenities . \nVALUES ?x1 { :m.0dkw0j3 } \n?x1 :base.services.restaurant_additions.amenities ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.services.restaurant_amenities (JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3))",
        "program": "step1:(JOIN (R base.services.restaurant_additions.amenities) m.0dkw0j3)[SEP]step2:(AND base.services.restaurant_amenities step1)[SEP]"
    },
    {
        "qid": 284000000,
        "question": "which racehorses did bold ruler sire? The linked entity is Bold Ruler (m.08k58n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gv_l",
                "entity_name": "Secretariat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gscw5",
                "entity_name": "Gamely"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.thoroughbredracing.thoroughbred_racehorse",
                    "class": "base.thoroughbredracing.thoroughbred_racehorse",
                    "friendly_name": "Thoroughbred racehorse",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08k58n",
                    "class": "base.horseracing.racehorse",
                    "friendly_name": "Bold Ruler",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism.parents",
                    "friendly_name": "Parents"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.thoroughbredracing.thoroughbred_racehorse . \nVALUES ?x1 { :m.08k58n } \n?x0 :biology.organism.parents ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.thoroughbredracing.thoroughbred_racehorse (JOIN biology.organism.parents m.08k58n))",
        "program": "step1:(JOIN biology.organism.parents m.08k58n)[SEP]step2:(AND base.thoroughbredracing.thoroughbred_racehorse step1)[SEP]"
    },
    {
        "qid": 284000100,
        "question": "find the young of bold ruler. The linked entity is Bold Ruler (m.08k58n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gv_l",
                "entity_name": "Secretariat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gscw5",
                "entity_name": "Gamely"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.thoroughbredracing.thoroughbred_racehorse",
                    "class": "base.thoroughbredracing.thoroughbred_racehorse",
                    "friendly_name": "Thoroughbred racehorse",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08k58n",
                    "class": "base.horseracing.racehorse",
                    "friendly_name": "Bold Ruler",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism.parents",
                    "friendly_name": "Parents"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.thoroughbredracing.thoroughbred_racehorse . \nVALUES ?x1 { :m.08k58n } \n?x0 :biology.organism.parents ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.thoroughbredracing.thoroughbred_racehorse (JOIN biology.organism.parents m.08k58n))",
        "program": "step1:(JOIN biology.organism.parents m.08k58n)[SEP]step2:(AND base.thoroughbredracing.thoroughbred_racehorse step1)[SEP]"
    },
    {
        "qid": 284000200,
        "question": "locate the children of bold ruler. The linked entity is Bold Ruler (m.08k58n).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gv_l",
                "entity_name": "Secretariat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gscw5",
                "entity_name": "Gamely"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.thoroughbredracing.thoroughbred_racehorse",
                    "class": "base.thoroughbredracing.thoroughbred_racehorse",
                    "friendly_name": "Thoroughbred racehorse",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08k58n",
                    "class": "base.horseracing.racehorse",
                    "friendly_name": "Bold Ruler",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism.parents",
                    "friendly_name": "Parents"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.thoroughbredracing.thoroughbred_racehorse . \nVALUES ?x1 { :m.08k58n } \n?x0 :biology.organism.parents ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.thoroughbredracing.thoroughbred_racehorse (JOIN biology.organism.parents m.08k58n))",
        "program": "step1:(JOIN biology.organism.parents m.08k58n)[SEP]step2:(AND base.thoroughbredracing.thoroughbred_racehorse step1)[SEP]"
    },
    {
        "qid": 286000000,
        "question": "julius reisinger choreographed what ballet? The linked entity is Julius Reisinger (m.0gv_xl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pl8z",
                "entity_name": "Swan Lake"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0gv_xl",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "Julius Reisinger",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet . \nVALUES ?x1 { :m.0gv_xl } \n?x1 :base.ballet.choreographer.ballets_choreographed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet (JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl)[SEP]step2:(AND base.ballet.ballet step1)[SEP]"
    },
    {
        "qid": 286000100,
        "question": "what ballet did julius reisinger choreograph? The linked entity is Julius Reisinger (m.0gv_xl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pl8z",
                "entity_name": "Swan Lake"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0gv_xl",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "Julius Reisinger",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet . \nVALUES ?x1 { :m.0gv_xl } \n?x1 :base.ballet.choreographer.ballets_choreographed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet (JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl)[SEP]step2:(AND base.ballet.ballet step1)[SEP]"
    },
    {
        "qid": 286000200,
        "question": "what are the ballets that julius reisinger choreographed? The linked entity is Julius Reisinger (m.0gv_xl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pl8z",
                "entity_name": "Swan Lake"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0gv_xl",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "Julius Reisinger",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet . \nVALUES ?x1 { :m.0gv_xl } \n?x1 :base.ballet.choreographer.ballets_choreographed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet (JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl)[SEP]step2:(AND base.ballet.ballet step1)[SEP]"
    },
    {
        "qid": 286000300,
        "question": "what ballet is choreographed by julius reisinger? The linked entity is Julius Reisinger (m.0gv_xl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pl8z",
                "entity_name": "Swan Lake"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0gv_xl",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "Julius Reisinger",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet . \nVALUES ?x1 { :m.0gv_xl } \n?x1 :base.ballet.choreographer.ballets_choreographed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet (JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl)[SEP]step2:(AND base.ballet.ballet step1)[SEP]"
    },
    {
        "qid": 286000400,
        "question": "in which ballet does julius reisinger work as the choreographer? The linked entity is Julius Reisinger (m.0gv_xl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pl8z",
                "entity_name": "Swan Lake"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0gv_xl",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "Julius Reisinger",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet . \nVALUES ?x1 { :m.0gv_xl } \n?x1 :base.ballet.choreographer.ballets_choreographed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet (JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.0gv_xl)[SEP]step2:(AND base.ballet.ballet step1)[SEP]"
    },
    {
        "qid": 287000000,
        "question": "what is the theme of delphine barbie? The linked entity is Delphine Barbie (m.05g0dhf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.032tl",
                "entity_name": "Fashion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_theme",
                    "class": "base.barbie.barbie_theme",
                    "friendly_name": "Barbie Theme",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05g0dhf",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Delphine Barbie",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barbie.barbie_doll.theme",
                    "friendly_name": "Theme"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_theme . \nVALUES ?x1 { :m.05g0dhf } \n?x1 :base.barbie.barbie_doll.theme ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_theme (JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf))",
        "program": "step1:(JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf)[SEP]step2:(AND base.barbie.barbie_theme step1)[SEP]"
    },
    {
        "qid": 287000100,
        "question": "what's the subject of the delphine barbie? The linked entity is Delphine Barbie (m.05g0dhf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.032tl",
                "entity_name": "Fashion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_theme",
                    "class": "base.barbie.barbie_theme",
                    "friendly_name": "Barbie Theme",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05g0dhf",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Delphine Barbie",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barbie.barbie_doll.theme",
                    "friendly_name": "Theme"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_theme . \nVALUES ?x1 { :m.05g0dhf } \n?x1 :base.barbie.barbie_doll.theme ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_theme (JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf))",
        "program": "step1:(JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf)[SEP]step2:(AND base.barbie.barbie_theme step1)[SEP]"
    },
    {
        "qid": 287000200,
        "question": "what is the delphine barbie based on? The linked entity is Delphine Barbie (m.05g0dhf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.032tl",
                "entity_name": "Fashion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_theme",
                    "class": "base.barbie.barbie_theme",
                    "friendly_name": "Barbie Theme",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05g0dhf",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Delphine Barbie",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barbie.barbie_doll.theme",
                    "friendly_name": "Theme"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_theme . \nVALUES ?x1 { :m.05g0dhf } \n?x1 :base.barbie.barbie_doll.theme ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_theme (JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf))",
        "program": "step1:(JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf)[SEP]step2:(AND base.barbie.barbie_theme step1)[SEP]"
    },
    {
        "qid": 287000300,
        "question": "what type of style is the delphine barbie based around? The linked entity is Delphine Barbie (m.05g0dhf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.032tl",
                "entity_name": "Fashion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_theme",
                    "class": "base.barbie.barbie_theme",
                    "friendly_name": "Barbie Theme",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05g0dhf",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Delphine Barbie",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barbie.barbie_doll.theme",
                    "friendly_name": "Theme"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_theme . \nVALUES ?x1 { :m.05g0dhf } \n?x1 :base.barbie.barbie_doll.theme ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_theme (JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf))",
        "program": "step1:(JOIN (R base.barbie.barbie_doll.theme) m.05g0dhf)[SEP]step2:(AND base.barbie.barbie_theme step1)[SEP]"
    },
    {
        "qid": 289000000,
        "question": "what is the name of the nascar racing organization owned by dale earnhardt, jr.? The linked entity is Dale Earnhardt, Jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "Dale Earnhardt, Jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000001,
        "question": "what is the name of the nascar racing organization owned by dale earnhardt jr.? The linked entity is dale earnhardt jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000002,
        "question": "what is the name of the nascar racing organization owned by dale earnhardt jr? The linked entity is dale earnhardt jr (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000100,
        "question": "dale earnhardt, jr. owns which nascar organization? The linked entity is Dale Earnhardt, Jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "Dale Earnhardt, Jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000101,
        "question": "dale earnhardt jr. owns which nascar organization? The linked entity is dale earnhardt jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000102,
        "question": "dale earnhardt jr owns which nascar organization? The linked entity is dale earnhardt jr (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000200,
        "question": "what team does dale earnhardt, jr. control? The linked entity is Dale Earnhardt, Jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "Dale Earnhardt, Jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000201,
        "question": "what team does dale earnhardt jr. control? The linked entity is dale earnhardt jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000202,
        "question": "what team does dale earnhardt jr control? The linked entity is dale earnhardt jr (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000300,
        "question": "which organization of nascar does dale earnhardt, jr. own? The linked entity is Dale Earnhardt, Jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "Dale Earnhardt, Jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000301,
        "question": "which organization of nascar does dale earnhardt jr. own? The linked entity is dale earnhardt jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000302,
        "question": "which organization of nascar does dale earnhardt jr own? The linked entity is dale earnhardt jr (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000400,
        "question": "which nascar racing organization is owned by dale earnhardt, jr.? The linked entity is Dale Earnhardt, Jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "Dale Earnhardt, Jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000401,
        "question": "which nascar racing organization is owned by dale earnhardt jr.? The linked entity is dale earnhardt jr. (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 289000402,
        "question": "which nascar racing organization is owned by dale earnhardt jr? The linked entity is dale earnhardt jr (m.014x8j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clz6l",
                "entity_name": "JR Motorsports"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "NASCAR Racing Organization",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014x8j",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "dale earnhardt jr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization_owner.racing_organization_owned",
                    "friendly_name": "Racing organization owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization . \nVALUES ?x1 { :m.014x8j } \n?x1 :base.nascar.nascar_racing_organization_owner.racing_organization_owned ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization (JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization_owner.racing_organization_owned) m.014x8j)[SEP]step2:(AND base.nascar.nascar_racing_organization step1)[SEP]"
    },
    {
        "qid": 290000000,
        "question": "the anime series lupin iii was created by whom? The linked entity is Lupin III (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "Lupin III",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000001,
        "question": "the anime series lupin the 3rd was created by whom? The linked entity is lupin the 3rd (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the 3rd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000002,
        "question": "the anime series lupin the third was created by whom? The linked entity is lupin the third (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the third",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000100,
        "question": "who contributed most to the creation of lupin iii? The linked entity is Lupin III (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "Lupin III",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000101,
        "question": "who contributed most to the creation of lupin the 3rd? The linked entity is lupin the 3rd (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the 3rd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000102,
        "question": "who contributed most to the creation of lupin the third? The linked entity is lupin the third (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the third",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000200,
        "question": "who is the author of the lupin iii anime? The linked entity is Lupin III (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "Lupin III",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000201,
        "question": "who is the author of the lupin the 3rd anime? The linked entity is lupin the 3rd (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the 3rd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000202,
        "question": "who is the author of the lupin the third anime? The linked entity is lupin the third (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the third",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000300,
        "question": "who created the anime lupin iii? The linked entity is Lupin III (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "Lupin III",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000301,
        "question": "who created the anime lupin the 3rd? The linked entity is lupin the 3rd (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the 3rd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000302,
        "question": "who created the anime lupin the third? The linked entity is lupin the third (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the third",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000400,
        "question": "who is the creator of lupin iii? The linked entity is Lupin III (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "Lupin III",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000401,
        "question": "who is the creator of lupin the 3rd? The linked entity is lupin the 3rd (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the 3rd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 290000402,
        "question": "who is the creator of lupin the third? The linked entity is lupin the third (m.01pxpp).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ypgf",
                "entity_name": "Monkey Punch"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.animemanga.anime_manga_creator",
                    "class": "base.animemanga.anime_manga_creator",
                    "friendly_name": "Anime/Manga Creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01pxpp",
                    "class": "base.animemanga.anime_manga_franchise",
                    "friendly_name": "lupin the third",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.animemanga.anime_manga_creator.anime_manga_created",
                    "friendly_name": "Anime/Manga Created"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.animemanga.anime_manga_creator . \nVALUES ?x1 { :m.01pxpp } \n?x0 :base.animemanga.anime_manga_creator.anime_manga_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.animemanga.anime_manga_creator (JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp))",
        "program": "step1:(JOIN base.animemanga.anime_manga_creator.anime_manga_created m.01pxpp)[SEP]step2:(AND base.animemanga.anime_manga_creator step1)[SEP]"
    },
    {
        "qid": 291000000,
        "question": "which comedy groups play satire? The linked entity is Satire (m.06nbt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04sd0",
                "entity_name": "Monty Python"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.americancomedy.comedy_group",
                    "class": "base.americancomedy.comedy_group",
                    "friendly_name": "Comedy group",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06nbt",
                    "class": "base.americancomedy.comedy_genre",
                    "friendly_name": "Satire",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.americancomedy.comedy_genre.comedy_groups",
                    "friendly_name": "Comedy groups"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.americancomedy.comedy_group . \nVALUES ?x1 { :m.06nbt } \n?x1 :base.americancomedy.comedy_genre.comedy_groups ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.americancomedy.comedy_group (JOIN (R base.americancomedy.comedy_genre.comedy_groups) m.06nbt))",
        "program": "step1:(JOIN (R base.americancomedy.comedy_genre.comedy_groups) m.06nbt)[SEP]step2:(AND base.americancomedy.comedy_group step1)[SEP]"
    },
    {
        "qid": 291000100,
        "question": "what are the comedy troupes that uses satire? The linked entity is Satire (m.06nbt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04sd0",
                "entity_name": "Monty Python"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.americancomedy.comedy_group",
                    "class": "base.americancomedy.comedy_group",
                    "friendly_name": "Comedy group",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06nbt",
                    "class": "base.americancomedy.comedy_genre",
                    "friendly_name": "Satire",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.americancomedy.comedy_genre.comedy_groups",
                    "friendly_name": "Comedy groups"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.americancomedy.comedy_group . \nVALUES ?x1 { :m.06nbt } \n?x1 :base.americancomedy.comedy_genre.comedy_groups ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.americancomedy.comedy_group (JOIN (R base.americancomedy.comedy_genre.comedy_groups) m.06nbt))",
        "program": "step1:(JOIN (R base.americancomedy.comedy_genre.comedy_groups) m.06nbt)[SEP]step2:(AND base.americancomedy.comedy_group step1)[SEP]"
    },
    {
        "qid": 291000200,
        "question": "find satire comedy groups. The linked entity is Satire (m.06nbt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04sd0",
                "entity_name": "Monty Python"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.americancomedy.comedy_group",
                    "class": "base.americancomedy.comedy_group",
                    "friendly_name": "Comedy group",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06nbt",
                    "class": "base.americancomedy.comedy_genre",
                    "friendly_name": "Satire",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.americancomedy.comedy_genre.comedy_groups",
                    "friendly_name": "Comedy groups"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.americancomedy.comedy_group . \nVALUES ?x1 { :m.06nbt } \n?x1 :base.americancomedy.comedy_genre.comedy_groups ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.americancomedy.comedy_group (JOIN (R base.americancomedy.comedy_genre.comedy_groups) m.06nbt))",
        "program": "step1:(JOIN (R base.americancomedy.comedy_genre.comedy_groups) m.06nbt)[SEP]step2:(AND base.americancomedy.comedy_group step1)[SEP]"
    },
    {
        "qid": 292000000,
        "question": "the armistice of cassibile was a peace treaty for which war? The linked entity is Armistice of Cassibile (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "Armistice of Cassibile",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000001,
        "question": "the italian armistice was a peace treaty for which war? The linked entity is italian armistice (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "italian armistice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000100,
        "question": "the armistice of cassibile is the peace treaty of which war? The linked entity is Armistice of Cassibile (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "Armistice of Cassibile",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000101,
        "question": "the italian armistice is the peace treaty of which war? The linked entity is italian armistice (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "italian armistice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000200,
        "question": "which war had the peace treaty of the armistice of cassibile? The linked entity is Armistice of Cassibile (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "Armistice of Cassibile",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000201,
        "question": "which war had the peace treaty of the italian armistice? The linked entity is italian armistice (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "italian armistice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000300,
        "question": "for which war was the armistice of cassibile signed? The linked entity is Armistice of Cassibile (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "Armistice of Cassibile",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000301,
        "question": "for which war was the italian armistice signed? The linked entity is italian armistice (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "italian armistice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000400,
        "question": "which war is armistice of cassibile the peace treaty for? The linked entity is Armistice of Cassibile (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "Armistice of Cassibile",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000401,
        "question": "which war is italian armistice the peace treaty for? The linked entity is italian armistice (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "italian armistice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000500,
        "question": "which war ended with the armistice of cassibile peace treaty? The linked entity is Armistice of Cassibile (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "Armistice of Cassibile",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000501,
        "question": "which war ended with the italian armistice peace treaty? The linked entity is italian armistice (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "italian armistice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000600,
        "question": "armistice of cassibileended which war? The linked entity is Armistice of Cassibile (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "Armistice of Cassibile",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 292000601,
        "question": "italian armisticeended which war? The linked entity is italian armistice (m.08jn28).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.081pw",
                "entity_name": "World War II"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.morelaw.war",
                    "class": "base.morelaw.war",
                    "friendly_name": "War",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08jn28",
                    "class": "base.morelaw.peace_treaty",
                    "friendly_name": "italian armistice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.morelaw.ceasefire.w",
                    "friendly_name": "War"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.morelaw.war . \nVALUES ?x1 { :m.08jn28 } \n?x1 :base.morelaw.ceasefire.w ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.morelaw.war (JOIN (R base.morelaw.ceasefire.w) m.08jn28))",
        "program": "step1:(JOIN (R base.morelaw.ceasefire.w) m.08jn28)[SEP]step2:(AND base.morelaw.war step1)[SEP]"
    },
    {
        "qid": 293000000,
        "question": "paul r. ehrlich is affiliated with what? The linked entity is Paul R. Ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "Paul R. Ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000001,
        "question": "paul ehrlich is affiliated with what? The linked entity is paul ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "paul ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000002,
        "question": "ehrlich is affiliated with what? The linked entity is ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000100,
        "question": "what is paul r. ehrlich's affiliation? The linked entity is Paul R. Ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "Paul R. Ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000101,
        "question": "what is paul ehrlich's affiliation? The linked entity is paul ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "paul ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000102,
        "question": "what is ehrlich's affiliation? The linked entity is ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000200,
        "question": "what's the affiliation of paul r. ehrlich? The linked entity is Paul R. Ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "Paul R. Ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000201,
        "question": "what's the affiliation of paul ehrlich? The linked entity is paul ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "paul ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000202,
        "question": "what's the affiliation of ehrlich? The linked entity is ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000300,
        "question": "identify paul r. ehrlich's affiliation. The linked entity is Paul R. Ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "Paul R. Ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000301,
        "question": "identify paul ehrlich's affiliation. The linked entity is paul ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "paul ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000302,
        "question": "identify ehrlich's affiliation. The linked entity is ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000400,
        "question": "which department is paul r. ehrlich affiliated with? The linked entity is Paul R. Ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "Paul R. Ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000401,
        "question": "which department is paul ehrlich affiliated with? The linked entity is paul ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "paul ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 293000402,
        "question": "which department is ehrlich affiliated with? The linked entity is ehrlich (m.01_8tz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1d378",
                "entity_name": "Stanford Biological Sciences"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.department",
                    "class": "education.department",
                    "friendly_name": "Department",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01_8tz",
                    "class": "education.academic",
                    "friendly_name": "ehrlich",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.academic.departments_old",
                    "friendly_name": "Departments"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.01_8tz } \n?x1 :education.academic.departments_old ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.department (JOIN (R education.academic.departments_old) m.01_8tz))",
        "program": "step1:(JOIN (R education.academic.departments_old) m.01_8tz)[SEP]step2:(AND education.department step1)[SEP]"
    },
    {
        "qid": 294000000,
        "question": "who owns hendrick motorsports? The linked entity is Hendrick Motorsports (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "Hendrick Motorsports",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 294000001,
        "question": "who owns hendrick? The linked entity is hendrick (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "hendrick",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 294000100,
        "question": "who is the owner of the organization hendrick motorsports? The linked entity is Hendrick Motorsports (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "Hendrick Motorsports",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 294000101,
        "question": "who is the owner of the organization hendrick? The linked entity is hendrick (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "hendrick",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 294000200,
        "question": "hendrick motorsports is owned by who? The linked entity is Hendrick Motorsports (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "Hendrick Motorsports",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 294000201,
        "question": "hendrick is owned by who? The linked entity is hendrick (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "hendrick",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 294000300,
        "question": "who runs hendrick motorsports? The linked entity is Hendrick Motorsports (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "Hendrick Motorsports",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 294000301,
        "question": "who runs hendrick? The linked entity is hendrick (m.06lg0g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.045_5y",
                "entity_name": "Rick Hendrick"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_racing_organization_owner",
                    "class": "base.nascar.nascar_racing_organization_owner",
                    "friendly_name": "NASCAR Racing organization owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lg0g",
                    "class": "base.nascar.nascar_racing_organization",
                    "friendly_name": "hendrick",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.nascar.nascar_racing_organization.owners",
                    "friendly_name": "Owners"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_racing_organization_owner . \nVALUES ?x1 { :m.06lg0g } \n?x1 :base.nascar.nascar_racing_organization.owners ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_racing_organization_owner (JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g))",
        "program": "step1:(JOIN (R base.nascar.nascar_racing_organization.owners) m.06lg0g)[SEP]step2:(AND base.nascar.nascar_racing_organization_owner step1)[SEP]"
    },
    {
        "qid": 295000000,
        "question": "what subjects are covered by time? The linked entity is Time (m.07s52).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jhg",
                "entity_name": "News"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.periodical_subject",
                    "class": "book.periodical_subject",
                    "friendly_name": "Periodical Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07s52",
                    "class": "book.periodical",
                    "friendly_name": "Time",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "book.periodical.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical_subject . \nVALUES ?x1 { :m.07s52 } \n?x1 :book.periodical.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.periodical_subject (JOIN (R book.periodical.subjects) m.07s52))",
        "program": "step1:(JOIN (R book.periodical.subjects) m.07s52)[SEP]step2:(AND book.periodical_subject step1)[SEP]"
    },
    {
        "qid": 295000100,
        "question": "what types of subjects does time cover? The linked entity is Time (m.07s52).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jhg",
                "entity_name": "News"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.periodical_subject",
                    "class": "book.periodical_subject",
                    "friendly_name": "Periodical Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07s52",
                    "class": "book.periodical",
                    "friendly_name": "Time",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "book.periodical.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical_subject . \nVALUES ?x1 { :m.07s52 } \n?x1 :book.periodical.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.periodical_subject (JOIN (R book.periodical.subjects) m.07s52))",
        "program": "step1:(JOIN (R book.periodical.subjects) m.07s52)[SEP]step2:(AND book.periodical_subject step1)[SEP]"
    },
    {
        "qid": 295000200,
        "question": "what are the main subjects of time? The linked entity is Time (m.07s52).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jhg",
                "entity_name": "News"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.periodical_subject",
                    "class": "book.periodical_subject",
                    "friendly_name": "Periodical Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07s52",
                    "class": "book.periodical",
                    "friendly_name": "Time",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "book.periodical.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical_subject . \nVALUES ?x1 { :m.07s52 } \n?x1 :book.periodical.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.periodical_subject (JOIN (R book.periodical.subjects) m.07s52))",
        "program": "step1:(JOIN (R book.periodical.subjects) m.07s52)[SEP]step2:(AND book.periodical_subject step1)[SEP]"
    },
    {
        "qid": 295000300,
        "question": "what subjects does time primarily deal with? The linked entity is Time (m.07s52).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jhg",
                "entity_name": "News"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.periodical_subject",
                    "class": "book.periodical_subject",
                    "friendly_name": "Periodical Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07s52",
                    "class": "book.periodical",
                    "friendly_name": "Time",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "book.periodical.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical_subject . \nVALUES ?x1 { :m.07s52 } \n?x1 :book.periodical.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.periodical_subject (JOIN (R book.periodical.subjects) m.07s52))",
        "program": "step1:(JOIN (R book.periodical.subjects) m.07s52)[SEP]step2:(AND book.periodical_subject step1)[SEP]"
    },
    {
        "qid": 295000400,
        "question": "what is time magazine about? The linked entity is Time (m.07s52).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jhg",
                "entity_name": "News"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.periodical_subject",
                    "class": "book.periodical_subject",
                    "friendly_name": "Periodical Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07s52",
                    "class": "book.periodical",
                    "friendly_name": "Time",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "book.periodical.subjects",
                    "friendly_name": "Subjects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical_subject . \nVALUES ?x1 { :m.07s52 } \n?x1 :book.periodical.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.periodical_subject (JOIN (R book.periodical.subjects) m.07s52))",
        "program": "step1:(JOIN (R book.periodical.subjects) m.07s52)[SEP]step2:(AND book.periodical_subject step1)[SEP]"
    },
    {
        "qid": 297000000,
        "question": "within the new york city fire department how many firefighters are there? The linked entity is New York City Fire Department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "New York City Fire Department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000001,
        "question": "within the fdny how many firefighters are there? The linked entity is fdny (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "fdny",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000002,
        "question": "within the new york fire department how many firefighters are there? The linked entity is new york fire department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "new york fire department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000100,
        "question": "how many firefighters are employed with the new york city fire department? The linked entity is New York City Fire Department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "New York City Fire Department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000101,
        "question": "how many firefighters are employed with the fdny? The linked entity is fdny (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "fdny",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000102,
        "question": "how many firefighters are employed with the new york fire department? The linked entity is new york fire department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "new york fire department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000200,
        "question": "the new york city fire department is made up of how many firefighters? The linked entity is New York City Fire Department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "New York City Fire Department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000201,
        "question": "the fdny is made up of how many firefighters? The linked entity is fdny (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "fdny",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000202,
        "question": "the new york fire department is made up of how many firefighters? The linked entity is new york fire department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "new york fire department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000300,
        "question": "find the count of firefighters in the new york city fire department? The linked entity is New York City Fire Department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "New York City Fire Department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000301,
        "question": "find the count of firefighters in the fdny? The linked entity is fdny (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "fdny",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000302,
        "question": "find the count of firefighters in the new york fire department? The linked entity is new york fire department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "new york fire department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000400,
        "question": "how many firefighters does the new york city fire department have? The linked entity is New York City Fire Department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "New York City Fire Department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000401,
        "question": "how many firefighters does the fdny have? The linked entity is fdny (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "fdny",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000402,
        "question": "how many firefighters does the new york fire department have? The linked entity is new york fire department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "new york fire department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000500,
        "question": "the new york city fire department has how many firefighters? The linked entity is New York City Fire Department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "New York City Fire Department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000501,
        "question": "the fdny has how many firefighters? The linked entity is fdny (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "fdny",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000502,
        "question": "the new york fire department has how many firefighters? The linked entity is new york fire department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "new york fire department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000600,
        "question": "how many firefighters work for the new york city fire department? The linked entity is New York City Fire Department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "New York City Fire Department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000601,
        "question": "how many firefighters work for the fdny? The linked entity is fdny (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "fdny",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 297000602,
        "question": "how many firefighters work for the new york fire department? The linked entity is new york fire department (m.01q7bh).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "17"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.fires.firefighter",
                    "class": "base.fires.firefighter",
                    "friendly_name": "Firefighter",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q7bh",
                    "class": "base.fires.fire_department",
                    "friendly_name": "new york fire department",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.fires.firefighter.belongs_to_fire_department",
                    "friendly_name": "Belongs to fire department"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.fires.firefighter . \nVALUES ?x1 { :m.01q7bh } \n?x0 :base.fires.firefighter.belongs_to_fire_department ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.fires.firefighter (JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)))",
        "program": "step1:(JOIN base.fires.firefighter.belongs_to_fire_department m.01q7bh)[SEP]step2:(AND base.fires.firefighter step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 298000000,
        "question": "what human stampede injured the most people",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c049j",
                "entity_name": "Khodynka Tragedy"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.human_stampede",
                    "class": "base.disaster2.human_stampede",
                    "friendly_name": "Human stampede",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "event.disaster.injuries",
                    "friendly_name": "Total injuries"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.human_stampede . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.disaster2.human_stampede . \n?y0 :event.disaster.injuries ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :event.disaster.injuries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.disaster2.human_stampede event.disaster.injuries)",
        "program": "step1:(ARGMAX base.disaster2.human_stampede event.disaster.injuries)[SEP]"
    },
    {
        "qid": 298000100,
        "question": "what is khodynka tragedy?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c049j",
                "entity_name": "Khodynka Tragedy"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.human_stampede",
                    "class": "base.disaster2.human_stampede",
                    "friendly_name": "Human stampede",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "event.disaster.injuries",
                    "friendly_name": "Total injuries"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.human_stampede . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.disaster2.human_stampede . \n?y0 :event.disaster.injuries ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :event.disaster.injuries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.disaster2.human_stampede event.disaster.injuries)",
        "program": "step1:(ARGMAX base.disaster2.human_stampede event.disaster.injuries)[SEP]"
    },
    {
        "qid": 298000200,
        "question": "the maximum amount of injuries was caused by which human stampede?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c049j",
                "entity_name": "Khodynka Tragedy"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.human_stampede",
                    "class": "base.disaster2.human_stampede",
                    "friendly_name": "Human stampede",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "event.disaster.injuries",
                    "friendly_name": "Total injuries"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.human_stampede . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.disaster2.human_stampede . \n?y0 :event.disaster.injuries ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :event.disaster.injuries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.disaster2.human_stampede event.disaster.injuries)",
        "program": "step1:(ARGMAX base.disaster2.human_stampede event.disaster.injuries)[SEP]"
    },
    {
        "qid": 298000300,
        "question": "what was the most dangerous human stampede in terms of injury?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c049j",
                "entity_name": "Khodynka Tragedy"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.human_stampede",
                    "class": "base.disaster2.human_stampede",
                    "friendly_name": "Human stampede",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "event.disaster.injuries",
                    "friendly_name": "Total injuries"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.human_stampede . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.disaster2.human_stampede . \n?y0 :event.disaster.injuries ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :event.disaster.injuries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.disaster2.human_stampede event.disaster.injuries)",
        "program": "step1:(ARGMAX base.disaster2.human_stampede event.disaster.injuries)[SEP]"
    },
    {
        "qid": 298000400,
        "question": "of all human stampedes, which resulted in the most injuries?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c049j",
                "entity_name": "Khodynka Tragedy"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.human_stampede",
                    "class": "base.disaster2.human_stampede",
                    "friendly_name": "Human stampede",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "event.disaster.injuries",
                    "friendly_name": "Total injuries"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.human_stampede . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.disaster2.human_stampede . \n?y0 :event.disaster.injuries ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :event.disaster.injuries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.disaster2.human_stampede event.disaster.injuries)",
        "program": "step1:(ARGMAX base.disaster2.human_stampede event.disaster.injuries)[SEP]"
    },
    {
        "qid": 298000500,
        "question": "the most injuries were caused by which human stampede?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c049j",
                "entity_name": "Khodynka Tragedy"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.human_stampede",
                    "class": "base.disaster2.human_stampede",
                    "friendly_name": "Human stampede",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "event.disaster.injuries",
                    "friendly_name": "Total injuries"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.human_stampede . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.disaster2.human_stampede . \n?y0 :event.disaster.injuries ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :event.disaster.injuries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.disaster2.human_stampede event.disaster.injuries)",
        "program": "step1:(ARGMAX base.disaster2.human_stampede event.disaster.injuries)[SEP]"
    },
    {
        "qid": 298000600,
        "question": "which human stampede caused the most injuries?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c049j",
                "entity_name": "Khodynka Tragedy"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.human_stampede",
                    "class": "base.disaster2.human_stampede",
                    "friendly_name": "Human stampede",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "event.disaster.injuries",
                    "friendly_name": "Total injuries"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.human_stampede . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.disaster2.human_stampede . \n?y0 :event.disaster.injuries ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :event.disaster.injuries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.disaster2.human_stampede event.disaster.injuries)",
        "program": "step1:(ARGMAX base.disaster2.human_stampede event.disaster.injuries)[SEP]"
    },
    {
        "qid": 299000000,
        "question": "which satellites that orbit the earth weigh at most 1768.0 kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.021y62_",
                "entity_name": "AcrimSat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dbkk",
                "entity_name": "EgyptSat 1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jph4f",
                "entity_name": "Astra 3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n35zv",
                "entity_name": "Astra 5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cndv",
                "entity_name": "Astra 1A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037vz_",
                "entity_name": "Vanguard 3"
            }
        ],
        "function": "<=",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.satelites.earth_orbiting_satellite",
                    "class": "base.satelites.earth_orbiting_satellite",
                    "friendly_name": "Earth orbiting satellite",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1768.0^^http://www.w3.org/2001/XMLSchema#double",
                    "class": "type.float",
                    "friendly_name": "1768.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.satellite.launch_mass_kg",
                    "friendly_name": "Launch Mass"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.satelites.earth_orbiting_satellite . \nFILTER (?x1 <= \"1768.0\"^^<http://www.w3.org/2001/XMLSchema#double>)\n?x0 :spaceflight.satellite.launch_mass_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.satelites.earth_orbiting_satellite (le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double))",
        "program": "step1:(le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double)[SEP]step2:(AND base.satelites.earth_orbiting_satellite step1)[SEP]"
    },
    {
        "qid": 299000100,
        "question": "which of the satellites orbiting the earth weigh 1768.0 kg or less?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.021y62_",
                "entity_name": "AcrimSat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dbkk",
                "entity_name": "EgyptSat 1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jph4f",
                "entity_name": "Astra 3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n35zv",
                "entity_name": "Astra 5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cndv",
                "entity_name": "Astra 1A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037vz_",
                "entity_name": "Vanguard 3"
            }
        ],
        "function": "<=",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.satelites.earth_orbiting_satellite",
                    "class": "base.satelites.earth_orbiting_satellite",
                    "friendly_name": "Earth orbiting satellite",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1768.0^^http://www.w3.org/2001/XMLSchema#double",
                    "class": "type.float",
                    "friendly_name": "1768.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.satellite.launch_mass_kg",
                    "friendly_name": "Launch Mass"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.satelites.earth_orbiting_satellite . \nFILTER (?x1 <= \"1768.0\"^^<http://www.w3.org/2001/XMLSchema#double>)\n?x0 :spaceflight.satellite.launch_mass_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.satelites.earth_orbiting_satellite (le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double))",
        "program": "step1:(le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double)[SEP]step2:(AND base.satelites.earth_orbiting_satellite step1)[SEP]"
    },
    {
        "qid": 299000200,
        "question": "which satellites orbiting earth weigh 1768.0 kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.021y62_",
                "entity_name": "AcrimSat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dbkk",
                "entity_name": "EgyptSat 1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jph4f",
                "entity_name": "Astra 3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n35zv",
                "entity_name": "Astra 5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cndv",
                "entity_name": "Astra 1A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037vz_",
                "entity_name": "Vanguard 3"
            }
        ],
        "function": "<=",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.satelites.earth_orbiting_satellite",
                    "class": "base.satelites.earth_orbiting_satellite",
                    "friendly_name": "Earth orbiting satellite",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1768.0^^http://www.w3.org/2001/XMLSchema#double",
                    "class": "type.float",
                    "friendly_name": "1768.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.satellite.launch_mass_kg",
                    "friendly_name": "Launch Mass"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.satelites.earth_orbiting_satellite . \nFILTER (?x1 <= \"1768.0\"^^<http://www.w3.org/2001/XMLSchema#double>)\n?x0 :spaceflight.satellite.launch_mass_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.satelites.earth_orbiting_satellite (le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double))",
        "program": "step1:(le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double)[SEP]step2:(AND base.satelites.earth_orbiting_satellite step1)[SEP]"
    },
    {
        "qid": 299000300,
        "question": "which earth orbiting satellites have a weight of at most 1768.0 kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.021y62_",
                "entity_name": "AcrimSat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dbkk",
                "entity_name": "EgyptSat 1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jph4f",
                "entity_name": "Astra 3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n35zv",
                "entity_name": "Astra 5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cndv",
                "entity_name": "Astra 1A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037vz_",
                "entity_name": "Vanguard 3"
            }
        ],
        "function": "<=",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.satelites.earth_orbiting_satellite",
                    "class": "base.satelites.earth_orbiting_satellite",
                    "friendly_name": "Earth orbiting satellite",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1768.0^^http://www.w3.org/2001/XMLSchema#double",
                    "class": "type.float",
                    "friendly_name": "1768.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.satellite.launch_mass_kg",
                    "friendly_name": "Launch Mass"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.satelites.earth_orbiting_satellite . \nFILTER (?x1 <= \"1768.0\"^^<http://www.w3.org/2001/XMLSchema#double>)\n?x0 :spaceflight.satellite.launch_mass_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.satelites.earth_orbiting_satellite (le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double))",
        "program": "step1:(le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double)[SEP]step2:(AND base.satelites.earth_orbiting_satellite step1)[SEP]"
    },
    {
        "qid": 299000400,
        "question": "what is the name of the earth orbiting satellites which weights at most 1768.0 kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.021y62_",
                "entity_name": "AcrimSat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dbkk",
                "entity_name": "EgyptSat 1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jph4f",
                "entity_name": "Astra 3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n35zv",
                "entity_name": "Astra 5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cndv",
                "entity_name": "Astra 1A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037vz_",
                "entity_name": "Vanguard 3"
            }
        ],
        "function": "<=",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.satelites.earth_orbiting_satellite",
                    "class": "base.satelites.earth_orbiting_satellite",
                    "friendly_name": "Earth orbiting satellite",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1768.0^^http://www.w3.org/2001/XMLSchema#double",
                    "class": "type.float",
                    "friendly_name": "1768.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.satellite.launch_mass_kg",
                    "friendly_name": "Launch Mass"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.satelites.earth_orbiting_satellite . \nFILTER (?x1 <= \"1768.0\"^^<http://www.w3.org/2001/XMLSchema#double>)\n?x0 :spaceflight.satellite.launch_mass_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.satelites.earth_orbiting_satellite (le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double))",
        "program": "step1:(le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double)[SEP]step2:(AND base.satelites.earth_orbiting_satellite step1)[SEP]"
    },
    {
        "qid": 299000500,
        "question": "what is the name of the artificial satellite that is orbiting earth and has a weight of no larger than 1768.0 kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.021y62_",
                "entity_name": "AcrimSat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dbkk",
                "entity_name": "EgyptSat 1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jph4f",
                "entity_name": "Astra 3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n35zv",
                "entity_name": "Astra 5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cndv",
                "entity_name": "Astra 1A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037vz_",
                "entity_name": "Vanguard 3"
            }
        ],
        "function": "<=",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.satelites.earth_orbiting_satellite",
                    "class": "base.satelites.earth_orbiting_satellite",
                    "friendly_name": "Earth orbiting satellite",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1768.0^^http://www.w3.org/2001/XMLSchema#double",
                    "class": "type.float",
                    "friendly_name": "1768.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.satellite.launch_mass_kg",
                    "friendly_name": "Launch Mass"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.satelites.earth_orbiting_satellite . \nFILTER (?x1 <= \"1768.0\"^^<http://www.w3.org/2001/XMLSchema#double>)\n?x0 :spaceflight.satellite.launch_mass_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.satelites.earth_orbiting_satellite (le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double))",
        "program": "step1:(le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double)[SEP]step2:(AND base.satelites.earth_orbiting_satellite step1)[SEP]"
    },
    {
        "qid": 299000600,
        "question": "of all the earth orbiting satellites, which weigh 1768.0 kg or less?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.021y62_",
                "entity_name": "AcrimSat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dbkk",
                "entity_name": "EgyptSat 1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jph4f",
                "entity_name": "Astra 3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n35zv",
                "entity_name": "Astra 5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cndv",
                "entity_name": "Astra 1A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037vz_",
                "entity_name": "Vanguard 3"
            }
        ],
        "function": "<=",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.satelites.earth_orbiting_satellite",
                    "class": "base.satelites.earth_orbiting_satellite",
                    "friendly_name": "Earth orbiting satellite",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1768.0^^http://www.w3.org/2001/XMLSchema#double",
                    "class": "type.float",
                    "friendly_name": "1768.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.satellite.launch_mass_kg",
                    "friendly_name": "Launch Mass"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.satelites.earth_orbiting_satellite . \nFILTER (?x1 <= \"1768.0\"^^<http://www.w3.org/2001/XMLSchema#double>)\n?x0 :spaceflight.satellite.launch_mass_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.satelites.earth_orbiting_satellite (le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double))",
        "program": "step1:(le spaceflight.satellite.launch_mass_kg 1768.0^^http://www.w3.org/2001/XMLSchema#double)[SEP]step2:(AND base.satelites.earth_orbiting_satellite step1)[SEP]"
    },
    {
        "qid": 300000000,
        "question": "how many cpus are designed around the reduced instruction set computing strategy? The linked entity is Reduced instruction set computing (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "Reduced instruction set computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000001,
        "question": "how many cpus are designed around the risc strategy? The linked entity is risc (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "risc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000100,
        "question": "how many computer architectures are based on reduced instruction set computing? The linked entity is Reduced instruction set computing (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "Reduced instruction set computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000101,
        "question": "how many computer architectures are based on risc? The linked entity is risc (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "risc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000200,
        "question": "how many computing archtectures use reduced instruction set computing as their basis? The linked entity is Reduced instruction set computing (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "Reduced instruction set computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000201,
        "question": "how many computing archtectures use risc as their basis? The linked entity is risc (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "risc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000300,
        "question": "give me the count of computer architectures whose cpu design is reduced instruction set computing. The linked entity is Reduced instruction set computing (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "Reduced instruction set computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000301,
        "question": "give me the count of computer architectures whose cpu design is risc. The linked entity is risc (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "risc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000400,
        "question": "reduced instruction set computing is the basis for how many computer architectures? The linked entity is Reduced instruction set computing (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "Reduced instruction set computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 300000401,
        "question": "risc is the basis for how many computer architectures? The linked entity is risc (m.06jk4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.computerscience.computer_architecture",
                    "class": "base.computerscience.computer_architecture",
                    "friendly_name": "Computer Architecture",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06jk4",
                    "class": "base.computerscience.cpu_design",
                    "friendly_name": "risc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.computerscience.computer_architecture.cpu_design",
                    "friendly_name": "CPU Design"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.computerscience.computer_architecture . \nVALUES ?x1 { :m.06jk4 } \n?x0 :base.computerscience.computer_architecture.cpu_design ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.computerscience.computer_architecture (JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)))",
        "program": "step1:(JOIN base.computerscience.computer_architecture.cpu_design m.06jk4)[SEP]step2:(AND base.computerscience.computer_architecture step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 302000000,
        "question": "who was the author of the fictional universe buffyverse? The linked entity is Buffyverse (m.02s3gw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vz80y",
                "entity_name": "Joss Whedon"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.fictional_universe_creator",
                    "class": "fictional_universe.fictional_universe_creator",
                    "friendly_name": "Fictional universe creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02s3gw",
                    "class": "comic_books.comic_book_fictional_universe",
                    "friendly_name": "Buffyverse",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_universe.created_by",
                    "friendly_name": "Created by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe_creator . \nVALUES ?x1 { :m.02s3gw } \n?x1 :fictional_universe.fictional_universe.created_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.fictional_universe_creator (JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw))",
        "program": "step1:(JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw)[SEP]step2:(AND fictional_universe.fictional_universe_creator step1)[SEP]"
    },
    {
        "qid": 302000100,
        "question": "who is the creator of the buffyverse universe? The linked entity is Buffyverse (m.02s3gw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vz80y",
                "entity_name": "Joss Whedon"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.fictional_universe_creator",
                    "class": "fictional_universe.fictional_universe_creator",
                    "friendly_name": "Fictional universe creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02s3gw",
                    "class": "comic_books.comic_book_fictional_universe",
                    "friendly_name": "Buffyverse",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_universe.created_by",
                    "friendly_name": "Created by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe_creator . \nVALUES ?x1 { :m.02s3gw } \n?x1 :fictional_universe.fictional_universe.created_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.fictional_universe_creator (JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw))",
        "program": "step1:(JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw)[SEP]step2:(AND fictional_universe.fictional_universe_creator step1)[SEP]"
    },
    {
        "qid": 302000200,
        "question": "who created the fictional universe buffyverse? The linked entity is Buffyverse (m.02s3gw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vz80y",
                "entity_name": "Joss Whedon"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.fictional_universe_creator",
                    "class": "fictional_universe.fictional_universe_creator",
                    "friendly_name": "Fictional universe creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02s3gw",
                    "class": "comic_books.comic_book_fictional_universe",
                    "friendly_name": "Buffyverse",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_universe.created_by",
                    "friendly_name": "Created by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe_creator . \nVALUES ?x1 { :m.02s3gw } \n?x1 :fictional_universe.fictional_universe.created_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.fictional_universe_creator (JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw))",
        "program": "step1:(JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw)[SEP]step2:(AND fictional_universe.fictional_universe_creator step1)[SEP]"
    },
    {
        "qid": 302000300,
        "question": "who is responsible for making the fictional universe known as buffyverse? The linked entity is Buffyverse (m.02s3gw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vz80y",
                "entity_name": "Joss Whedon"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.fictional_universe_creator",
                    "class": "fictional_universe.fictional_universe_creator",
                    "friendly_name": "Fictional universe creator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02s3gw",
                    "class": "comic_books.comic_book_fictional_universe",
                    "friendly_name": "Buffyverse",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_universe.created_by",
                    "friendly_name": "Created by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe_creator . \nVALUES ?x1 { :m.02s3gw } \n?x1 :fictional_universe.fictional_universe.created_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.fictional_universe_creator (JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw))",
        "program": "step1:(JOIN (R fictional_universe.fictional_universe.created_by) m.02s3gw)[SEP]step2:(AND fictional_universe.fictional_universe_creator step1)[SEP]"
    },
    {
        "qid": 303000000,
        "question": "please specify which type of impairment did franklin d. roosevelt have? The linked entity is Franklin D. Roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Franklin D. Roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000001,
        "question": "please specify which type of impairment did fdr have? The linked entity is fdr (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "fdr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000002,
        "question": "please specify which type of impairment did roosevelt have? The linked entity is roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000100,
        "question": "franklin d. roosevelt had what type of disability? The linked entity is Franklin D. Roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Franklin D. Roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000101,
        "question": "fdr had what type of disability? The linked entity is fdr (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "fdr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000102,
        "question": "roosevelt had what type of disability? The linked entity is roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000200,
        "question": "in what ways was franklin d. roosevelt disabled? The linked entity is Franklin D. Roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Franklin D. Roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000201,
        "question": "in what ways was fdr disabled? The linked entity is fdr (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "fdr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000202,
        "question": "in what ways was roosevelt disabled? The linked entity is roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000300,
        "question": "franklin d. roosevelt suffered from which disability? The linked entity is Franklin D. Roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Franklin D. Roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000301,
        "question": "fdr suffered from which disability? The linked entity is fdr (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "fdr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000302,
        "question": "roosevelt suffered from which disability? The linked entity is roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000400,
        "question": "what disability did franklin d. roosevelt have? The linked entity is Franklin D. Roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Franklin D. Roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000401,
        "question": "what disability did fdr have? The linked entity is fdr (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "fdr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000402,
        "question": "what disability did roosevelt have? The linked entity is roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000500,
        "question": "what was franklin d. roosevelt's disability? The linked entity is Franklin D. Roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Franklin D. Roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000501,
        "question": "what was fdr's disability? The linked entity is fdr (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "fdr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 303000502,
        "question": "what was roosevelt's disability? The linked entity is roosevelt (m.02yy8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0251gx",
                "entity_name": "Paraplegia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.type_of_disability",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Type of disability",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02yy8",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "roosevelt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disabled_person.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.type_of_disability . \nVALUES ?x1 { :m.02yy8 } \n?x1 :base.qualia.disabled_person.type_of_disability ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.qualia.type_of_disability (JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8))",
        "program": "step1:(JOIN (R base.qualia.disabled_person.type_of_disability) m.02yy8)[SEP]step2:(AND base.qualia.type_of_disability step1)[SEP]"
    },
    {
        "qid": 306000000,
        "question": "what is the name of the type of cricket match where each team has more than 1 inning?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjx",
                "entity_name": "First-class cricket"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cricket.cricket_match_type",
                    "class": "cricket.cricket_match_type",
                    "friendly_name": "Cricket Match Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cricket.cricket_match_type.innings_per_team",
                    "friendly_name": "Innings Per Team"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match_type . \nFILTER (?x1 > \"1\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :cricket.cricket_match_type.innings_per_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cricket.cricket_match_type (gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND cricket.cricket_match_type step1)[SEP]"
    },
    {
        "qid": 306000100,
        "question": "is there a type of cricket match that allows more than 1 inning per team?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjx",
                "entity_name": "First-class cricket"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cricket.cricket_match_type",
                    "class": "cricket.cricket_match_type",
                    "friendly_name": "Cricket Match Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cricket.cricket_match_type.innings_per_team",
                    "friendly_name": "Innings Per Team"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match_type . \nFILTER (?x1 > \"1\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :cricket.cricket_match_type.innings_per_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cricket.cricket_match_type (gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND cricket.cricket_match_type step1)[SEP]"
    },
    {
        "qid": 306000200,
        "question": "what cricket matches have more than 1 innings for each team?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjx",
                "entity_name": "First-class cricket"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cricket.cricket_match_type",
                    "class": "cricket.cricket_match_type",
                    "friendly_name": "Cricket Match Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cricket.cricket_match_type.innings_per_team",
                    "friendly_name": "Innings Per Team"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match_type . \nFILTER (?x1 > \"1\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :cricket.cricket_match_type.innings_per_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cricket.cricket_match_type (gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND cricket.cricket_match_type step1)[SEP]"
    },
    {
        "qid": 306000300,
        "question": "what cricket match allows a team to have more than 1 inning?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjx",
                "entity_name": "First-class cricket"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cricket.cricket_match_type",
                    "class": "cricket.cricket_match_type",
                    "friendly_name": "Cricket Match Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cricket.cricket_match_type.innings_per_team",
                    "friendly_name": "Innings Per Team"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match_type . \nFILTER (?x1 > \"1\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :cricket.cricket_match_type.innings_per_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cricket.cricket_match_type (gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND cricket.cricket_match_type step1)[SEP]"
    },
    {
        "qid": 306000400,
        "question": "when can each team in a cricket match have more then 1 inning apiece?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjx",
                "entity_name": "First-class cricket"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cricket.cricket_match_type",
                    "class": "cricket.cricket_match_type",
                    "friendly_name": "Cricket Match Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cricket.cricket_match_type.innings_per_team",
                    "friendly_name": "Innings Per Team"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match_type . \nFILTER (?x1 > \"1\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :cricket.cricket_match_type.innings_per_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cricket.cricket_match_type (gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND cricket.cricket_match_type step1)[SEP]"
    },
    {
        "qid": 306000500,
        "question": "in which type of cricket match each team can have more than 1 innings?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjx",
                "entity_name": "First-class cricket"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cricket.cricket_match_type",
                    "class": "cricket.cricket_match_type",
                    "friendly_name": "Cricket Match Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cricket.cricket_match_type.innings_per_team",
                    "friendly_name": "Innings Per Team"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match_type . \nFILTER (?x1 > \"1\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :cricket.cricket_match_type.innings_per_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cricket.cricket_match_type (gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt cricket.cricket_match_type.innings_per_team 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND cricket.cricket_match_type step1)[SEP]"
    },
    {
        "qid": 307000000,
        "question": "find tropical cyclones with total fatalities less than 74.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p6ph1",
                "entity_name": "Tropical Storm Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x7s0",
                "entity_name": "Tropical Storm Allison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021159",
                "entity_name": "Cyclone Tracy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09_bwn",
                "entity_name": "1991 Perfect Storm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pm2v",
                "entity_name": "Hurricane Hugo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p70bg",
                "entity_name": "Hurricane Irene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063xjl5",
                "entity_name": "Cyclone Winifred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011dw9h1",
                "entity_name": "Typhoon Halong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k0x457",
                "entity_name": "Tropical Storm Debby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q1bcz",
                "entity_name": "Cyclone George"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2kdf",
                "entity_name": "Cyclone Larry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vsgmpg",
                "entity_name": "Hurricane Barbara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pjl1",
                "entity_name": "Hurricane Juan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zbwrpx",
                "entity_name": "Typhoon Wutip"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_yhf4f",
                "entity_name": "Cyclone Lusi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088nnl",
                "entity_name": "Hurricane Wilma"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mtf0",
                "entity_name": "Hurricane Charley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wcnw",
                "entity_name": "Hurricane Gloria"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lv_w",
                "entity_name": "Tropical Storm Arlene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011vldfq",
                "entity_name": "Tropical Storm Fung-wong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w7kbx8",
                "entity_name": "Typhoon Soulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011v6mk8",
                "entity_name": "Typhoon Kalmaegi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f01h",
                "entity_name": "Hurricane Andrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049ds6",
                "entity_name": "Hurricane John"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vw_h6l",
                "entity_name": "Tropical Storm Andrea"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.tropical_cyclone",
                    "class": "meteorology.tropical_cyclone",
                    "friendly_name": "Tropical Cyclone",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "74^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "74",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.tropical_cyclone.total_fatalities",
                    "friendly_name": "Total fatalities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone . \nFILTER (?x1 < \"74\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :meteorology.tropical_cyclone.total_fatalities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND meteorology.tropical_cyclone (lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND meteorology.tropical_cyclone step1)[SEP]"
    },
    {
        "qid": 307000100,
        "question": "which tropical cyclones caused less than 74 deaths?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p6ph1",
                "entity_name": "Tropical Storm Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x7s0",
                "entity_name": "Tropical Storm Allison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021159",
                "entity_name": "Cyclone Tracy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09_bwn",
                "entity_name": "1991 Perfect Storm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pm2v",
                "entity_name": "Hurricane Hugo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p70bg",
                "entity_name": "Hurricane Irene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063xjl5",
                "entity_name": "Cyclone Winifred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011dw9h1",
                "entity_name": "Typhoon Halong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k0x457",
                "entity_name": "Tropical Storm Debby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q1bcz",
                "entity_name": "Cyclone George"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2kdf",
                "entity_name": "Cyclone Larry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vsgmpg",
                "entity_name": "Hurricane Barbara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pjl1",
                "entity_name": "Hurricane Juan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zbwrpx",
                "entity_name": "Typhoon Wutip"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_yhf4f",
                "entity_name": "Cyclone Lusi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088nnl",
                "entity_name": "Hurricane Wilma"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mtf0",
                "entity_name": "Hurricane Charley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wcnw",
                "entity_name": "Hurricane Gloria"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lv_w",
                "entity_name": "Tropical Storm Arlene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011vldfq",
                "entity_name": "Tropical Storm Fung-wong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w7kbx8",
                "entity_name": "Typhoon Soulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011v6mk8",
                "entity_name": "Typhoon Kalmaegi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f01h",
                "entity_name": "Hurricane Andrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049ds6",
                "entity_name": "Hurricane John"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vw_h6l",
                "entity_name": "Tropical Storm Andrea"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.tropical_cyclone",
                    "class": "meteorology.tropical_cyclone",
                    "friendly_name": "Tropical Cyclone",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "74^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "74",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.tropical_cyclone.total_fatalities",
                    "friendly_name": "Total fatalities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone . \nFILTER (?x1 < \"74\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :meteorology.tropical_cyclone.total_fatalities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND meteorology.tropical_cyclone (lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND meteorology.tropical_cyclone step1)[SEP]"
    },
    {
        "qid": 307000200,
        "question": "what are the tropical cyclones that have led to fewer than 74 fatalities?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p6ph1",
                "entity_name": "Tropical Storm Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x7s0",
                "entity_name": "Tropical Storm Allison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021159",
                "entity_name": "Cyclone Tracy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09_bwn",
                "entity_name": "1991 Perfect Storm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pm2v",
                "entity_name": "Hurricane Hugo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p70bg",
                "entity_name": "Hurricane Irene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063xjl5",
                "entity_name": "Cyclone Winifred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011dw9h1",
                "entity_name": "Typhoon Halong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k0x457",
                "entity_name": "Tropical Storm Debby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q1bcz",
                "entity_name": "Cyclone George"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2kdf",
                "entity_name": "Cyclone Larry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vsgmpg",
                "entity_name": "Hurricane Barbara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pjl1",
                "entity_name": "Hurricane Juan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zbwrpx",
                "entity_name": "Typhoon Wutip"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_yhf4f",
                "entity_name": "Cyclone Lusi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088nnl",
                "entity_name": "Hurricane Wilma"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mtf0",
                "entity_name": "Hurricane Charley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wcnw",
                "entity_name": "Hurricane Gloria"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lv_w",
                "entity_name": "Tropical Storm Arlene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011vldfq",
                "entity_name": "Tropical Storm Fung-wong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w7kbx8",
                "entity_name": "Typhoon Soulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011v6mk8",
                "entity_name": "Typhoon Kalmaegi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f01h",
                "entity_name": "Hurricane Andrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049ds6",
                "entity_name": "Hurricane John"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vw_h6l",
                "entity_name": "Tropical Storm Andrea"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.tropical_cyclone",
                    "class": "meteorology.tropical_cyclone",
                    "friendly_name": "Tropical Cyclone",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "74^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "74",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.tropical_cyclone.total_fatalities",
                    "friendly_name": "Total fatalities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone . \nFILTER (?x1 < \"74\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :meteorology.tropical_cyclone.total_fatalities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND meteorology.tropical_cyclone (lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND meteorology.tropical_cyclone step1)[SEP]"
    },
    {
        "qid": 307000300,
        "question": "what are the tropical cyclones with less than 74 casualties?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p6ph1",
                "entity_name": "Tropical Storm Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x7s0",
                "entity_name": "Tropical Storm Allison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021159",
                "entity_name": "Cyclone Tracy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09_bwn",
                "entity_name": "1991 Perfect Storm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pm2v",
                "entity_name": "Hurricane Hugo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p70bg",
                "entity_name": "Hurricane Irene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063xjl5",
                "entity_name": "Cyclone Winifred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011dw9h1",
                "entity_name": "Typhoon Halong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k0x457",
                "entity_name": "Tropical Storm Debby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q1bcz",
                "entity_name": "Cyclone George"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2kdf",
                "entity_name": "Cyclone Larry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vsgmpg",
                "entity_name": "Hurricane Barbara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pjl1",
                "entity_name": "Hurricane Juan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zbwrpx",
                "entity_name": "Typhoon Wutip"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_yhf4f",
                "entity_name": "Cyclone Lusi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088nnl",
                "entity_name": "Hurricane Wilma"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mtf0",
                "entity_name": "Hurricane Charley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wcnw",
                "entity_name": "Hurricane Gloria"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lv_w",
                "entity_name": "Tropical Storm Arlene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011vldfq",
                "entity_name": "Tropical Storm Fung-wong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w7kbx8",
                "entity_name": "Typhoon Soulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011v6mk8",
                "entity_name": "Typhoon Kalmaegi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f01h",
                "entity_name": "Hurricane Andrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049ds6",
                "entity_name": "Hurricane John"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vw_h6l",
                "entity_name": "Tropical Storm Andrea"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.tropical_cyclone",
                    "class": "meteorology.tropical_cyclone",
                    "friendly_name": "Tropical Cyclone",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "74^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "74",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.tropical_cyclone.total_fatalities",
                    "friendly_name": "Total fatalities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone . \nFILTER (?x1 < \"74\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :meteorology.tropical_cyclone.total_fatalities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND meteorology.tropical_cyclone (lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND meteorology.tropical_cyclone step1)[SEP]"
    },
    {
        "qid": 307000400,
        "question": "which tropical cyclone killed less than 74 people?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p6ph1",
                "entity_name": "Tropical Storm Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x7s0",
                "entity_name": "Tropical Storm Allison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021159",
                "entity_name": "Cyclone Tracy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09_bwn",
                "entity_name": "1991 Perfect Storm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pm2v",
                "entity_name": "Hurricane Hugo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p70bg",
                "entity_name": "Hurricane Irene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063xjl5",
                "entity_name": "Cyclone Winifred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011dw9h1",
                "entity_name": "Typhoon Halong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k0x457",
                "entity_name": "Tropical Storm Debby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q1bcz",
                "entity_name": "Cyclone George"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2kdf",
                "entity_name": "Cyclone Larry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vsgmpg",
                "entity_name": "Hurricane Barbara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pjl1",
                "entity_name": "Hurricane Juan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zbwrpx",
                "entity_name": "Typhoon Wutip"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_yhf4f",
                "entity_name": "Cyclone Lusi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088nnl",
                "entity_name": "Hurricane Wilma"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mtf0",
                "entity_name": "Hurricane Charley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wcnw",
                "entity_name": "Hurricane Gloria"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lv_w",
                "entity_name": "Tropical Storm Arlene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011vldfq",
                "entity_name": "Tropical Storm Fung-wong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w7kbx8",
                "entity_name": "Typhoon Soulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011v6mk8",
                "entity_name": "Typhoon Kalmaegi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f01h",
                "entity_name": "Hurricane Andrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049ds6",
                "entity_name": "Hurricane John"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vw_h6l",
                "entity_name": "Tropical Storm Andrea"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.tropical_cyclone",
                    "class": "meteorology.tropical_cyclone",
                    "friendly_name": "Tropical Cyclone",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "74^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "74",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.tropical_cyclone.total_fatalities",
                    "friendly_name": "Total fatalities"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone . \nFILTER (?x1 < \"74\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :meteorology.tropical_cyclone.total_fatalities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND meteorology.tropical_cyclone (lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(lt meteorology.tropical_cyclone.total_fatalities 74^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND meteorology.tropical_cyclone step1)[SEP]"
    },
    {
        "qid": 308000000,
        "question": "what type of lens mount is compatible with the canon eos 40d? The linked entity is Canon EOS 40D (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "Canon EOS 40D",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000001,
        "question": "what type of lens mount is compatible with the 40d? The linked entity is 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000002,
        "question": "what type of lens mount is compatible with the canon 40d? The linked entity is canon 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "canon 40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000100,
        "question": "what is the lens mount of canon eos 40d? The linked entity is Canon EOS 40D (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "Canon EOS 40D",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000101,
        "question": "what is the lens mount of 40d? The linked entity is 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000102,
        "question": "what is the lens mount of canon 40d? The linked entity is canon 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "canon 40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000200,
        "question": "what type of lens mount is used on canon eos 40d? The linked entity is Canon EOS 40D (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "Canon EOS 40D",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000201,
        "question": "what type of lens mount is used on 40d? The linked entity is 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000202,
        "question": "what type of lens mount is used on canon 40d? The linked entity is canon 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "canon 40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000300,
        "question": "what lens mount is canon eos 40d using? The linked entity is Canon EOS 40D (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "Canon EOS 40D",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000301,
        "question": "what lens mount is 40d using? The linked entity is 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000302,
        "question": "what lens mount is canon 40d using? The linked entity is canon 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "canon 40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000400,
        "question": "canon eos 40d uses what lens mount? The linked entity is Canon EOS 40D (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "Canon EOS 40D",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000401,
        "question": "40d uses what lens mount? The linked entity is 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 308000402,
        "question": "canon 40d uses what lens mount? The linked entity is canon 40d (m.02wvl40).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03tdl3",
                "entity_name": "Canon EF-S lens mount"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.filmcameras.lens_mount",
                    "class": "base.filmcameras.lens_mount",
                    "friendly_name": "Lens Mount",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02wvl40",
                    "class": "base.filmcameras.camera",
                    "friendly_name": "canon 40d",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.filmcameras.lens_mount.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.filmcameras.lens_mount . \nVALUES ?x1 { :m.02wvl40 } \n?x0 :base.filmcameras.lens_mount.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.filmcameras.lens_mount (JOIN base.filmcameras.lens_mount.cameras m.02wvl40))",
        "program": "step1:(JOIN base.filmcameras.lens_mount.cameras m.02wvl40)[SEP]step2:(AND base.filmcameras.lens_mount step1)[SEP]"
    },
    {
        "qid": 310000000,
        "question": "what is the cup size of anna nicole smith? The linked entity is Anna Nicole Smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "Anna Nicole Smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000001,
        "question": "what is the cup size of anna nicole? The linked entity is anna nicole (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nicole",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000002,
        "question": "what is the cup size of anna nichole smith? The linked entity is anna nichole smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nichole smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000100,
        "question": "tell me anna nicole smith's cup size. The linked entity is Anna Nicole Smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "Anna Nicole Smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000101,
        "question": "tell me anna nicole's cup size. The linked entity is anna nicole (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nicole",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000102,
        "question": "tell me anna nichole smith's cup size. The linked entity is anna nichole smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nichole smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000200,
        "question": "what is anna nicole smith's bra size? The linked entity is Anna Nicole Smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "Anna Nicole Smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000201,
        "question": "what is anna nicole's bra size? The linked entity is anna nicole (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nicole",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000202,
        "question": "what is anna nichole smith's bra size? The linked entity is anna nichole smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nichole smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000300,
        "question": "how large is the cup size of anna nicole smith? The linked entity is Anna Nicole Smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "Anna Nicole Smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000301,
        "question": "how large is the cup size of anna nicole? The linked entity is anna nicole (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nicole",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000302,
        "question": "how large is the cup size of anna nichole smith? The linked entity is anna nichole smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nichole smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000400,
        "question": "how big is anna nicole smith's cup? The linked entity is Anna Nicole Smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "Anna Nicole Smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000401,
        "question": "how big is anna nicole's cup? The linked entity is anna nicole (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nicole",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000402,
        "question": "how big is anna nichole smith's cup? The linked entity is anna nichole smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nichole smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000500,
        "question": "what is anna nicole smith's cup size? The linked entity is Anna Nicole Smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "Anna Nicole Smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000501,
        "question": "what is anna nicole's cup size? The linked entity is anna nicole (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nicole",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000502,
        "question": "what is anna nichole smith's cup size? The linked entity is anna nichole smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nichole smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000600,
        "question": "anna nicole smith has what cup size? The linked entity is Anna Nicole Smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "Anna Nicole Smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000601,
        "question": "anna nicole has what cup size? The linked entity is anna nicole (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nicole",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 310000602,
        "question": "anna nichole smith has what cup size? The linked entity is anna nichole smith (m.0hwfl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_wgs",
                "entity_name": "E cup or DD cup"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.playboyplaymates.cup_sizes",
                    "class": "base.playboyplaymates.cup_sizes",
                    "friendly_name": "Cup sizes",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hwfl",
                    "class": "base.playboyplaymates.playmate",
                    "friendly_name": "anna nichole smith",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.playboyplaymates.playmate.cup",
                    "friendly_name": "Cup"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.playboyplaymates.cup_sizes . \nVALUES ?x1 { :m.0hwfl } \n?x1 :base.playboyplaymates.playmate.cup ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.playboyplaymates.cup_sizes (JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl))",
        "program": "step1:(JOIN (R base.playboyplaymates.playmate.cup) m.0hwfl)[SEP]step2:(AND base.playboyplaymates.cup_sizes step1)[SEP]"
    },
    {
        "qid": 315000000,
        "question": "what television programs have exceeded 51 seasons?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c9xm",
                "entity_name": "Face the Nation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h1bf",
                "entity_name": "Today"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0104m1df",
                "entity_name": "Macy's Thanksgiving Day Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048x4s",
                "entity_name": "Panorama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f4vxd",
                "entity_name": "Glee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067vwh",
                "entity_name": "NFL on NBC"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0144h6",
                "entity_name": "Countdown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01b66t",
                "entity_name": "As the World Turns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04glx0",
                "entity_name": "Hallmark Hall of Fame"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0585pd",
                "entity_name": "NFL on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0167_c",
                "entity_name": "Meet the Press"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_1p3",
                "entity_name": "Walt Disney's Wonderful World of Color"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bndp",
                "entity_name": "CBS Evening News"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqnwgt",
                "entity_name": "Nine News Melbourne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vr4t",
                "entity_name": "Tagesschau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ztrwd",
                "entity_name": "PGA Tour on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pwm35",
                "entity_name": "CBS Sports Spectacular"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fq2xwz",
                "entity_name": "Nine News Sydney"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_program",
                    "class": "tv.tv_program",
                    "friendly_name": "TV Program",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "51^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "51",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_program.number_of_seasons",
                    "friendly_name": "Number of seasons"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nFILTER (?x1 > \"51\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :tv.tv_program.number_of_seasons ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND tv.tv_program (gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND tv.tv_program step1)[SEP]"
    },
    {
        "qid": 315000100,
        "question": "find me tv programs with over 51 seasons.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c9xm",
                "entity_name": "Face the Nation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h1bf",
                "entity_name": "Today"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0104m1df",
                "entity_name": "Macy's Thanksgiving Day Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048x4s",
                "entity_name": "Panorama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f4vxd",
                "entity_name": "Glee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067vwh",
                "entity_name": "NFL on NBC"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0144h6",
                "entity_name": "Countdown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01b66t",
                "entity_name": "As the World Turns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04glx0",
                "entity_name": "Hallmark Hall of Fame"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0585pd",
                "entity_name": "NFL on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0167_c",
                "entity_name": "Meet the Press"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_1p3",
                "entity_name": "Walt Disney's Wonderful World of Color"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bndp",
                "entity_name": "CBS Evening News"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqnwgt",
                "entity_name": "Nine News Melbourne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vr4t",
                "entity_name": "Tagesschau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ztrwd",
                "entity_name": "PGA Tour on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pwm35",
                "entity_name": "CBS Sports Spectacular"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fq2xwz",
                "entity_name": "Nine News Sydney"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_program",
                    "class": "tv.tv_program",
                    "friendly_name": "TV Program",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "51^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "51",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_program.number_of_seasons",
                    "friendly_name": "Number of seasons"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nFILTER (?x1 > \"51\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :tv.tv_program.number_of_seasons ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND tv.tv_program (gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND tv.tv_program step1)[SEP]"
    },
    {
        "qid": 315000200,
        "question": "which television shows ran for more than 51 seasons?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c9xm",
                "entity_name": "Face the Nation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h1bf",
                "entity_name": "Today"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0104m1df",
                "entity_name": "Macy's Thanksgiving Day Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048x4s",
                "entity_name": "Panorama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f4vxd",
                "entity_name": "Glee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067vwh",
                "entity_name": "NFL on NBC"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0144h6",
                "entity_name": "Countdown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01b66t",
                "entity_name": "As the World Turns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04glx0",
                "entity_name": "Hallmark Hall of Fame"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0585pd",
                "entity_name": "NFL on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0167_c",
                "entity_name": "Meet the Press"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_1p3",
                "entity_name": "Walt Disney's Wonderful World of Color"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bndp",
                "entity_name": "CBS Evening News"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqnwgt",
                "entity_name": "Nine News Melbourne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vr4t",
                "entity_name": "Tagesschau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ztrwd",
                "entity_name": "PGA Tour on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pwm35",
                "entity_name": "CBS Sports Spectacular"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fq2xwz",
                "entity_name": "Nine News Sydney"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_program",
                    "class": "tv.tv_program",
                    "friendly_name": "TV Program",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "51^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "51",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_program.number_of_seasons",
                    "friendly_name": "Number of seasons"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nFILTER (?x1 > \"51\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :tv.tv_program.number_of_seasons ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND tv.tv_program (gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND tv.tv_program step1)[SEP]"
    },
    {
        "qid": 315000300,
        "question": "which broadcast tv programs have lasted longer than 51 seasons?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c9xm",
                "entity_name": "Face the Nation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h1bf",
                "entity_name": "Today"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0104m1df",
                "entity_name": "Macy's Thanksgiving Day Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048x4s",
                "entity_name": "Panorama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f4vxd",
                "entity_name": "Glee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067vwh",
                "entity_name": "NFL on NBC"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0144h6",
                "entity_name": "Countdown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01b66t",
                "entity_name": "As the World Turns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04glx0",
                "entity_name": "Hallmark Hall of Fame"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0585pd",
                "entity_name": "NFL on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0167_c",
                "entity_name": "Meet the Press"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_1p3",
                "entity_name": "Walt Disney's Wonderful World of Color"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bndp",
                "entity_name": "CBS Evening News"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqnwgt",
                "entity_name": "Nine News Melbourne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vr4t",
                "entity_name": "Tagesschau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ztrwd",
                "entity_name": "PGA Tour on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pwm35",
                "entity_name": "CBS Sports Spectacular"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fq2xwz",
                "entity_name": "Nine News Sydney"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_program",
                    "class": "tv.tv_program",
                    "friendly_name": "TV Program",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "51^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "51",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_program.number_of_seasons",
                    "friendly_name": "Number of seasons"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nFILTER (?x1 > \"51\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :tv.tv_program.number_of_seasons ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND tv.tv_program (gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND tv.tv_program step1)[SEP]"
    },
    {
        "qid": 315000400,
        "question": "which tv programs have more than 51 seasons?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c9xm",
                "entity_name": "Face the Nation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h1bf",
                "entity_name": "Today"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0104m1df",
                "entity_name": "Macy's Thanksgiving Day Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048x4s",
                "entity_name": "Panorama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f4vxd",
                "entity_name": "Glee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067vwh",
                "entity_name": "NFL on NBC"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0144h6",
                "entity_name": "Countdown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01b66t",
                "entity_name": "As the World Turns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04glx0",
                "entity_name": "Hallmark Hall of Fame"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0585pd",
                "entity_name": "NFL on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0167_c",
                "entity_name": "Meet the Press"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_1p3",
                "entity_name": "Walt Disney's Wonderful World of Color"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bndp",
                "entity_name": "CBS Evening News"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqnwgt",
                "entity_name": "Nine News Melbourne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vr4t",
                "entity_name": "Tagesschau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ztrwd",
                "entity_name": "PGA Tour on CBS"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pwm35",
                "entity_name": "CBS Sports Spectacular"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fq2xwz",
                "entity_name": "Nine News Sydney"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_program",
                    "class": "tv.tv_program",
                    "friendly_name": "TV Program",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "51^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "51",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_program.number_of_seasons",
                    "friendly_name": "Number of seasons"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nFILTER (?x1 > \"51\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :tv.tv_program.number_of_seasons ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND tv.tv_program (gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer))",
        "program": "step1:(gt tv.tv_program.number_of_seasons 51^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(AND tv.tv_program step1)[SEP]"
    },
    {
        "qid": 319000000,
        "question": "in how many different gameplay modes can one play guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000001,
        "question": "in how many different gameplay modes can one play guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000002,
        "question": "in how many different gameplay modes can one play guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000100,
        "question": "how many gameplay modes are available in guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000101,
        "question": "how many gameplay modes are available in guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000102,
        "question": "how many gameplay modes are available in guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000200,
        "question": "how many ways can guitar hero iii: legends of rock be played? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000201,
        "question": "how many ways can guitar hero iii be played? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000202,
        "question": "how many ways can guitar hero 3 be played? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000300,
        "question": "how many different gameplay modes are available in guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000301,
        "question": "how many different gameplay modes are available in guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 319000302,
        "question": "how many different gameplay modes are available in guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.025vn5m)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 321000000,
        "question": "what is the heaviest material?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sk79",
                "entity_name": "Tungsten"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.materials.solid_material",
                    "class": "base.materials.solid_material",
                    "friendly_name": "Solid Material",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.materials.solid_material.density",
                    "friendly_name": "Density"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.materials.solid_material . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.materials.solid_material . \n?y0 :base.materials.solid_material.density ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.materials.solid_material.density ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.materials.solid_material base.materials.solid_material.density)",
        "program": "step1:(ARGMAX base.materials.solid_material base.materials.solid_material.density)[SEP]"
    },
    {
        "qid": 321000100,
        "question": "what is the solid material that is the most dense?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sk79",
                "entity_name": "Tungsten"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.materials.solid_material",
                    "class": "base.materials.solid_material",
                    "friendly_name": "Solid Material",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.materials.solid_material.density",
                    "friendly_name": "Density"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.materials.solid_material . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.materials.solid_material . \n?y0 :base.materials.solid_material.density ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.materials.solid_material.density ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.materials.solid_material base.materials.solid_material.density)",
        "program": "step1:(ARGMAX base.materials.solid_material base.materials.solid_material.density)[SEP]"
    },
    {
        "qid": 321000200,
        "question": "what is the largest-density solid material known to man?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sk79",
                "entity_name": "Tungsten"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.materials.solid_material",
                    "class": "base.materials.solid_material",
                    "friendly_name": "Solid Material",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.materials.solid_material.density",
                    "friendly_name": "Density"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.materials.solid_material . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.materials.solid_material . \n?y0 :base.materials.solid_material.density ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.materials.solid_material.density ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.materials.solid_material base.materials.solid_material.density)",
        "program": "step1:(ARGMAX base.materials.solid_material base.materials.solid_material.density)[SEP]"
    },
    {
        "qid": 321000300,
        "question": "which known solid material has the largest density?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sk79",
                "entity_name": "Tungsten"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.materials.solid_material",
                    "class": "base.materials.solid_material",
                    "friendly_name": "Solid Material",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.materials.solid_material.density",
                    "friendly_name": "Density"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.materials.solid_material . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.materials.solid_material . \n?y0 :base.materials.solid_material.density ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.materials.solid_material.density ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.materials.solid_material base.materials.solid_material.density)",
        "program": "step1:(ARGMAX base.materials.solid_material base.materials.solid_material.density)[SEP]"
    },
    {
        "qid": 321000400,
        "question": "which solid material is the heaviest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sk79",
                "entity_name": "Tungsten"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.materials.solid_material",
                    "class": "base.materials.solid_material",
                    "friendly_name": "Solid Material",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.materials.solid_material.density",
                    "friendly_name": "Density"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.materials.solid_material . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.materials.solid_material . \n?y0 :base.materials.solid_material.density ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.materials.solid_material.density ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.materials.solid_material base.materials.solid_material.density)",
        "program": "step1:(ARGMAX base.materials.solid_material base.materials.solid_material.density)[SEP]"
    },
    {
        "qid": 322000000,
        "question": "how many model years does harley-davidson xl1200n have? The linked entity is Harley-Davidson XL1200N (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "Harley-Davidson XL1200N",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000001,
        "question": "how many model years does nightster have? The linked entity is nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000002,
        "question": "how many model years does harley davidson nightster have? The linked entity is harley davidson nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "harley davidson nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000100,
        "question": "in how many years was the harley-davidson xl1200n produced? The linked entity is Harley-Davidson XL1200N (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "Harley-Davidson XL1200N",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000101,
        "question": "in how many years was the nightster produced? The linked entity is nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000102,
        "question": "in how many years was the harley davidson nightster produced? The linked entity is harley davidson nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "harley davidson nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000200,
        "question": "how many model years of harley-davidson xl1200n are released? The linked entity is Harley-Davidson XL1200N (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "Harley-Davidson XL1200N",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000201,
        "question": "how many model years of nightster are released? The linked entity is nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000202,
        "question": "how many model years of harley davidson nightster are released? The linked entity is harley davidson nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "harley davidson nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000300,
        "question": "how many annual editions are there of harley-davidson xl1200n? The linked entity is Harley-Davidson XL1200N (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "Harley-Davidson XL1200N",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000301,
        "question": "how many annual editions are there of nightster? The linked entity is nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000302,
        "question": "how many annual editions are there of harley davidson nightster? The linked entity is harley davidson nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "harley davidson nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000400,
        "question": "how many harley-davidson xl1200n model years are there? The linked entity is Harley-Davidson XL1200N (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "Harley-Davidson XL1200N",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000401,
        "question": "how many nightster model years are there? The linked entity is nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 322000402,
        "question": "how many harley davidson nightster model years are there? The linked entity is harley davidson nightster (m.03hq_72).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "2"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_model_year",
                    "class": "base.motorcycle.motorcycle_model_year",
                    "friendly_name": "Motorcycle model year",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hq_72",
                    "class": "base.motorcycle.motorcycle_series",
                    "friendly_name": "harley davidson nightster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.motorcycle.motorcycle_series.model_year_s",
                    "friendly_name": "Model year(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_model_year . \nVALUES ?x1 { :m.03hq_72 } \n?x1 :base.motorcycle.motorcycle_series.model_year_s ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_model_year (JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)))",
        "program": "step1:(JOIN (R base.motorcycle.motorcycle_series.model_year_s) m.03hq_72)[SEP]step2:(AND base.motorcycle.motorcycle_model_year step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 325000000,
        "question": "which nuclear ship powerplant is the smallest in power?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ck0rk",
                "entity_name": "VM-A reactor"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.nuclear_powerplant",
                    "class": "boats.nuclear_powerplant",
                    "friendly_name": "Nuclear Ship Powerplant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "boats.nuclear_powerplant.power_kw",
                    "friendly_name": "Power (kw)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.nuclear_powerplant . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :boats.nuclear_powerplant . \n?y0 :boats.nuclear_powerplant.power_kw ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :boats.nuclear_powerplant.power_kw ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)",
        "program": "step1:(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)[SEP]"
    },
    {
        "qid": 325000100,
        "question": "what is the least powerful nuclear ship powerplant?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ck0rk",
                "entity_name": "VM-A reactor"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.nuclear_powerplant",
                    "class": "boats.nuclear_powerplant",
                    "friendly_name": "Nuclear Ship Powerplant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "boats.nuclear_powerplant.power_kw",
                    "friendly_name": "Power (kw)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.nuclear_powerplant . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :boats.nuclear_powerplant . \n?y0 :boats.nuclear_powerplant.power_kw ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :boats.nuclear_powerplant.power_kw ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)",
        "program": "step1:(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)[SEP]"
    },
    {
        "qid": 325000200,
        "question": "which type of powerplant in a nuclear ship is the weakest in power?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ck0rk",
                "entity_name": "VM-A reactor"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.nuclear_powerplant",
                    "class": "boats.nuclear_powerplant",
                    "friendly_name": "Nuclear Ship Powerplant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "boats.nuclear_powerplant.power_kw",
                    "friendly_name": "Power (kw)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.nuclear_powerplant . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :boats.nuclear_powerplant . \n?y0 :boats.nuclear_powerplant.power_kw ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :boats.nuclear_powerplant.power_kw ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)",
        "program": "step1:(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)[SEP]"
    },
    {
        "qid": 325000300,
        "question": "which powerplant for nuclear-powered vessels has the smallest power?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ck0rk",
                "entity_name": "VM-A reactor"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.nuclear_powerplant",
                    "class": "boats.nuclear_powerplant",
                    "friendly_name": "Nuclear Ship Powerplant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "boats.nuclear_powerplant.power_kw",
                    "friendly_name": "Power (kw)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.nuclear_powerplant . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :boats.nuclear_powerplant . \n?y0 :boats.nuclear_powerplant.power_kw ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :boats.nuclear_powerplant.power_kw ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)",
        "program": "step1:(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)[SEP]"
    },
    {
        "qid": 325000400,
        "question": "which ship borne nuclear power plant produces the least power?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ck0rk",
                "entity_name": "VM-A reactor"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.nuclear_powerplant",
                    "class": "boats.nuclear_powerplant",
                    "friendly_name": "Nuclear Ship Powerplant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "boats.nuclear_powerplant.power_kw",
                    "friendly_name": "Power (kw)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.nuclear_powerplant . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :boats.nuclear_powerplant . \n?y0 :boats.nuclear_powerplant.power_kw ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :boats.nuclear_powerplant.power_kw ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)",
        "program": "step1:(ARGMIN boats.nuclear_powerplant boats.nuclear_powerplant.power_kw)[SEP]"
    },
    {
        "qid": 326000000,
        "question": "how many different releases of the album get yer ya-ya's out! are there? The linked entity is Get Yer Ya-Ya's Out! (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "Get Yer Ya-Ya's Out!",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000001,
        "question": "how many different releases of the album get yer ya-ya's out are there? The linked entity is get yer ya-ya's out (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "get yer ya-ya's out",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000100,
        "question": "how many reissues of the album get yer ya-ya's out! have been released? The linked entity is Get Yer Ya-Ya's Out! (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "Get Yer Ya-Ya's Out!",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000101,
        "question": "how many reissues of the album get yer ya-ya's out have been released? The linked entity is get yer ya-ya's out (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "get yer ya-ya's out",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000200,
        "question": "how many releases has get yer ya-ya's out! had? The linked entity is Get Yer Ya-Ya's Out! (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "Get Yer Ya-Ya's Out!",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000201,
        "question": "how many releases has get yer ya-ya's out had? The linked entity is get yer ya-ya's out (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "get yer ya-ya's out",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000300,
        "question": "how many different releases does get yer ya-ya's out! have? The linked entity is Get Yer Ya-Ya's Out! (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "Get Yer Ya-Ya's Out!",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000301,
        "question": "how many different releases does get yer ya-ya's out have? The linked entity is get yer ya-ya's out (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "get yer ya-ya's out",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000400,
        "question": "how many times was get yer ya-ya's out! released in album form? The linked entity is Get Yer Ya-Ya's Out! (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "Get Yer Ya-Ya's Out!",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000401,
        "question": "how many times was get yer ya-ya's out released in album form? The linked entity is get yer ya-ya's out (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "get yer ya-ya's out",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000500,
        "question": "how many times has the album get yer ya-ya's out! been released? The linked entity is Get Yer Ya-Ya's Out! (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "Get Yer Ya-Ya's Out!",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 326000501,
        "question": "how many times has the album get yer ya-ya's out been released? The linked entity is get yer ya-ya's out (m.01hmywl).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "11"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01hmywl",
                    "class": "music.live_album",
                    "friendly_name": "get yer ya-ya's out",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.album.releases",
                    "friendly_name": "Releases"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.01hmywl } \n?x1 :music.album.releases ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND music.release (JOIN (R music.album.releases) m.01hmywl)))",
        "program": "step1:(JOIN (R music.album.releases) m.01hmywl)[SEP]step2:(AND music.release step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000000,
        "question": "how many motorcycle makes is honda motor company, ltd making? The linked entity is Honda Motor Company, Ltd (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "Honda Motor Company, Ltd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000001,
        "question": "how many motorcycle makes is honda making? The linked entity is honda (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000002,
        "question": "how many motorcycle makes is honda motor co., ltd. making? The linked entity is honda motor co., ltd. (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda motor co., ltd.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000100,
        "question": "how many kinds of motorcycles are made by honda motor company, ltd? The linked entity is Honda Motor Company, Ltd (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "Honda Motor Company, Ltd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000101,
        "question": "how many kinds of motorcycles are made by honda? The linked entity is honda (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000102,
        "question": "how many kinds of motorcycles are made by honda motor co., ltd.? The linked entity is honda motor co., ltd. (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda motor co., ltd.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000200,
        "question": "how many different models of motorcycles are available from honda motor company, ltd? The linked entity is Honda Motor Company, Ltd (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "Honda Motor Company, Ltd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000201,
        "question": "how many different models of motorcycles are available from honda? The linked entity is honda (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000202,
        "question": "how many different models of motorcycles are available from honda motor co., ltd.? The linked entity is honda motor co., ltd. (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda motor co., ltd.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000300,
        "question": "how many kinds of motorcycle does honda motor company, ltd make? The linked entity is Honda Motor Company, Ltd (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "Honda Motor Company, Ltd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000301,
        "question": "how many kinds of motorcycle does honda make? The linked entity is honda (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 327000302,
        "question": "how many kinds of motorcycle does honda motor co., ltd. make? The linked entity is honda motor co., ltd. (m.03kr0).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.motorcycle.motorcycle_make",
                    "class": "base.motorcycle.motorcycle_make",
                    "friendly_name": "Motorcycle make",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03kr0",
                    "class": "base.motorcycle.motorcycle_manufacturer",
                    "friendly_name": "honda motor co., ltd.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.motorcycle.motorcycle_make.manufacturer",
                    "friendly_name": "Manufacturer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.motorcycle.motorcycle_make . \nVALUES ?x1 { :m.03kr0 } \n?x0 :base.motorcycle.motorcycle_make.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(COUNT (AND base.motorcycle.motorcycle_make (JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)))",
        "program": "step1:(JOIN base.motorcycle.motorcycle_make.manufacturer m.03kr0)[SEP]step2:(AND base.motorcycle.motorcycle_make step1)[SEP]step3:(COUNT step2)[SEP]"
    },
    {
        "qid": 328000000,
        "question": "what is the smallest spanish autonomous city?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.052lf",
                "entity_name": "Melilla"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.es_autonomous_city",
                    "class": "location.es_autonomous_city",
                    "friendly_name": "Spanish autonomous city",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "location.location.area",
                    "friendly_name": "Area"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.es_autonomous_city . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :location.es_autonomous_city . \n?y0 :location.location.area ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :location.location.area ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN location.es_autonomous_city location.location.area)",
        "program": "step1:(ARGMIN location.es_autonomous_city location.location.area)[SEP]"
    },
    {
        "qid": 328000100,
        "question": "which autonomous city in span is the smallest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.052lf",
                "entity_name": "Melilla"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.es_autonomous_city",
                    "class": "location.es_autonomous_city",
                    "friendly_name": "Spanish autonomous city",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "location.location.area",
                    "friendly_name": "Area"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.es_autonomous_city . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :location.es_autonomous_city . \n?y0 :location.location.area ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :location.location.area ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN location.es_autonomous_city location.location.area)",
        "program": "step1:(ARGMIN location.es_autonomous_city location.location.area)[SEP]"
    },
    {
        "qid": 328000200,
        "question": "find the smallest autonomous city of spain.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.052lf",
                "entity_name": "Melilla"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.es_autonomous_city",
                    "class": "location.es_autonomous_city",
                    "friendly_name": "Spanish autonomous city",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "location.location.area",
                    "friendly_name": "Area"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.es_autonomous_city . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :location.es_autonomous_city . \n?y0 :location.location.area ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :location.location.area ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN location.es_autonomous_city location.location.area)",
        "program": "step1:(ARGMIN location.es_autonomous_city location.location.area)[SEP]"
    },
    {
        "qid": 328000300,
        "question": "which city is the smallest autonomous city of spain?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.052lf",
                "entity_name": "Melilla"
            }
        ],
        "function": "argmin",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.es_autonomous_city",
                    "class": "location.es_autonomous_city",
                    "friendly_name": "Spanish autonomous city",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "location.location.area",
                    "friendly_name": "Area"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.es_autonomous_city . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :location.es_autonomous_city . \n?y0 :location.location.area ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :location.location.area ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMIN location.es_autonomous_city location.location.area)",
        "program": "step1:(ARGMIN location.es_autonomous_city location.location.area)[SEP]"
    },
    {
        "qid": 331000000,
        "question": "what object is the brightest in the sky?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cg4fz",
                "entity_name": "4U 0142+61"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.celestial_object",
                    "class": "astronomy.celestial_object",
                    "friendly_name": "Celestial Object",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.magnitude",
                    "friendly_name": "Apparent Magnitude"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.celestial_object . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.celestial_object . \n?y0 :astronomy.celestial_object.magnitude ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.celestial_object.magnitude ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)",
        "program": "step1:(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)[SEP]"
    },
    {
        "qid": 331000100,
        "question": "what is the brightest star, nebula, or planet in the known universe?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cg4fz",
                "entity_name": "4U 0142+61"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.celestial_object",
                    "class": "astronomy.celestial_object",
                    "friendly_name": "Celestial Object",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.magnitude",
                    "friendly_name": "Apparent Magnitude"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.celestial_object . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.celestial_object . \n?y0 :astronomy.celestial_object.magnitude ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.celestial_object.magnitude ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)",
        "program": "step1:(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)[SEP]"
    },
    {
        "qid": 331000200,
        "question": "which celestial object has the largest apparent magnitude?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cg4fz",
                "entity_name": "4U 0142+61"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.celestial_object",
                    "class": "astronomy.celestial_object",
                    "friendly_name": "Celestial Object",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.magnitude",
                    "friendly_name": "Apparent Magnitude"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.celestial_object . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.celestial_object . \n?y0 :astronomy.celestial_object.magnitude ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.celestial_object.magnitude ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)",
        "program": "step1:(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)[SEP]"
    },
    {
        "qid": 331000300,
        "question": "what is the name for the brightest celestial object in the universe?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cg4fz",
                "entity_name": "4U 0142+61"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.celestial_object",
                    "class": "astronomy.celestial_object",
                    "friendly_name": "Celestial Object",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.magnitude",
                    "friendly_name": "Apparent Magnitude"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.celestial_object . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.celestial_object . \n?y0 :astronomy.celestial_object.magnitude ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.celestial_object.magnitude ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)",
        "program": "step1:(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)[SEP]"
    },
    {
        "qid": 331000400,
        "question": "which celestial object is the brightest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cg4fz",
                "entity_name": "4U 0142+61"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.celestial_object",
                    "class": "astronomy.celestial_object",
                    "friendly_name": "Celestial Object",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.magnitude",
                    "friendly_name": "Apparent Magnitude"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.celestial_object . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.celestial_object . \n?y0 :astronomy.celestial_object.magnitude ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.celestial_object.magnitude ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)",
        "program": "step1:(ARGMAX astronomy.celestial_object astronomy.celestial_object.magnitude)[SEP]"
    },
    {
        "qid": 336000000,
        "question": "who is in the egypt tomb kv62? The linked entity is KV62 (m.01qg6m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07hcc",
                "entity_name": "Tutankhamun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ancientegypt.tomb_owner",
                    "class": "base.ancientegypt.tomb_owner",
                    "friendly_name": "Tomb owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qg6m",
                    "class": "base.ancientegypt.tomb",
                    "friendly_name": "KV62",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ancientegypt.tomb_owner.tomb_owned",
                    "friendly_name": "Tomb owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ancientegypt.tomb_owner . \nVALUES ?x1 { :m.01qg6m } \n?x0 :base.ancientegypt.tomb_owner.tomb_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ancientegypt.tomb_owner (JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m))",
        "program": "step1:(JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m)[SEP]step2:(AND base.ancientegypt.tomb_owner step1)[SEP]"
    },
    {
        "qid": 336000100,
        "question": "who's body is located inside the egyptian tomb kv62? The linked entity is KV62 (m.01qg6m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07hcc",
                "entity_name": "Tutankhamun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ancientegypt.tomb_owner",
                    "class": "base.ancientegypt.tomb_owner",
                    "friendly_name": "Tomb owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qg6m",
                    "class": "base.ancientegypt.tomb",
                    "friendly_name": "KV62",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ancientegypt.tomb_owner.tomb_owned",
                    "friendly_name": "Tomb owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ancientegypt.tomb_owner . \nVALUES ?x1 { :m.01qg6m } \n?x0 :base.ancientegypt.tomb_owner.tomb_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ancientegypt.tomb_owner (JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m))",
        "program": "step1:(JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m)[SEP]step2:(AND base.ancientegypt.tomb_owner step1)[SEP]"
    },
    {
        "qid": 336000200,
        "question": "who is interred in egyptian tomb kv62? The linked entity is KV62 (m.01qg6m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07hcc",
                "entity_name": "Tutankhamun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ancientegypt.tomb_owner",
                    "class": "base.ancientegypt.tomb_owner",
                    "friendly_name": "Tomb owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qg6m",
                    "class": "base.ancientegypt.tomb",
                    "friendly_name": "KV62",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ancientegypt.tomb_owner.tomb_owned",
                    "friendly_name": "Tomb owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ancientegypt.tomb_owner . \nVALUES ?x1 { :m.01qg6m } \n?x0 :base.ancientegypt.tomb_owner.tomb_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ancientegypt.tomb_owner (JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m))",
        "program": "step1:(JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m)[SEP]step2:(AND base.ancientegypt.tomb_owner step1)[SEP]"
    },
    {
        "qid": 336000300,
        "question": "who owned the tomb kv62? The linked entity is KV62 (m.01qg6m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07hcc",
                "entity_name": "Tutankhamun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ancientegypt.tomb_owner",
                    "class": "base.ancientegypt.tomb_owner",
                    "friendly_name": "Tomb owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qg6m",
                    "class": "base.ancientegypt.tomb",
                    "friendly_name": "KV62",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ancientegypt.tomb_owner.tomb_owned",
                    "friendly_name": "Tomb owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ancientegypt.tomb_owner . \nVALUES ?x1 { :m.01qg6m } \n?x0 :base.ancientegypt.tomb_owner.tomb_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ancientegypt.tomb_owner (JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m))",
        "program": "step1:(JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m)[SEP]step2:(AND base.ancientegypt.tomb_owner step1)[SEP]"
    },
    {
        "qid": 336000400,
        "question": "the tomb kv62 in egypt holds whose remains? The linked entity is KV62 (m.01qg6m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07hcc",
                "entity_name": "Tutankhamun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ancientegypt.tomb_owner",
                    "class": "base.ancientegypt.tomb_owner",
                    "friendly_name": "Tomb owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qg6m",
                    "class": "base.ancientegypt.tomb",
                    "friendly_name": "KV62",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ancientegypt.tomb_owner.tomb_owned",
                    "friendly_name": "Tomb owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ancientegypt.tomb_owner . \nVALUES ?x1 { :m.01qg6m } \n?x0 :base.ancientegypt.tomb_owner.tomb_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ancientegypt.tomb_owner (JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m))",
        "program": "step1:(JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m)[SEP]step2:(AND base.ancientegypt.tomb_owner step1)[SEP]"
    },
    {
        "qid": 336000500,
        "question": "the tomb kv62 in egypt holds which egyptian king's remains? The linked entity is KV62 (m.01qg6m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07hcc",
                "entity_name": "Tutankhamun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ancientegypt.tomb_owner",
                    "class": "base.ancientegypt.tomb_owner",
                    "friendly_name": "Tomb owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qg6m",
                    "class": "base.ancientegypt.tomb",
                    "friendly_name": "KV62",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ancientegypt.tomb_owner.tomb_owned",
                    "friendly_name": "Tomb owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ancientegypt.tomb_owner . \nVALUES ?x1 { :m.01qg6m } \n?x0 :base.ancientegypt.tomb_owner.tomb_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ancientegypt.tomb_owner (JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m))",
        "program": "step1:(JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m)[SEP]step2:(AND base.ancientegypt.tomb_owner step1)[SEP]"
    },
    {
        "qid": 336000600,
        "question": "who is buried in the tomb kv62 in egypt? The linked entity is KV62 (m.01qg6m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07hcc",
                "entity_name": "Tutankhamun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ancientegypt.tomb_owner",
                    "class": "base.ancientegypt.tomb_owner",
                    "friendly_name": "Tomb owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01qg6m",
                    "class": "base.ancientegypt.tomb",
                    "friendly_name": "KV62",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ancientegypt.tomb_owner.tomb_owned",
                    "friendly_name": "Tomb owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ancientegypt.tomb_owner . \nVALUES ?x1 { :m.01qg6m } \n?x0 :base.ancientegypt.tomb_owner.tomb_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.ancientegypt.tomb_owner (JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m))",
        "program": "step1:(JOIN base.ancientegypt.tomb_owner.tomb_owned m.01qg6m)[SEP]step2:(AND base.ancientegypt.tomb_owner step1)[SEP]"
    },
    {
        "qid": 338000000,
        "question": "who is the bottler for the old crow whiskey? The linked entity is Old Crow (m.03ntz9).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wps6",
                "entity_name": "Fortune Brands"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_bottler",
                    "class": "distilled_spirits.spirit_bottler",
                    "friendly_name": "Spirit bottler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03ntz9",
                    "class": "distilled_spirits.distilled_spirit",
                    "friendly_name": "Old Crow",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.distilled_spirit.bottler",
                    "friendly_name": "Bottler"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_bottler . \nVALUES ?x1 { :m.03ntz9 } \n?x1 :distilled_spirits.distilled_spirit.bottler ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_bottler (JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9))",
        "program": "step1:(JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9)[SEP]step2:(AND distilled_spirits.spirit_bottler step1)[SEP]"
    },
    {
        "qid": 338000100,
        "question": "what company makes the old crow bottles? The linked entity is Old Crow (m.03ntz9).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wps6",
                "entity_name": "Fortune Brands"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_bottler",
                    "class": "distilled_spirits.spirit_bottler",
                    "friendly_name": "Spirit bottler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03ntz9",
                    "class": "distilled_spirits.distilled_spirit",
                    "friendly_name": "Old Crow",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.distilled_spirit.bottler",
                    "friendly_name": "Bottler"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_bottler . \nVALUES ?x1 { :m.03ntz9 } \n?x1 :distilled_spirits.distilled_spirit.bottler ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_bottler (JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9))",
        "program": "step1:(JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9)[SEP]step2:(AND distilled_spirits.spirit_bottler step1)[SEP]"
    },
    {
        "qid": 338000200,
        "question": "who makes bottles for old crow? The linked entity is Old Crow (m.03ntz9).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wps6",
                "entity_name": "Fortune Brands"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_bottler",
                    "class": "distilled_spirits.spirit_bottler",
                    "friendly_name": "Spirit bottler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03ntz9",
                    "class": "distilled_spirits.distilled_spirit",
                    "friendly_name": "Old Crow",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.distilled_spirit.bottler",
                    "friendly_name": "Bottler"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_bottler . \nVALUES ?x1 { :m.03ntz9 } \n?x1 :distilled_spirits.distilled_spirit.bottler ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_bottler (JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9))",
        "program": "step1:(JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9)[SEP]step2:(AND distilled_spirits.spirit_bottler step1)[SEP]"
    },
    {
        "qid": 338000300,
        "question": "who manufactures old crow's bottles? The linked entity is Old Crow (m.03ntz9).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wps6",
                "entity_name": "Fortune Brands"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_bottler",
                    "class": "distilled_spirits.spirit_bottler",
                    "friendly_name": "Spirit bottler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03ntz9",
                    "class": "distilled_spirits.distilled_spirit",
                    "friendly_name": "Old Crow",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.distilled_spirit.bottler",
                    "friendly_name": "Bottler"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_bottler . \nVALUES ?x1 { :m.03ntz9 } \n?x1 :distilled_spirits.distilled_spirit.bottler ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_bottler (JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9))",
        "program": "step1:(JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9)[SEP]step2:(AND distilled_spirits.spirit_bottler step1)[SEP]"
    },
    {
        "qid": 338000400,
        "question": "what's the bottling company for old crow? The linked entity is Old Crow (m.03ntz9).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wps6",
                "entity_name": "Fortune Brands"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_bottler",
                    "class": "distilled_spirits.spirit_bottler",
                    "friendly_name": "Spirit bottler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03ntz9",
                    "class": "distilled_spirits.distilled_spirit",
                    "friendly_name": "Old Crow",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.distilled_spirit.bottler",
                    "friendly_name": "Bottler"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_bottler . \nVALUES ?x1 { :m.03ntz9 } \n?x1 :distilled_spirits.distilled_spirit.bottler ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_bottler (JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9))",
        "program": "step1:(JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9)[SEP]step2:(AND distilled_spirits.spirit_bottler step1)[SEP]"
    },
    {
        "qid": 338000500,
        "question": "what is the name of the manufacturer of old crow bottles? The linked entity is Old Crow (m.03ntz9).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wps6",
                "entity_name": "Fortune Brands"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_bottler",
                    "class": "distilled_spirits.spirit_bottler",
                    "friendly_name": "Spirit bottler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03ntz9",
                    "class": "distilled_spirits.distilled_spirit",
                    "friendly_name": "Old Crow",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.distilled_spirit.bottler",
                    "friendly_name": "Bottler"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_bottler . \nVALUES ?x1 { :m.03ntz9 } \n?x1 :distilled_spirits.distilled_spirit.bottler ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_bottler (JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9))",
        "program": "step1:(JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9)[SEP]step2:(AND distilled_spirits.spirit_bottler step1)[SEP]"
    },
    {
        "qid": 338000600,
        "question": "which bottler creates bottles for old crow whiskey? The linked entity is Old Crow (m.03ntz9).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wps6",
                "entity_name": "Fortune Brands"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_bottler",
                    "class": "distilled_spirits.spirit_bottler",
                    "friendly_name": "Spirit bottler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03ntz9",
                    "class": "distilled_spirits.distilled_spirit",
                    "friendly_name": "Old Crow",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.distilled_spirit.bottler",
                    "friendly_name": "Bottler"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_bottler . \nVALUES ?x1 { :m.03ntz9 } \n?x1 :distilled_spirits.distilled_spirit.bottler ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_bottler (JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9))",
        "program": "step1:(JOIN (R distilled_spirits.distilled_spirit.bottler) m.03ntz9)[SEP]step2:(AND distilled_spirits.spirit_bottler step1)[SEP]"
    },
    {
        "qid": 340000000,
        "question": "what breeds of cat are there? The linked entity is Cat (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "Cat",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000001,
        "question": "what breeds of cats are there? The linked entity is cats (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "cats",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000100,
        "question": "what are all the cat breeds in existence? The linked entity is Cat (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "Cat",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000101,
        "question": "what are all the cats breeds in existence? The linked entity is cats (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "cats",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000200,
        "question": "enumerate all the breeds of cat. The linked entity is Cat (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "Cat",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000201,
        "question": "enumerate all the breeds of cats. The linked entity is cats (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "cats",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000300,
        "question": "what are all of the different types of cat breeds? The linked entity is Cat (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "Cat",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000301,
        "question": "what are all of the different types of cats breeds? The linked entity is cats (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "cats",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000400,
        "question": "name all cat breeds. The linked entity is Cat (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "Cat",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 340000401,
        "question": "name all cats breeds. The linked entity is cats (m.01yrx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132wl",
                "entity_name": "Japanese Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ttd9",
                "entity_name": "Pixie-bob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fr0",
                "entity_name": "Balinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09747c",
                "entity_name": "Abyssinian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60_",
                "entity_name": "American Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012cc2",
                "entity_name": "Russian Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k5z",
                "entity_name": "Munchkin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012k6q",
                "entity_name": "Ocicat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lnv",
                "entity_name": "Himalayan cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012lr2",
                "entity_name": "Devon Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012ltm",
                "entity_name": "Birman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012zzh",
                "entity_name": "Somali cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132vv",
                "entity_name": "American Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fsk",
                "entity_name": "Norwegian Forest cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mvkt",
                "entity_name": "Burmese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rn4d",
                "entity_name": "Korat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027rfv_",
                "entity_name": "Cheetoh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzz",
                "entity_name": "Havana Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wt_k",
                "entity_name": "California Spangled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zg0m",
                "entity_name": "Chartreux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zh3c",
                "entity_name": "Javanese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkd7",
                "entity_name": "Singapura cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx2rr",
                "entity_name": "Donskoy cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_kl",
                "entity_name": "Snowshoe cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_ndy",
                "entity_name": "Aegean cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04049n",
                "entity_name": "Sokoke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt7yc",
                "entity_name": "Exotic Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82m",
                "entity_name": "Japanese Bobtail Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82s",
                "entity_name": "Munchkin Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt837",
                "entity_name": "Shorthair Curl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83w",
                "entity_name": "Minskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068m4y",
                "entity_name": "Savannah cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07451s",
                "entity_name": "American Wirehair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nnhk",
                "entity_name": "Oriental Longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081lg8",
                "entity_name": "Peterbald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b02s",
                "entity_name": "British Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nhst",
                "entity_name": "Ragamuffin cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cb37",
                "entity_name": "British Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpc0v",
                "entity_name": "German Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jc3n",
                "entity_name": "Exotic Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkf9",
                "entity_name": "Turkish Angora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jg5",
                "entity_name": "Manx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jgm",
                "entity_name": "Cymric cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012jh9",
                "entity_name": "Scottish Fold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017fv0",
                "entity_name": "Nebelung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0229mb",
                "entity_name": "Egyptian Mau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4ff",
                "entity_name": "Tonkinese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfy2",
                "entity_name": "Bombay cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zjz9",
                "entity_name": "Oriental Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zkbf",
                "entity_name": "Siberian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_27x",
                "entity_name": "Chausie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043lfs6",
                "entity_name": "Ukrainian Levkoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dpf",
                "entity_name": "Ojos Azules"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c41_",
                "entity_name": "European Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt82y",
                "entity_name": "Munchkin Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt832",
                "entity_name": "Ruffle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04myxc",
                "entity_name": "Burmilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q5v1v",
                "entity_name": "Kurilian Bobtail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086tnk",
                "entity_name": "Serengeti cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0891tx",
                "entity_name": "Toyger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.089hrx",
                "entity_name": "Ussuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b5_s",
                "entity_name": "Asian Semi-longhair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djkp8",
                "entity_name": "LaPerm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_3r",
                "entity_name": "Siamese cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gzxy",
                "entity_name": "Bengal cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4sv",
                "entity_name": "Selkirk Rex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h5fb",
                "entity_name": "Sphynx cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j45k",
                "entity_name": "Turkish Van"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j46v",
                "entity_name": "Persian cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j60j",
                "entity_name": "Maine Coon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kt83d",
                "entity_name": "European Burmese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02zfvv",
                "entity_name": "American Shorthair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w7c7",
                "entity_name": "Ragdoll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h05_",
                "entity_name": "Cornish Rex"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.cat_breed",
                    "class": "base.petbreeds.cat_breed",
                    "friendly_name": "Cat Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01yrx",
                    "class": "biology.domesticated_animal",
                    "friendly_name": "cats",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.domesticated_animal.breeds",
                    "friendly_name": "Breeds"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.cat_breed . \nVALUES ?x1 { :m.01yrx } \n?x1 :biology.domesticated_animal.breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.cat_breed (JOIN (R biology.domesticated_animal.breeds) m.01yrx))",
        "program": "step1:(JOIN (R biology.domesticated_animal.breeds) m.01yrx)[SEP]step2:(AND base.petbreeds.cat_breed step1)[SEP]"
    },
    {
        "qid": 342000000,
        "question": "where did the conviction of thomas fyshe palmer occur? The linked entity is Thomas Fyshe Palmer (m.06ztcqr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g133",
                "entity_name": "Perth"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.dated_location",
                    "class": "location.dated_location",
                    "friendly_name": "Dated location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06ztcqr",
                    "class": "base.convictsydney.convict",
                    "friendly_name": "Thomas Fyshe Palmer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.convictsydney.convict.place_of_conviction",
                    "friendly_name": "Place of conviction"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.dated_location . \nVALUES ?x1 { :m.06ztcqr } \n?x1 :base.convictsydney.convict.place_of_conviction ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.dated_location (JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr))",
        "program": "step1:(JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr)[SEP]step2:(AND location.dated_location step1)[SEP]"
    },
    {
        "qid": 342000100,
        "question": "what was the site of thomas fyshe palmer's conviction? The linked entity is Thomas Fyshe Palmer (m.06ztcqr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g133",
                "entity_name": "Perth"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.dated_location",
                    "class": "location.dated_location",
                    "friendly_name": "Dated location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06ztcqr",
                    "class": "base.convictsydney.convict",
                    "friendly_name": "Thomas Fyshe Palmer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.convictsydney.convict.place_of_conviction",
                    "friendly_name": "Place of conviction"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.dated_location . \nVALUES ?x1 { :m.06ztcqr } \n?x1 :base.convictsydney.convict.place_of_conviction ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.dated_location (JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr))",
        "program": "step1:(JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr)[SEP]step2:(AND location.dated_location step1)[SEP]"
    },
    {
        "qid": 342000200,
        "question": "where was thomas fyshe palmer convicted? The linked entity is Thomas Fyshe Palmer (m.06ztcqr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g133",
                "entity_name": "Perth"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.dated_location",
                    "class": "location.dated_location",
                    "friendly_name": "Dated location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06ztcqr",
                    "class": "base.convictsydney.convict",
                    "friendly_name": "Thomas Fyshe Palmer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.convictsydney.convict.place_of_conviction",
                    "friendly_name": "Place of conviction"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.dated_location . \nVALUES ?x1 { :m.06ztcqr } \n?x1 :base.convictsydney.convict.place_of_conviction ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.dated_location (JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr))",
        "program": "step1:(JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr)[SEP]step2:(AND location.dated_location step1)[SEP]"
    },
    {
        "qid": 342000300,
        "question": "in which city was thomas fyshe palmer convicted? The linked entity is Thomas Fyshe Palmer (m.06ztcqr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g133",
                "entity_name": "Perth"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.dated_location",
                    "class": "location.dated_location",
                    "friendly_name": "Dated location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06ztcqr",
                    "class": "base.convictsydney.convict",
                    "friendly_name": "Thomas Fyshe Palmer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.convictsydney.convict.place_of_conviction",
                    "friendly_name": "Place of conviction"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.dated_location . \nVALUES ?x1 { :m.06ztcqr } \n?x1 :base.convictsydney.convict.place_of_conviction ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.dated_location (JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr))",
        "program": "step1:(JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr)[SEP]step2:(AND location.dated_location step1)[SEP]"
    },
    {
        "qid": 342000400,
        "question": "what's the place of conviction of thomas fyshe palmer? The linked entity is Thomas Fyshe Palmer (m.06ztcqr).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g133",
                "entity_name": "Perth"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.dated_location",
                    "class": "location.dated_location",
                    "friendly_name": "Dated location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06ztcqr",
                    "class": "base.convictsydney.convict",
                    "friendly_name": "Thomas Fyshe Palmer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.convictsydney.convict.place_of_conviction",
                    "friendly_name": "Place of conviction"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.dated_location . \nVALUES ?x1 { :m.06ztcqr } \n?x1 :base.convictsydney.convict.place_of_conviction ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.dated_location (JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr))",
        "program": "step1:(JOIN (R base.convictsydney.convict.place_of_conviction) m.06ztcqr)[SEP]step2:(AND location.dated_location step1)[SEP]"
    },
    {
        "qid": 343000000,
        "question": "what kind of album is kind of blue? The linked entity is Kind of Blue (m.01bwdt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02lx2r",
                "entity_name": "Album"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.album_release_type",
                    "class": "music.album_release_type",
                    "friendly_name": "Musical Album Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01bwdt",
                    "class": "base.coltrane.jazz_album",
                    "friendly_name": "Kind of Blue",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album_release_type.albums",
                    "friendly_name": "Albums"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album_release_type . \nVALUES ?x1 { :m.01bwdt } \n?x0 :music.album_release_type.albums ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.album_release_type (JOIN music.album_release_type.albums m.01bwdt))",
        "program": "step1:(JOIN music.album_release_type.albums m.01bwdt)[SEP]step2:(AND music.album_release_type step1)[SEP]"
    },
    {
        "qid": 343000100,
        "question": "what is the musical album type of kind of blue? The linked entity is Kind of Blue (m.01bwdt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02lx2r",
                "entity_name": "Album"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.album_release_type",
                    "class": "music.album_release_type",
                    "friendly_name": "Musical Album Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01bwdt",
                    "class": "base.coltrane.jazz_album",
                    "friendly_name": "Kind of Blue",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album_release_type.albums",
                    "friendly_name": "Albums"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album_release_type . \nVALUES ?x1 { :m.01bwdt } \n?x0 :music.album_release_type.albums ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.album_release_type (JOIN music.album_release_type.albums m.01bwdt))",
        "program": "step1:(JOIN music.album_release_type.albums m.01bwdt)[SEP]step2:(AND music.album_release_type step1)[SEP]"
    },
    {
        "qid": 343000200,
        "question": "what's the classification of kind of blue? The linked entity is Kind of Blue (m.01bwdt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02lx2r",
                "entity_name": "Album"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.album_release_type",
                    "class": "music.album_release_type",
                    "friendly_name": "Musical Album Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01bwdt",
                    "class": "base.coltrane.jazz_album",
                    "friendly_name": "Kind of Blue",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album_release_type.albums",
                    "friendly_name": "Albums"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album_release_type . \nVALUES ?x1 { :m.01bwdt } \n?x0 :music.album_release_type.albums ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.album_release_type (JOIN music.album_release_type.albums m.01bwdt))",
        "program": "step1:(JOIN music.album_release_type.albums m.01bwdt)[SEP]step2:(AND music.album_release_type step1)[SEP]"
    },
    {
        "qid": 343000300,
        "question": "how would you categorize the album kind of blue? The linked entity is Kind of Blue (m.01bwdt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02lx2r",
                "entity_name": "Album"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.album_release_type",
                    "class": "music.album_release_type",
                    "friendly_name": "Musical Album Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01bwdt",
                    "class": "base.coltrane.jazz_album",
                    "friendly_name": "Kind of Blue",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album_release_type.albums",
                    "friendly_name": "Albums"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album_release_type . \nVALUES ?x1 { :m.01bwdt } \n?x0 :music.album_release_type.albums ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.album_release_type (JOIN music.album_release_type.albums m.01bwdt))",
        "program": "step1:(JOIN music.album_release_type.albums m.01bwdt)[SEP]step2:(AND music.album_release_type step1)[SEP]"
    },
    {
        "qid": 344000000,
        "question": "which services are utilizing the berkeley open infrastructure for network computing? The linked entity is Berkeley Open Infrastructure for Network Computing (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "Berkeley Open Infrastructure for Network Computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 344000001,
        "question": "which services are utilizing the boinc? The linked entity is boinc (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "boinc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 344000100,
        "question": "berkeley open infrastructure for network computing is employed by which services? The linked entity is Berkeley Open Infrastructure for Network Computing (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "Berkeley Open Infrastructure for Network Computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 344000101,
        "question": "boinc is employed by which services? The linked entity is boinc (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "boinc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 344000200,
        "question": "what services are using the berkeley open infrastructure for network computing? The linked entity is Berkeley Open Infrastructure for Network Computing (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "Berkeley Open Infrastructure for Network Computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 344000201,
        "question": "what services are using the boinc? The linked entity is boinc (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "boinc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 344000300,
        "question": "the berkeley open infrastructure for network computing has been used in which services? The linked entity is Berkeley Open Infrastructure for Network Computing (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "Berkeley Open Infrastructure for Network Computing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 344000301,
        "question": "the boinc has been used in which services? The linked entity is boinc (m.01ytby).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyw2m8",
                "entity_name": "Charity Engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svpj5b",
                "entity_name": "GridRepublic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dnrw",
                "entity_name": "World Community Grid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.centreforeresearch.service",
                    "class": "base.centreforeresearch.service",
                    "friendly_name": "Service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ytby",
                    "class": "base.centreforeresearch.software_technology",
                    "friendly_name": "boinc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.centreforeresearch.software_technology.used_in_service",
                    "friendly_name": "Used in Service"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.centreforeresearch.service . \nVALUES ?x1 { :m.01ytby } \n?x1 :base.centreforeresearch.software_technology.used_in_service ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.centreforeresearch.service (JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby))",
        "program": "step1:(JOIN (R base.centreforeresearch.software_technology.used_in_service) m.01ytby)[SEP]step2:(AND base.centreforeresearch.service step1)[SEP]"
    },
    {
        "qid": 345000000,
        "question": "who wrote guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000001,
        "question": "who wrote guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000002,
        "question": "who wrote guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000100,
        "question": "who the credit for developing the game guitar hero iii: legends of rock goes to? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000101,
        "question": "who the credit for developing the game guitar hero iii goes to? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000102,
        "question": "who the credit for developing the game guitar hero 3 goes to? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000200,
        "question": "who are developers of guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000201,
        "question": "who are developers of guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000202,
        "question": "who are developers of guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000300,
        "question": "who developed the game guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000301,
        "question": "who developed the game guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 345000302,
        "question": "who developed the game guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.035tl3",
                "entity_name": "Neversoft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067p42",
                "entity_name": "RedOctane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051pnv",
                "entity_name": "Aspyr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v9mr",
                "entity_name": "Vicarious Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_nb4",
                "entity_name": "Budcat Creations"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.developer",
                    "friendly_name": "Developer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.025vn5m } \n?x1 :cvg.computer_videogame.developer ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.cvg_developer (JOIN (R cvg.computer_videogame.developer) m.025vn5m))",
        "program": "step1:(JOIN (R cvg.computer_videogame.developer) m.025vn5m)[SEP]step2:(AND cvg.cvg_developer step1)[SEP]"
    },
    {
        "qid": 348000000,
        "question": "which paintings are discovered in lascaux? The linked entity is Lascaux (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "Lascaux",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000001,
        "question": "which paintings are discovered in lascaux cave? The linked entity is lascaux cave (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux cave",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000002,
        "question": "which paintings are discovered in lascaux caves? The linked entity is lascaux caves (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux caves",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000100,
        "question": "look for paintings in lascaux. The linked entity is Lascaux (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "Lascaux",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000101,
        "question": "look for paintings in lascaux cave. The linked entity is lascaux cave (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux cave",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000102,
        "question": "look for paintings in lascaux caves. The linked entity is lascaux caves (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux caves",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000200,
        "question": "what paintings are there in lascaux? The linked entity is Lascaux (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "Lascaux",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000201,
        "question": "what paintings are there in lascaux cave? The linked entity is lascaux cave (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux cave",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000202,
        "question": "what paintings are there in lascaux caves? The linked entity is lascaux caves (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux caves",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000300,
        "question": "find paintings from lascaux. The linked entity is Lascaux (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "Lascaux",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000301,
        "question": "find paintings from lascaux cave. The linked entity is lascaux cave (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux cave",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000302,
        "question": "find paintings from lascaux caves. The linked entity is lascaux caves (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux caves",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000400,
        "question": "which paintings were found in lascaux? The linked entity is Lascaux (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "Lascaux",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000401,
        "question": "which paintings were found in lascaux cave? The linked entity is lascaux cave (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux cave",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 348000402,
        "question": "which paintings were found in lascaux caves? The linked entity is lascaux caves (m.04q6t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35w0",
                "entity_name": "Great Black Bull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy3d5d",
                "entity_name": "Red Horse Black Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7pzh",
                "entity_name": "The Scene of the Dead Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy35d0",
                "entity_name": "Red Cow and First Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy43_s",
                "entity_name": "The Red Chinese Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbbf",
                "entity_name": "Swimming Deer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbcy",
                "entity_name": "Lascaux Bison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbf9",
                "entity_name": "The Two Chinese Horses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbkn",
                "entity_name": "Lascaux Antlered Stage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbl_",
                "entity_name": "The Great Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbnh",
                "entity_name": "The Hall of Bulls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbqc",
                "entity_name": "Falling Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbrs",
                "entity_name": "Fleeing Horse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbt3",
                "entity_name": "The Unicorn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbvf",
                "entity_name": "The Chipped Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybbz5",
                "entity_name": "Falling Cow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gybc0n",
                "entity_name": "Star Eyed Auroch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyn0np",
                "entity_name": "Lascaux Hunting Scene"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.caveart.painting",
                    "class": "base.caveart.painting",
                    "friendly_name": "Cave Painting",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04q6t",
                    "class": "base.caveart.cave",
                    "friendly_name": "lascaux caves",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.caveart.cave.paintings",
                    "friendly_name": "Paintings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.caveart.painting . \nVALUES ?x1 { :m.04q6t } \n?x1 :base.caveart.cave.paintings ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.caveart.painting (JOIN (R base.caveart.cave.paintings) m.04q6t))",
        "program": "step1:(JOIN (R base.caveart.cave.paintings) m.04q6t)[SEP]step2:(AND base.caveart.painting step1)[SEP]"
    },
    {
        "qid": 349000000,
        "question": "what are forbidden when using hydroxyzine? The linked entity is Hydroxyzine (m.036pyy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xcnj",
                "entity_name": "Hypersensitivity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vqh7",
                "entity_name": "Pregnancy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1hl3",
                "entity_name": "Driving"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.contraindication",
                    "class": "medicine.contraindication",
                    "friendly_name": "Contraindication",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.036pyy",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Hydroxyzine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.contraindication.contraindication_for",
                    "friendly_name": "Contraindication for"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.contraindication . \nVALUES ?x1 { :m.036pyy } \n?x0 :medicine.contraindication.contraindication_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.contraindication (JOIN medicine.contraindication.contraindication_for m.036pyy))",
        "program": "step1:(JOIN medicine.contraindication.contraindication_for m.036pyy)[SEP]step2:(AND medicine.contraindication step1)[SEP]"
    },
    {
        "qid": 349000100,
        "question": "what are the contraindications for hydroxyzine? The linked entity is Hydroxyzine (m.036pyy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xcnj",
                "entity_name": "Hypersensitivity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vqh7",
                "entity_name": "Pregnancy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1hl3",
                "entity_name": "Driving"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.contraindication",
                    "class": "medicine.contraindication",
                    "friendly_name": "Contraindication",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.036pyy",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Hydroxyzine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.contraindication.contraindication_for",
                    "friendly_name": "Contraindication for"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.contraindication . \nVALUES ?x1 { :m.036pyy } \n?x0 :medicine.contraindication.contraindication_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.contraindication (JOIN medicine.contraindication.contraindication_for m.036pyy))",
        "program": "step1:(JOIN medicine.contraindication.contraindication_for m.036pyy)[SEP]step2:(AND medicine.contraindication step1)[SEP]"
    },
    {
        "qid": 349000200,
        "question": "which drugs and/or activities are prohibited when using hydroxyzine? The linked entity is Hydroxyzine (m.036pyy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xcnj",
                "entity_name": "Hypersensitivity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vqh7",
                "entity_name": "Pregnancy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1hl3",
                "entity_name": "Driving"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.contraindication",
                    "class": "medicine.contraindication",
                    "friendly_name": "Contraindication",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.036pyy",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Hydroxyzine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.contraindication.contraindication_for",
                    "friendly_name": "Contraindication for"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.contraindication . \nVALUES ?x1 { :m.036pyy } \n?x0 :medicine.contraindication.contraindication_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.contraindication (JOIN medicine.contraindication.contraindication_for m.036pyy))",
        "program": "step1:(JOIN medicine.contraindication.contraindication_for m.036pyy)[SEP]step2:(AND medicine.contraindication step1)[SEP]"
    },
    {
        "qid": 349000300,
        "question": "what are contraindicated when using hydroxyzine? The linked entity is Hydroxyzine (m.036pyy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xcnj",
                "entity_name": "Hypersensitivity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vqh7",
                "entity_name": "Pregnancy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1hl3",
                "entity_name": "Driving"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.contraindication",
                    "class": "medicine.contraindication",
                    "friendly_name": "Contraindication",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.036pyy",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Hydroxyzine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.contraindication.contraindication_for",
                    "friendly_name": "Contraindication for"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.contraindication . \nVALUES ?x1 { :m.036pyy } \n?x0 :medicine.contraindication.contraindication_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.contraindication (JOIN medicine.contraindication.contraindication_for m.036pyy))",
        "program": "step1:(JOIN medicine.contraindication.contraindication_for m.036pyy)[SEP]step2:(AND medicine.contraindication step1)[SEP]"
    },
    {
        "qid": 349000400,
        "question": "the use of hydroxyzine contraindicates what? The linked entity is Hydroxyzine (m.036pyy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xcnj",
                "entity_name": "Hypersensitivity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vqh7",
                "entity_name": "Pregnancy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1hl3",
                "entity_name": "Driving"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.contraindication",
                    "class": "medicine.contraindication",
                    "friendly_name": "Contraindication",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.036pyy",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Hydroxyzine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.contraindication.contraindication_for",
                    "friendly_name": "Contraindication for"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.contraindication . \nVALUES ?x1 { :m.036pyy } \n?x0 :medicine.contraindication.contraindication_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.contraindication (JOIN medicine.contraindication.contraindication_for m.036pyy))",
        "program": "step1:(JOIN medicine.contraindication.contraindication_for m.036pyy)[SEP]step2:(AND medicine.contraindication step1)[SEP]"
    },
    {
        "qid": 349000500,
        "question": "when using hydroxyzine, what are the contraindications? The linked entity is Hydroxyzine (m.036pyy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xcnj",
                "entity_name": "Hypersensitivity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vqh7",
                "entity_name": "Pregnancy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1hl3",
                "entity_name": "Driving"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.contraindication",
                    "class": "medicine.contraindication",
                    "friendly_name": "Contraindication",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.036pyy",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Hydroxyzine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.contraindication.contraindication_for",
                    "friendly_name": "Contraindication for"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.contraindication . \nVALUES ?x1 { :m.036pyy } \n?x0 :medicine.contraindication.contraindication_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.contraindication (JOIN medicine.contraindication.contraindication_for m.036pyy))",
        "program": "step1:(JOIN medicine.contraindication.contraindication_for m.036pyy)[SEP]step2:(AND medicine.contraindication step1)[SEP]"
    },
    {
        "qid": 349000600,
        "question": "what are the circumstances where you should not use hydroxyzine? The linked entity is Hydroxyzine (m.036pyy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xcnj",
                "entity_name": "Hypersensitivity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vqh7",
                "entity_name": "Pregnancy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1hl3",
                "entity_name": "Driving"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.contraindication",
                    "class": "medicine.contraindication",
                    "friendly_name": "Contraindication",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.036pyy",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "Hydroxyzine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.contraindication.contraindication_for",
                    "friendly_name": "Contraindication for"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.contraindication . \nVALUES ?x1 { :m.036pyy } \n?x0 :medicine.contraindication.contraindication_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.contraindication (JOIN medicine.contraindication.contraindication_for m.036pyy))",
        "program": "step1:(JOIN medicine.contraindication.contraindication_for m.036pyy)[SEP]step2:(AND medicine.contraindication step1)[SEP]"
    },
    {
        "qid": 350000000,
        "question": "what is the genre of q magazine? The linked entity is Q magazine (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "Q magazine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 350000001,
        "question": "what is the genre of q? The linked entity is q (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "q",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 350000100,
        "question": "which genre of magazine is the q magazine? The linked entity is Q magazine (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "Q magazine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 350000101,
        "question": "which genre of magazine is the q? The linked entity is q (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "q",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 350000200,
        "question": "q magazine falls under what category of magazine? The linked entity is Q magazine (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "Q magazine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 350000201,
        "question": "q falls under what category of magazine? The linked entity is q (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "q",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 350000300,
        "question": "what kind of magazine is the q magazine? The linked entity is Q magazine (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "Q magazine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 350000301,
        "question": "what kind of magazine is the q? The linked entity is q (m.02k1sj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rm6pq",
                "entity_name": "Music magazine"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.magazine_genre",
                    "class": "book.magazine_genre",
                    "friendly_name": "Magazine genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02k1sj",
                    "class": "book.magazine",
                    "friendly_name": "q",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.magazine_genre.magazines_in_this_genre",
                    "friendly_name": "Magazines in this genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02k1sj } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj))",
        "program": "step1:(JOIN book.magazine_genre.magazines_in_this_genre m.02k1sj)[SEP]step2:(AND book.magazine_genre step1)[SEP]"
    },
    {
        "qid": 351000000,
        "question": "find patented inventions of mark twain. The linked entity is Mark Twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "Mark Twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000001,
        "question": "find patented inventions of twain. The linked entity is twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000100,
        "question": "what ideas did mark twain copyright? The linked entity is Mark Twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "Mark Twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000101,
        "question": "what ideas did twain copyright? The linked entity is twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000200,
        "question": "which of mark twain's inventions have been patented? The linked entity is Mark Twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "Mark Twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000201,
        "question": "which of twain's inventions have been patented? The linked entity is twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000300,
        "question": "what inventions of mark twain have been patented? The linked entity is Mark Twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "Mark Twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000301,
        "question": "what inventions of twain have been patented? The linked entity is twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000400,
        "question": "which inventions did mark twain patent? The linked entity is Mark Twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "Mark Twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000401,
        "question": "which inventions did twain patent? The linked entity is twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000500,
        "question": "what patents did mark twain hold? The linked entity is Mark Twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "Mark Twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 351000501,
        "question": "what patents did twain hold? The linked entity is twain (m.014635).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56p8",
                "entity_name": "Improvement in Adjustable and Detachable Straps for Garments"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s1",
                "entity_name": "Mark Twain's Scrapbook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb56s7",
                "entity_name": "Memory Builder"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.us_patent",
                    "class": "law.us_patent",
                    "friendly_name": "Patent",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.014635",
                    "class": "law.inventor",
                    "friendly_name": "twain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.us_patent.inventor",
                    "friendly_name": "Inventor"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.014635 } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.014635))",
        "program": "step1:(JOIN law.us_patent.inventor m.014635)[SEP]step2:(AND law.us_patent step1)[SEP]"
    },
    {
        "qid": 356000000,
        "question": "what are the classifications of organisms that rank below family? The linked entity is Family (m.0fl35).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lc9",
                "entity_name": "Genus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sddfn",
                "entity_name": "Subfamily"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fxh4",
                "entity_name": "Tribe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.organism_classification_rank",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Organism Classification Rank",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fl35",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Family",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism_classification_rank.higher_rank",
                    "friendly_name": "Higher rank"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.0fl35))",
        "program": "step1:(JOIN biology.organism_classification_rank.higher_rank m.0fl35)[SEP]step2:(AND biology.organism_classification_rank step1)[SEP]"
    },
    {
        "qid": 356000100,
        "question": "what are the child organism classifications of family? The linked entity is Family (m.0fl35).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lc9",
                "entity_name": "Genus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sddfn",
                "entity_name": "Subfamily"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fxh4",
                "entity_name": "Tribe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.organism_classification_rank",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Organism Classification Rank",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fl35",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Family",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism_classification_rank.higher_rank",
                    "friendly_name": "Higher rank"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.0fl35))",
        "program": "step1:(JOIN biology.organism_classification_rank.higher_rank m.0fl35)[SEP]step2:(AND biology.organism_classification_rank step1)[SEP]"
    },
    {
        "qid": 356000200,
        "question": "which organism classification ranks are right below family? The linked entity is Family (m.0fl35).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lc9",
                "entity_name": "Genus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sddfn",
                "entity_name": "Subfamily"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fxh4",
                "entity_name": "Tribe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.organism_classification_rank",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Organism Classification Rank",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fl35",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Family",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism_classification_rank.higher_rank",
                    "friendly_name": "Higher rank"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.0fl35))",
        "program": "step1:(JOIN biology.organism_classification_rank.higher_rank m.0fl35)[SEP]step2:(AND biology.organism_classification_rank step1)[SEP]"
    },
    {
        "qid": 356000300,
        "question": "list the organism classification ranks under family. The linked entity is Family (m.0fl35).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lc9",
                "entity_name": "Genus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sddfn",
                "entity_name": "Subfamily"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fxh4",
                "entity_name": "Tribe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.organism_classification_rank",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Organism Classification Rank",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fl35",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Family",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism_classification_rank.higher_rank",
                    "friendly_name": "Higher rank"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.0fl35))",
        "program": "step1:(JOIN biology.organism_classification_rank.higher_rank m.0fl35)[SEP]step2:(AND biology.organism_classification_rank step1)[SEP]"
    },
    {
        "qid": 356000400,
        "question": "what classification of organism falls immediately under family? The linked entity is Family (m.0fl35).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lc9",
                "entity_name": "Genus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sddfn",
                "entity_name": "Subfamily"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fxh4",
                "entity_name": "Tribe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.organism_classification_rank",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Organism Classification Rank",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fl35",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Family",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism_classification_rank.higher_rank",
                    "friendly_name": "Higher rank"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.0fl35))",
        "program": "step1:(JOIN biology.organism_classification_rank.higher_rank m.0fl35)[SEP]step2:(AND biology.organism_classification_rank step1)[SEP]"
    },
    {
        "qid": 356000500,
        "question": "in biology, what classification is below family? The linked entity is Family (m.0fl35).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lc9",
                "entity_name": "Genus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sddfn",
                "entity_name": "Subfamily"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fxh4",
                "entity_name": "Tribe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.organism_classification_rank",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Organism Classification Rank",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fl35",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Family",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism_classification_rank.higher_rank",
                    "friendly_name": "Higher rank"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.0fl35))",
        "program": "step1:(JOIN biology.organism_classification_rank.higher_rank m.0fl35)[SEP]step2:(AND biology.organism_classification_rank step1)[SEP]"
    },
    {
        "qid": 356000600,
        "question": "which ranks immediately precede family in organism classification? The linked entity is Family (m.0fl35).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09lc9",
                "entity_name": "Genus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sddfn",
                "entity_name": "Subfamily"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fxh4",
                "entity_name": "Tribe"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.organism_classification_rank",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Organism Classification Rank",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fl35",
                    "class": "biology.organism_classification_rank",
                    "friendly_name": "Family",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.organism_classification_rank.higher_rank",
                    "friendly_name": "Higher rank"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.0fl35))",
        "program": "step1:(JOIN biology.organism_classification_rank.higher_rank m.0fl35)[SEP]step2:(AND biology.organism_classification_rank step1)[SEP]"
    },
    {
        "qid": 357000000,
        "question": "how can we play second life? The linked entity is Second Life (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Second Life",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000001,
        "question": "how can we play sl? The linked entity is sl (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "sl",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000002,
        "question": "how can we play secondlife? The linked entity is secondlife (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "secondlife",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000100,
        "question": "what gameplay mode is second life? The linked entity is Second Life (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Second Life",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000101,
        "question": "what gameplay mode is sl? The linked entity is sl (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "sl",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000102,
        "question": "what gameplay mode is secondlife? The linked entity is secondlife (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "secondlife",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000200,
        "question": "second life is played in what kind of mode? The linked entity is Second Life (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Second Life",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000201,
        "question": "sl is played in what kind of mode? The linked entity is sl (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "sl",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000202,
        "question": "secondlife is played in what kind of mode? The linked entity is secondlife (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "secondlife",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000300,
        "question": "second life game is made for which gameplay mode? The linked entity is Second Life (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Second Life",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000301,
        "question": "sl game is made for which gameplay mode? The linked entity is sl (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "sl",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000302,
        "question": "secondlife game is made for which gameplay mode? The linked entity is secondlife (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "secondlife",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000400,
        "question": "which type of gameplay mode is second life most considered? The linked entity is Second Life (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Second Life",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000401,
        "question": "which type of gameplay mode is sl most considered? The linked entity is sl (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "sl",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000402,
        "question": "which type of gameplay mode is secondlife most considered? The linked entity is secondlife (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "secondlife",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000500,
        "question": "in what mode can we play second life? The linked entity is Second Life (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Second Life",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000501,
        "question": "in what mode can we play sl? The linked entity is sl (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "sl",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 357000502,
        "question": "in what mode can we play secondlife? The linked entity is secondlife (m.02sz9d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z747",
                "entity_name": "Multiplayer video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sz9d",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "secondlife",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.gameplay_modes",
                    "friendly_name": "Gameplay modes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02sz9d } \n?x1 :cvg.computer_videogame.gameplay_modes ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d))",
        "program": "step1:(JOIN (R cvg.computer_videogame.gameplay_modes) m.02sz9d)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 358000000,
        "question": "what's the previous version of sierra's creative interpreter? The linked entity is Sierra's Creative Interpreter (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Sierra's Creative Interpreter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000001,
        "question": "what's the previous version of sci? The linked entity is sci (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "sci",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000100,
        "question": "what game engine came before sierra's creative interpreter? The linked entity is Sierra's Creative Interpreter (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Sierra's Creative Interpreter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000101,
        "question": "what game engine came before sci? The linked entity is sci (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "sci",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000200,
        "question": "what is the predecessor of sierra's creative interpreter? The linked entity is Sierra's Creative Interpreter (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Sierra's Creative Interpreter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000201,
        "question": "what is the predecessor of sci? The linked entity is sci (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "sci",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000300,
        "question": "which video game engine precedes sierra's creative interpreter? The linked entity is Sierra's Creative Interpreter (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Sierra's Creative Interpreter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000301,
        "question": "which video game engine precedes sci? The linked entity is sci (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "sci",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000400,
        "question": "sierra's creative interpreter came after what video game engine? The linked entity is Sierra's Creative Interpreter (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Sierra's Creative Interpreter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000401,
        "question": "sci came after what video game engine? The linked entity is sci (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "sci",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000500,
        "question": "which engine did sierra use to create video games before sierra's creative interpreter? The linked entity is Sierra's Creative Interpreter (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Sierra's Creative Interpreter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 358000501,
        "question": "which engine did sierra use to create video games before sci? The linked entity is sci (m.0359yz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4hg",
                "entity_name": "Adventure Game Interpreter"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0359yz",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "sci",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0359yz } \n?x1 :cvg.computer_game_engine.predecessor_engine ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_engine (JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz))",
        "program": "step1:(JOIN (R cvg.computer_game_engine.predecessor_engine) m.0359yz)[SEP]step2:(AND cvg.computer_game_engine step1)[SEP]"
    },
    {
        "qid": 359000000,
        "question": "what is the largest casino?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mg7jt",
                "entity_name": "Empress Casino Joliet"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.casinos.casino.gaming_floor_space",
                    "friendly_name": "Gaming floor space"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.casinos.casino . \n?y0 :base.casinos.casino.gaming_floor_space ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.casinos.casino.gaming_floor_space ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)",
        "program": "step1:(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)[SEP]"
    },
    {
        "qid": 359000100,
        "question": "find the casino with the largest gaming floor space.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mg7jt",
                "entity_name": "Empress Casino Joliet"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.casinos.casino.gaming_floor_space",
                    "friendly_name": "Gaming floor space"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.casinos.casino . \n?y0 :base.casinos.casino.gaming_floor_space ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.casinos.casino.gaming_floor_space ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)",
        "program": "step1:(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)[SEP]"
    },
    {
        "qid": 359000200,
        "question": "what is the largest casino in terms of floor space?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mg7jt",
                "entity_name": "Empress Casino Joliet"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.casinos.casino.gaming_floor_space",
                    "friendly_name": "Gaming floor space"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.casinos.casino . \n?y0 :base.casinos.casino.gaming_floor_space ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.casinos.casino.gaming_floor_space ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)",
        "program": "step1:(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)[SEP]"
    },
    {
        "qid": 359000300,
        "question": "which casino is the largest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mg7jt",
                "entity_name": "Empress Casino Joliet"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.casinos.casino.gaming_floor_space",
                    "friendly_name": "Gaming floor space"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :base.casinos.casino . \n?y0 :base.casinos.casino.gaming_floor_space ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :base.casinos.casino.gaming_floor_space ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)",
        "program": "step1:(ARGMAX base.casinos.casino base.casinos.casino.gaming_floor_space)[SEP]"
    },
    {
        "qid": 361000000,
        "question": "what vocal range is luciano pavarotti? The linked entity is Luciano Pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "Luciano Pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000001,
        "question": "what vocal range is pavarotti? The linked entity is pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000100,
        "question": "what is luciano pavarotti's vocal range? The linked entity is Luciano Pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "Luciano Pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000101,
        "question": "what is pavarotti's vocal range? The linked entity is pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000200,
        "question": "what is the voice style of luciano pavarotti? The linked entity is Luciano Pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "Luciano Pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000201,
        "question": "what is the voice style of pavarotti? The linked entity is pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000300,
        "question": "what kind of voice does luciano pavarotti have? The linked entity is Luciano Pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "Luciano Pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000301,
        "question": "what kind of voice does pavarotti have? The linked entity is pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000400,
        "question": "what type of singer is luciano pavarotti? The linked entity is Luciano Pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "Luciano Pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000401,
        "question": "what type of singer is pavarotti? The linked entity is pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000500,
        "question": "how could luciano pavarotti's voice be described? The linked entity is Luciano Pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "Luciano Pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000501,
        "question": "how could pavarotti's voice be described? The linked entity is pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000600,
        "question": "what vocal register does luciano pavarotti sing in? The linked entity is Luciano Pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "Luciano Pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 361000601,
        "question": "what vocal register does pavarotti sing in? The linked entity is pavarotti (m.01h5j3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j862",
                "entity_name": "Tenor"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.voice",
                    "class": "music.voice",
                    "friendly_name": "Musical voice",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01h5j3",
                    "class": "music.opera_singer",
                    "friendly_name": "pavarotti",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.opera_singer.voice_type",
                    "friendly_name": "Voice Type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.voice . \nVALUES ?x1 { :m.01h5j3 } \n?x1 :music.opera_singer.voice_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND music.voice (JOIN (R music.opera_singer.voice_type) m.01h5j3))",
        "program": "step1:(JOIN (R music.opera_singer.voice_type) m.01h5j3)[SEP]step2:(AND music.voice step1)[SEP]"
    },
    {
        "qid": 365000000,
        "question": "what kind of electric locomotive is siemens making? The linked entity is Siemens (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "Siemens",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000001,
        "question": "what kind of electric locomotive is siemens ag making? The linked entity is siemens ag (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "siemens ag",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000100,
        "question": "what kind of electric locomotives are built by siemens? The linked entity is Siemens (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "Siemens",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000101,
        "question": "what kind of electric locomotives are built by siemens ag? The linked entity is siemens ag (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "siemens ag",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000200,
        "question": "what sort of electric locomotives does siemens manufacture? The linked entity is Siemens (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "Siemens",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000201,
        "question": "what sort of electric locomotives does siemens ag manufacture? The linked entity is siemens ag (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "siemens ag",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000300,
        "question": "what are the types of electric locomotives that siemens builds? The linked entity is Siemens (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "Siemens",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000301,
        "question": "what are the types of electric locomotives that siemens ag builds? The linked entity is siemens ag (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "siemens ag",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000400,
        "question": "what electric locomotive does siemens provide? The linked entity is Siemens (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "Siemens",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 365000401,
        "question": "what electric locomotive does siemens ag provide? The linked entity is siemens ag (m.016l20).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdbw4",
                "entity_name": "NSB El 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z62fp",
                "entity_name": "EuroSprinter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfymr",
                "entity_name": "NSB El 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y98x3",
                "entity_name": "SJ O"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0520m1_",
                "entity_name": "SNCB Class 18"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_ncl",
                "entity_name": "DB Class 103"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080cymk",
                "entity_name": "DB Class 151"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_nxw",
                "entity_name": "DB Class E 40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb0c5",
                "entity_name": "DB Class E 41"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcs50",
                "entity_name": "DB Class 111"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bh9jp_",
                "entity_name": "OSE class 120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzwb5",
                "entity_name": "DB Class E 10"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.electric_locomotive_class",
                    "class": "rail.electric_locomotive_class",
                    "friendly_name": "Electric locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.016l20",
                    "class": "rail.locomotive_builder",
                    "friendly_name": "siemens ag",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "rail.locomotive_builder.locomotive_classes_built",
                    "friendly_name": "Locomotive classes built"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.electric_locomotive_class . \nVALUES ?x1 { :m.016l20 } \n?x1 :rail.locomotive_builder.locomotive_classes_built ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND rail.electric_locomotive_class (JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20))",
        "program": "step1:(JOIN (R rail.locomotive_builder.locomotive_classes_built) m.016l20)[SEP]step2:(AND rail.electric_locomotive_class step1)[SEP]"
    },
    {
        "qid": 366000000,
        "question": "which gameplay mode can starcraft: brood war be played in? The linked entity is StarCraft: Brood War (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "StarCraft: Brood War",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000001,
        "question": "which gameplay mode can brood war be played in? The linked entity is brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000002,
        "question": "which gameplay mode can starcraft brood war be played in? The linked entity is starcraft brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "starcraft brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000100,
        "question": "what is the game mode of starcraft: brood war? The linked entity is StarCraft: Brood War (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "StarCraft: Brood War",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000101,
        "question": "what is the game mode of brood war? The linked entity is brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000102,
        "question": "what is the game mode of starcraft brood war? The linked entity is starcraft brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "starcraft brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000200,
        "question": "starcraft: brood war is made for which game mode? The linked entity is StarCraft: Brood War (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "StarCraft: Brood War",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000201,
        "question": "brood war is made for which game mode? The linked entity is brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000202,
        "question": "starcraft brood war is made for which game mode? The linked entity is starcraft brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "starcraft brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000300,
        "question": "which game mode is starcraft: brood war played in? The linked entity is StarCraft: Brood War (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "StarCraft: Brood War",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000301,
        "question": "which game mode is brood war played in? The linked entity is brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000302,
        "question": "which game mode is starcraft brood war played in? The linked entity is starcraft brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "starcraft brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000400,
        "question": "what gameplay modes does starcraft: brood war have? The linked entity is StarCraft: Brood War (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "StarCraft: Brood War",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000401,
        "question": "what gameplay modes does brood war have? The linked entity is brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 366000402,
        "question": "what gameplay modes does starcraft brood war have? The linked entity is starcraft brood war (m.02z4kv).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hjn4",
                "entity_name": "Single-player video game"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.gameplay_mode",
                    "class": "cvg.gameplay_mode",
                    "friendly_name": "Gameplay Mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02z4kv",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "starcraft brood war",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.gameplay_mode.games_with_this_mode",
                    "friendly_name": "Games with this mode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.gameplay_mode . \nVALUES ?x1 { :m.02z4kv } \n?x0 :cvg.gameplay_mode.games_with_this_mode ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.gameplay_mode (JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv))",
        "program": "step1:(JOIN cvg.gameplay_mode.games_with_this_mode m.02z4kv)[SEP]step2:(AND cvg.gameplay_mode step1)[SEP]"
    },
    {
        "qid": 368000000,
        "question": "what musical games has nintendo created? The linked entity is Nintendo (m.059wk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r9g9",
                "entity_name": "Daigasso! Band Brothers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game",
                    "class": "cvg.musical_game",
                    "friendly_name": "Musical Game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game . \nVALUES ?x1 { :m.059wk } \n?x1 :cvg.cvg_designer.games_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.musical_game (JOIN (R cvg.cvg_designer.games_designed) m.059wk))",
        "program": "step1:(JOIN (R cvg.cvg_designer.games_designed) m.059wk)[SEP]step2:(AND cvg.musical_game step1)[SEP]"
    },
    {
        "qid": 368000100,
        "question": "find nintendo musical games. The linked entity is Nintendo (m.059wk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r9g9",
                "entity_name": "Daigasso! Band Brothers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game",
                    "class": "cvg.musical_game",
                    "friendly_name": "Musical Game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game . \nVALUES ?x1 { :m.059wk } \n?x1 :cvg.cvg_designer.games_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.musical_game (JOIN (R cvg.cvg_designer.games_designed) m.059wk))",
        "program": "step1:(JOIN (R cvg.cvg_designer.games_designed) m.059wk)[SEP]step2:(AND cvg.musical_game step1)[SEP]"
    },
    {
        "qid": 368000200,
        "question": "find me musical games designed by nintendo. The linked entity is Nintendo (m.059wk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r9g9",
                "entity_name": "Daigasso! Band Brothers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game",
                    "class": "cvg.musical_game",
                    "friendly_name": "Musical Game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game . \nVALUES ?x1 { :m.059wk } \n?x1 :cvg.cvg_designer.games_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.musical_game (JOIN (R cvg.cvg_designer.games_designed) m.059wk))",
        "program": "step1:(JOIN (R cvg.cvg_designer.games_designed) m.059wk)[SEP]step2:(AND cvg.musical_game step1)[SEP]"
    },
    {
        "qid": 368000300,
        "question": "what music-based games have nintendo released? The linked entity is Nintendo (m.059wk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r9g9",
                "entity_name": "Daigasso! Band Brothers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game",
                    "class": "cvg.musical_game",
                    "friendly_name": "Musical Game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game . \nVALUES ?x1 { :m.059wk } \n?x1 :cvg.cvg_designer.games_designed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND cvg.musical_game (JOIN (R cvg.cvg_designer.games_designed) m.059wk))",
        "program": "step1:(JOIN (R cvg.cvg_designer.games_designed) m.059wk)[SEP]step2:(AND cvg.musical_game step1)[SEP]"
    },
    {
        "qid": 371000000,
        "question": "what is the name of the hospital that the architecture firm shepley, rutan and coolidge built? The linked entity is Shepley, Rutan and Coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "Shepley, Rutan and Coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000001,
        "question": "what is the name of the hospital that the architecture firm shepley, rutan & coolidge built? The linked entity is shepley, rutan & coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "shepley, rutan & coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000100,
        "question": "the architecture firm shepley, rutan and coolidge built which hospitals? The linked entity is Shepley, Rutan and Coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "Shepley, Rutan and Coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000101,
        "question": "the architecture firm shepley, rutan & coolidge built which hospitals? The linked entity is shepley, rutan & coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "shepley, rutan & coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000200,
        "question": "which hospitals did shepley, rutan and coolidge build? The linked entity is Shepley, Rutan and Coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "Shepley, Rutan and Coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000201,
        "question": "which hospitals did shepley, rutan & coolidge build? The linked entity is shepley, rutan & coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "shepley, rutan & coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000300,
        "question": "find the hospital projects of shepley, rutan and coolidge. The linked entity is Shepley, Rutan and Coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "Shepley, Rutan and Coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000301,
        "question": "find the hospital projects of shepley, rutan & coolidge. The linked entity is shepley, rutan & coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "shepley, rutan & coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000400,
        "question": "which hospitals were built by shepley, rutan and coolidge? The linked entity is Shepley, Rutan and Coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "Shepley, Rutan and Coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 371000401,
        "question": "which hospitals were built by shepley, rutan & coolidge? The linked entity is shepley, rutan & coolidge (m.0ksx3t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gtf71",
                "entity_name": "Medfield State Hospital"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.hospital",
                    "class": "medicine.hospital",
                    "friendly_name": "Hospital",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ksx3t",
                    "class": "architecture.architecture_firm",
                    "friendly_name": "shepley, rutan & coolidge",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "architecture.architecture_firm.projects",
                    "friendly_name": "Projects"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0ksx3t } \n?x1 :architecture.architecture_firm.projects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND medicine.hospital (JOIN (R architecture.architecture_firm.projects) m.0ksx3t))",
        "program": "step1:(JOIN (R architecture.architecture_firm.projects) m.0ksx3t)[SEP]step2:(AND medicine.hospital step1)[SEP]"
    },
    {
        "qid": 372000000,
        "question": "in which philanthropic sectors does the american red cross serve? The linked entity is American Red Cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "American Red Cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000001,
        "question": "in which philanthropic sectors does the red cross serve? The linked entity is red cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "red cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000002,
        "question": "in which philanthropic sectors does the arc serve? The linked entity is arc (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "arc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000100,
        "question": "in american red cross which charitable fields are they serving? The linked entity is American Red Cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "American Red Cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000101,
        "question": "in red cross which charitable fields are they serving? The linked entity is red cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "red cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000102,
        "question": "in arc which charitable fields are they serving? The linked entity is arc (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "arc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000200,
        "question": "in which charitable fields is the american red cross serving? The linked entity is American Red Cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "American Red Cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000201,
        "question": "in which charitable fields is the red cross serving? The linked entity is red cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "red cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000202,
        "question": "in which charitable fields is the arc serving? The linked entity is arc (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "arc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000300,
        "question": "to which fields is american red cross paying attention? The linked entity is American Red Cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "American Red Cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000301,
        "question": "to which fields is red cross paying attention? The linked entity is red cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "red cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000302,
        "question": "to which fields is arc paying attention? The linked entity is arc (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "arc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000400,
        "question": "the american red cross serves which charitable fields? The linked entity is American Red Cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "American Red Cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000401,
        "question": "the red cross serves which charitable fields? The linked entity is red cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "red cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000402,
        "question": "the arc serves which charitable fields? The linked entity is arc (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "arc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000500,
        "question": "what fields of charitable work does the american red cross provide service in? The linked entity is American Red Cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "American Red Cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000501,
        "question": "what fields of charitable work does the red cross provide service in? The linked entity is red cross (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "red cross",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 372000502,
        "question": "what fields of charitable work does the arc provide service in? The linked entity is arc (m.0by8vb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0282n5",
                "entity_name": "Humanitarian aid"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.charities.charitable_field",
                    "class": "base.charities.charitable_field",
                    "friendly_name": "Charitable field",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0by8vb",
                    "class": "base.charities.charity",
                    "friendly_name": "arc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.charities.charitable_field.charitable_organizations",
                    "friendly_name": "Charitable organizations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.charities.charitable_field . \nVALUES ?x1 { :m.0by8vb } \n?x0 :base.charities.charitable_field.charitable_organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.charities.charitable_field (JOIN base.charities.charitable_field.charitable_organizations m.0by8vb))",
        "program": "step1:(JOIN base.charities.charitable_field.charitable_organizations m.0by8vb)[SEP]step2:(AND base.charities.charitable_field step1)[SEP]"
    },
    {
        "qid": 374000000,
        "question": "what are some western operas? The linked entity is Western (m.0hfjk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdb2cx",
                "entity_name": "Thunderstorm"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "opera.opera",
                    "class": "opera.opera",
                    "friendly_name": "Opera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hfjk",
                    "class": "opera.opera_genre",
                    "friendly_name": "Western",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "opera.opera_genre.operas_in_this_genre",
                    "friendly_name": "Operas In This Genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera . \nVALUES ?x1 { :m.0hfjk } \n?x1 :opera.opera_genre.operas_in_this_genre ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND opera.opera (JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk))",
        "program": "step1:(JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk)[SEP]step2:(AND opera.opera step1)[SEP]"
    },
    {
        "qid": 374000100,
        "question": "list western operas. The linked entity is Western (m.0hfjk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdb2cx",
                "entity_name": "Thunderstorm"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "opera.opera",
                    "class": "opera.opera",
                    "friendly_name": "Opera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hfjk",
                    "class": "opera.opera_genre",
                    "friendly_name": "Western",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "opera.opera_genre.operas_in_this_genre",
                    "friendly_name": "Operas In This Genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera . \nVALUES ?x1 { :m.0hfjk } \n?x1 :opera.opera_genre.operas_in_this_genre ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND opera.opera (JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk))",
        "program": "step1:(JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk)[SEP]step2:(AND opera.opera step1)[SEP]"
    },
    {
        "qid": 374000200,
        "question": "find operas of the western style. The linked entity is Western (m.0hfjk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdb2cx",
                "entity_name": "Thunderstorm"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "opera.opera",
                    "class": "opera.opera",
                    "friendly_name": "Opera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hfjk",
                    "class": "opera.opera_genre",
                    "friendly_name": "Western",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "opera.opera_genre.operas_in_this_genre",
                    "friendly_name": "Operas In This Genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera . \nVALUES ?x1 { :m.0hfjk } \n?x1 :opera.opera_genre.operas_in_this_genre ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND opera.opera (JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk))",
        "program": "step1:(JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk)[SEP]step2:(AND opera.opera step1)[SEP]"
    },
    {
        "qid": 374000300,
        "question": "please give me a list of operas that have a cowboy or old western theme? The linked entity is Western (m.0hfjk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdb2cx",
                "entity_name": "Thunderstorm"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "opera.opera",
                    "class": "opera.opera",
                    "friendly_name": "Opera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hfjk",
                    "class": "opera.opera_genre",
                    "friendly_name": "Western",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "opera.opera_genre.operas_in_this_genre",
                    "friendly_name": "Operas In This Genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera . \nVALUES ?x1 { :m.0hfjk } \n?x1 :opera.opera_genre.operas_in_this_genre ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND opera.opera (JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk))",
        "program": "step1:(JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk)[SEP]step2:(AND opera.opera step1)[SEP]"
    },
    {
        "qid": 374000400,
        "question": "what operas exist that are classified as coming from the western genre? The linked entity is Western (m.0hfjk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdb2cx",
                "entity_name": "Thunderstorm"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "opera.opera",
                    "class": "opera.opera",
                    "friendly_name": "Opera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hfjk",
                    "class": "opera.opera_genre",
                    "friendly_name": "Western",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "opera.opera_genre.operas_in_this_genre",
                    "friendly_name": "Operas In This Genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera . \nVALUES ?x1 { :m.0hfjk } \n?x1 :opera.opera_genre.operas_in_this_genre ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND opera.opera (JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk))",
        "program": "step1:(JOIN (R opera.opera_genre.operas_in_this_genre) m.0hfjk)[SEP]step2:(AND opera.opera step1)[SEP]"
    },
    {
        "qid": 375000000,
        "question": "which barbie dolls are made based on elvis presley? The linked entity is Elvis Presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "Elvis Presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000001,
        "question": "which barbie dolls are made based on elvis? The linked entity is elvis (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "elvis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000002,
        "question": "which barbie dolls are made based on presley? The linked entity is presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000100,
        "question": "what are the barbie dolls that resemble elvis presley? The linked entity is Elvis Presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "Elvis Presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000101,
        "question": "what are the barbie dolls that resemble elvis? The linked entity is elvis (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "elvis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000102,
        "question": "what are the barbie dolls that resemble presley? The linked entity is presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000200,
        "question": "what barbie dolls are produced in reference to elvis presley? The linked entity is Elvis Presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "Elvis Presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000201,
        "question": "what barbie dolls are produced in reference to elvis? The linked entity is elvis (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "elvis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000202,
        "question": "what barbie dolls are produced in reference to presley? The linked entity is presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000300,
        "question": "which barbie doll has the theme elvis presley? The linked entity is Elvis Presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "Elvis Presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000301,
        "question": "which barbie doll has the theme elvis? The linked entity is elvis (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "elvis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000302,
        "question": "which barbie doll has the theme presley? The linked entity is presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000400,
        "question": "name the barbie dolls themed on elvis presley? The linked entity is Elvis Presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "Elvis Presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000401,
        "question": "name the barbie dolls themed on elvis? The linked entity is elvis (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "elvis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 375000402,
        "question": "name the barbie dolls themed on presley? The linked entity is presley (m.02jq1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gnxbm",
                "entity_name": "Barbie Loves Elvis Giftset"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barbie.barbie_doll",
                    "class": "base.barbie.barbie_doll",
                    "friendly_name": "Barbie Doll",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02jq1",
                    "class": "business.product_theme",
                    "friendly_name": "presley",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_theme.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barbie.barbie_doll . \nVALUES ?x1 { :m.02jq1 } \n?x1 :business.product_theme.products ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.barbie.barbie_doll (JOIN (R business.product_theme.products) m.02jq1))",
        "program": "step1:(JOIN (R business.product_theme.products) m.02jq1)[SEP]step2:(AND base.barbie.barbie_doll step1)[SEP]"
    },
    {
        "qid": 378000000,
        "question": "what campaigns for vice president has sarah palin run? The linked entity is Sarah Palin (m.08f3b1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j5_jr",
                "entity_name": "Sarah Palin vice-presidential campaign, 2008"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.us_vice_presidential_campaign",
                    "class": "government.us_vice_presidential_campaign",
                    "friendly_name": "US Vice Presidential campaign",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f3b1",
                    "class": "government.politician",
                    "friendly_name": "Sarah Palin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "government.politician.election_campaigns",
                    "friendly_name": "Election campaigns"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_vice_presidential_campaign . \nVALUES ?x1 { :m.08f3b1 } \n?x1 :government.politician.election_campaigns ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND government.us_vice_presidential_campaign (JOIN (R government.politician.election_campaigns) m.08f3b1))",
        "program": "step1:(JOIN (R government.politician.election_campaigns) m.08f3b1)[SEP]step2:(AND government.us_vice_presidential_campaign step1)[SEP]"
    },
    {
        "qid": 378000001,
        "question": "what campaigns for vice president has palin run? The linked entity is palin (m.08f3b1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j5_jr",
                "entity_name": "Sarah Palin vice-presidential campaign, 2008"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.us_vice_presidential_campaign",
                    "class": "government.us_vice_presidential_campaign",
                    "friendly_name": "US Vice Presidential campaign",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f3b1",
                    "class": "government.politician",
                    "friendly_name": "palin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "government.politician.election_campaigns",
                    "friendly_name": "Election campaigns"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_vice_presidential_campaign . \nVALUES ?x1 { :m.08f3b1 } \n?x1 :government.politician.election_campaigns ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND government.us_vice_presidential_campaign (JOIN (R government.politician.election_campaigns) m.08f3b1))",
        "program": "step1:(JOIN (R government.politician.election_campaigns) m.08f3b1)[SEP]step2:(AND government.us_vice_presidential_campaign step1)[SEP]"
    },
    {
        "qid": 378000100,
        "question": "in which campaigns did sarah palin seek election for the vice president of the united states? The linked entity is Sarah Palin (m.08f3b1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j5_jr",
                "entity_name": "Sarah Palin vice-presidential campaign, 2008"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.us_vice_presidential_campaign",
                    "class": "government.us_vice_presidential_campaign",
                    "friendly_name": "US Vice Presidential campaign",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f3b1",
                    "class": "government.politician",
                    "friendly_name": "Sarah Palin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "government.politician.election_campaigns",
                    "friendly_name": "Election campaigns"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_vice_presidential_campaign . \nVALUES ?x1 { :m.08f3b1 } \n?x1 :government.politician.election_campaigns ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND government.us_vice_presidential_campaign (JOIN (R government.politician.election_campaigns) m.08f3b1))",
        "program": "step1:(JOIN (R government.politician.election_campaigns) m.08f3b1)[SEP]step2:(AND government.us_vice_presidential_campaign step1)[SEP]"
    },
    {
        "qid": 378000101,
        "question": "in which campaigns did palin seek election for the vice president of the united states? The linked entity is palin (m.08f3b1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j5_jr",
                "entity_name": "Sarah Palin vice-presidential campaign, 2008"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.us_vice_presidential_campaign",
                    "class": "government.us_vice_presidential_campaign",
                    "friendly_name": "US Vice Presidential campaign",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f3b1",
                    "class": "government.politician",
                    "friendly_name": "palin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "government.politician.election_campaigns",
                    "friendly_name": "Election campaigns"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_vice_presidential_campaign . \nVALUES ?x1 { :m.08f3b1 } \n?x1 :government.politician.election_campaigns ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND government.us_vice_presidential_campaign (JOIN (R government.politician.election_campaigns) m.08f3b1))",
        "program": "step1:(JOIN (R government.politician.election_campaigns) m.08f3b1)[SEP]step2:(AND government.us_vice_presidential_campaign step1)[SEP]"
    },
    {
        "qid": 378000200,
        "question": "find the election campaigns that sarah palin has run for vice president. The linked entity is Sarah Palin (m.08f3b1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j5_jr",
                "entity_name": "Sarah Palin vice-presidential campaign, 2008"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.us_vice_presidential_campaign",
                    "class": "government.us_vice_presidential_campaign",
                    "friendly_name": "US Vice Presidential campaign",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f3b1",
                    "class": "government.politician",
                    "friendly_name": "Sarah Palin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "government.politician.election_campaigns",
                    "friendly_name": "Election campaigns"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_vice_presidential_campaign . \nVALUES ?x1 { :m.08f3b1 } \n?x1 :government.politician.election_campaigns ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND government.us_vice_presidential_campaign (JOIN (R government.politician.election_campaigns) m.08f3b1))",
        "program": "step1:(JOIN (R government.politician.election_campaigns) m.08f3b1)[SEP]step2:(AND government.us_vice_presidential_campaign step1)[SEP]"
    },
    {
        "qid": 378000201,
        "question": "find the election campaigns that palin has run for vice president. The linked entity is palin (m.08f3b1).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j5_jr",
                "entity_name": "Sarah Palin vice-presidential campaign, 2008"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.us_vice_presidential_campaign",
                    "class": "government.us_vice_presidential_campaign",
                    "friendly_name": "US Vice Presidential campaign",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f3b1",
                    "class": "government.politician",
                    "friendly_name": "palin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "government.politician.election_campaigns",
                    "friendly_name": "Election campaigns"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_vice_presidential_campaign . \nVALUES ?x1 { :m.08f3b1 } \n?x1 :government.politician.election_campaigns ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND government.us_vice_presidential_campaign (JOIN (R government.politician.election_campaigns) m.08f3b1))",
        "program": "step1:(JOIN (R government.politician.election_campaigns) m.08f3b1)[SEP]step2:(AND government.us_vice_presidential_campaign step1)[SEP]"
    },
    {
        "qid": 380000000,
        "question": "which school district is the head start program part of? The linked entity is Head Start Program (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "Head Start Program",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000001,
        "question": "which school district is the head start part of? The linked entity is head start (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "head start",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000002,
        "question": "which school district is the early head start program part of? The linked entity is early head start program (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "early head start program",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000100,
        "question": "in which school district is the head start program located? The linked entity is Head Start Program (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "Head Start Program",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000101,
        "question": "in which school district is the head start located? The linked entity is head start (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "head start",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000102,
        "question": "in which school district is the early head start program located? The linked entity is early head start program (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "early head start program",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000200,
        "question": "which district is the school head start program in? The linked entity is Head Start Program (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "Head Start Program",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000201,
        "question": "which district is the school head start in? The linked entity is head start (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "head start",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 380000202,
        "question": "which district is the school early head start program in? The linked entity is early head start program (m.01njrf).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0480vd9",
                "entity_name": "Enfield School District"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "education.school_district",
                    "class": "education.school_district",
                    "friendly_name": "School district",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01njrf",
                    "class": "education.school",
                    "friendly_name": "early head start program",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "education.school_district.schools",
                    "friendly_name": "Schools"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { :m.01njrf } \n?x0 :education.school_district.schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND education.school_district (JOIN education.school_district.schools m.01njrf))",
        "program": "step1:(JOIN education.school_district.schools m.01njrf)[SEP]step2:(AND education.school_district step1)[SEP]"
    },
    {
        "qid": 381000000,
        "question": "how is nestlé organized from a legal standpoint? The linked entity is Nestlé (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "Nestlé",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000001,
        "question": "how is nestle organized from a legal standpoint? The linked entity is nestle (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000002,
        "question": "how is nestle sa organized from a legal standpoint? The linked entity is nestle sa (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle sa",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000100,
        "question": "what is the legal structure of nestlé? The linked entity is Nestlé (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "Nestlé",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000101,
        "question": "what is the legal structure of nestle? The linked entity is nestle (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000102,
        "question": "what is the legal structure of nestle sa? The linked entity is nestle sa (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle sa",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000200,
        "question": "how is nestlé legally structured? The linked entity is Nestlé (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "Nestlé",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000201,
        "question": "how is nestle legally structured? The linked entity is nestle (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000202,
        "question": "how is nestle sa legally structured? The linked entity is nestle sa (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle sa",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000300,
        "question": "what legal structure is nestlé using? The linked entity is Nestlé (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "Nestlé",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000301,
        "question": "what legal structure is nestle using? The linked entity is nestle (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000302,
        "question": "what legal structure is nestle sa using? The linked entity is nestle sa (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle sa",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000400,
        "question": "what legal structure does nestlé have? The linked entity is Nestlé (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "Nestlé",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000401,
        "question": "what legal structure does nestle have? The linked entity is nestle (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 381000402,
        "question": "what legal structure does nestle sa have? The linked entity is nestle sa (m.01556g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.079bdg",
                "entity_name": "Publicly listed company"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.company_type",
                    "class": "business.company_type",
                    "friendly_name": "Organization legal structure",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01556g",
                    "class": "food.candy_bar_manufacturer",
                    "friendly_name": "nestle sa",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.01556g } \n?x1 :organization.organization.legal_structure ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND business.company_type (JOIN (R organization.organization.legal_structure) m.01556g))",
        "program": "step1:(JOIN (R organization.organization.legal_structure) m.01556g)[SEP]step2:(AND business.company_type step1)[SEP]"
    },
    {
        "qid": 385000000,
        "question": "where did the mutiny on the bounty happen? The linked entity is Mutiny on the Bounty (m.0j2dj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mxdps",
                "entity_name": "HMAV Bounty"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.tallships.tall_ship",
                    "class": "base.tallships.tall_ship",
                    "friendly_name": "Tall ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0j2dj",
                    "class": "base.tallships.tall_ship_event_instance",
                    "friendly_name": "Mutiny on the Bounty",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.tallships.tall_ship.events_participated_in",
                    "friendly_name": "Events participated in"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.tallships.tall_ship . \nVALUES ?x1 { :m.0j2dj } \n?x0 :base.tallships.tall_ship.events_participated_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.tallships.tall_ship (JOIN base.tallships.tall_ship.events_participated_in m.0j2dj))",
        "program": "step1:(JOIN base.tallships.tall_ship.events_participated_in m.0j2dj)[SEP]step2:(AND base.tallships.tall_ship step1)[SEP]"
    },
    {
        "qid": 385000100,
        "question": "what is the name of the ship where the mutiny on the bounty occurred? The linked entity is Mutiny on the Bounty (m.0j2dj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mxdps",
                "entity_name": "HMAV Bounty"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.tallships.tall_ship",
                    "class": "base.tallships.tall_ship",
                    "friendly_name": "Tall ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0j2dj",
                    "class": "base.tallships.tall_ship_event_instance",
                    "friendly_name": "Mutiny on the Bounty",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.tallships.tall_ship.events_participated_in",
                    "friendly_name": "Events participated in"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.tallships.tall_ship . \nVALUES ?x1 { :m.0j2dj } \n?x0 :base.tallships.tall_ship.events_participated_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.tallships.tall_ship (JOIN base.tallships.tall_ship.events_participated_in m.0j2dj))",
        "program": "step1:(JOIN base.tallships.tall_ship.events_participated_in m.0j2dj)[SEP]step2:(AND base.tallships.tall_ship step1)[SEP]"
    },
    {
        "qid": 385000200,
        "question": "what was the name of the ship that the mutiny on the bounty happened on? The linked entity is Mutiny on the Bounty (m.0j2dj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mxdps",
                "entity_name": "HMAV Bounty"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.tallships.tall_ship",
                    "class": "base.tallships.tall_ship",
                    "friendly_name": "Tall ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0j2dj",
                    "class": "base.tallships.tall_ship_event_instance",
                    "friendly_name": "Mutiny on the Bounty",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.tallships.tall_ship.events_participated_in",
                    "friendly_name": "Events participated in"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.tallships.tall_ship . \nVALUES ?x1 { :m.0j2dj } \n?x0 :base.tallships.tall_ship.events_participated_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.tallships.tall_ship (JOIN base.tallships.tall_ship.events_participated_in m.0j2dj))",
        "program": "step1:(JOIN base.tallships.tall_ship.events_participated_in m.0j2dj)[SEP]step2:(AND base.tallships.tall_ship step1)[SEP]"
    },
    {
        "qid": 385000300,
        "question": "the mutiny on the bounty took place on which ship? The linked entity is Mutiny on the Bounty (m.0j2dj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mxdps",
                "entity_name": "HMAV Bounty"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.tallships.tall_ship",
                    "class": "base.tallships.tall_ship",
                    "friendly_name": "Tall ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0j2dj",
                    "class": "base.tallships.tall_ship_event_instance",
                    "friendly_name": "Mutiny on the Bounty",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.tallships.tall_ship.events_participated_in",
                    "friendly_name": "Events participated in"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.tallships.tall_ship . \nVALUES ?x1 { :m.0j2dj } \n?x0 :base.tallships.tall_ship.events_participated_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.tallships.tall_ship (JOIN base.tallships.tall_ship.events_participated_in m.0j2dj))",
        "program": "step1:(JOIN base.tallships.tall_ship.events_participated_in m.0j2dj)[SEP]step2:(AND base.tallships.tall_ship step1)[SEP]"
    },
    {
        "qid": 385000400,
        "question": "on which ship did the mutiny on the bounty happen? The linked entity is Mutiny on the Bounty (m.0j2dj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mxdps",
                "entity_name": "HMAV Bounty"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.tallships.tall_ship",
                    "class": "base.tallships.tall_ship",
                    "friendly_name": "Tall ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0j2dj",
                    "class": "base.tallships.tall_ship_event_instance",
                    "friendly_name": "Mutiny on the Bounty",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.tallships.tall_ship.events_participated_in",
                    "friendly_name": "Events participated in"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.tallships.tall_ship . \nVALUES ?x1 { :m.0j2dj } \n?x0 :base.tallships.tall_ship.events_participated_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.tallships.tall_ship (JOIN base.tallships.tall_ship.events_participated_in m.0j2dj))",
        "program": "step1:(JOIN base.tallships.tall_ship.events_participated_in m.0j2dj)[SEP]step2:(AND base.tallships.tall_ship step1)[SEP]"
    },
    {
        "qid": 385000500,
        "question": "what was the name of the ship in mutiny on the bounty? The linked entity is Mutiny on the Bounty (m.0j2dj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mxdps",
                "entity_name": "HMAV Bounty"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.tallships.tall_ship",
                    "class": "base.tallships.tall_ship",
                    "friendly_name": "Tall ship",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0j2dj",
                    "class": "base.tallships.tall_ship_event_instance",
                    "friendly_name": "Mutiny on the Bounty",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.tallships.tall_ship.events_participated_in",
                    "friendly_name": "Events participated in"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.tallships.tall_ship . \nVALUES ?x1 { :m.0j2dj } \n?x0 :base.tallships.tall_ship.events_participated_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.tallships.tall_ship (JOIN base.tallships.tall_ship.events_participated_in m.0j2dj))",
        "program": "step1:(JOIN base.tallships.tall_ship.events_participated_in m.0j2dj)[SEP]step2:(AND base.tallships.tall_ship step1)[SEP]"
    },
    {
        "qid": 387000000,
        "question": "what scope of organization does federal bureau of investigation have? The linked entity is Federal Bureau of Investigation (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "Federal Bureau of Investigation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000001,
        "question": "what scope of organization does fbi have? The linked entity is fbi (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "fbi",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000002,
        "question": "what scope of organization does federal bureau of investigations have? The linked entity is federal bureau of investigations (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "federal bureau of investigations",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000100,
        "question": "which country does the federal bureau of investigation serve? The linked entity is Federal Bureau of Investigation (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "Federal Bureau of Investigation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000101,
        "question": "which country does the fbi serve? The linked entity is fbi (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "fbi",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000102,
        "question": "which country does the federal bureau of investigations serve? The linked entity is federal bureau of investigations (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "federal bureau of investigations",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000200,
        "question": "what areas does the federal bureau of investigation serve? The linked entity is Federal Bureau of Investigation (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "Federal Bureau of Investigation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000201,
        "question": "what areas does the fbi serve? The linked entity is fbi (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "fbi",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000202,
        "question": "what areas does the federal bureau of investigations serve? The linked entity is federal bureau of investigations (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "federal bureau of investigations",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000300,
        "question": "which are is the federal bureau of investigation responsible for? The linked entity is Federal Bureau of Investigation (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "Federal Bureau of Investigation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000301,
        "question": "which are is the fbi responsible for? The linked entity is fbi (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "fbi",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000302,
        "question": "which are is the federal bureau of investigations responsible for? The linked entity is federal bureau of investigations (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "federal bureau of investigations",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000400,
        "question": "what is the scope of federal bureau of investigation? The linked entity is Federal Bureau of Investigation (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "Federal Bureau of Investigation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000401,
        "question": "what is the scope of fbi? The linked entity is fbi (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "fbi",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000402,
        "question": "what is the scope of federal bureau of investigations? The linked entity is federal bureau of investigations (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "federal bureau of investigations",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000500,
        "question": "at which scope does federal bureau of investigation operate? The linked entity is Federal Bureau of Investigation (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "Federal Bureau of Investigation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000501,
        "question": "at which scope does fbi operate? The linked entity is fbi (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "fbi",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 387000502,
        "question": "at which scope does federal bureau of investigations operate? The linked entity is federal bureau of investigations (m.02_1m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "organization.organization_scope",
                    "class": "organization.organization_scope",
                    "friendly_name": "Organization scope",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02_1m",
                    "class": "government.government_agency",
                    "friendly_name": "federal bureau of investigations",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "organization.organization.geographic_scope",
                    "friendly_name": "Geographic scope"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_scope . \nVALUES ?x1 { :m.02_1m } \n?x1 :organization.organization.geographic_scope ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND organization.organization_scope (JOIN (R organization.organization.geographic_scope) m.02_1m))",
        "program": "step1:(JOIN (R organization.organization.geographic_scope) m.02_1m)[SEP]step2:(AND organization.organization_scope step1)[SEP]"
    },
    {
        "qid": 389000000,
        "question": "in what ward did hachikō die? The linked entity is Hachikō (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "Hachikō",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000001,
        "question": "in what ward did hachiko die? The linked entity is hachiko (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "hachiko",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000100,
        "question": "what is the location of hachikō's death? The linked entity is Hachikō (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "Hachikō",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000101,
        "question": "what is the location of hachiko's death? The linked entity is hachiko (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "hachiko",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000200,
        "question": "where did hachikō die? The linked entity is Hachikō (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "Hachikō",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000201,
        "question": "where did hachiko die? The linked entity is hachiko (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "hachiko",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000300,
        "question": "where was hachikō when he died? The linked entity is Hachikō (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "Hachikō",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000301,
        "question": "where was hachiko when he died? The linked entity is hachiko (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "hachiko",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000400,
        "question": "in which japanese prefecture did hachikō expire in? The linked entity is Hachikō (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "Hachikō",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000401,
        "question": "in which japanese prefecture did hachiko expire in? The linked entity is hachiko (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "hachiko",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000500,
        "question": "in which place did hachikō die? The linked entity is Hachikō (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "Hachikō",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000501,
        "question": "in which place did hachiko die? The linked entity is hachiko (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "hachiko",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000600,
        "question": "what was the site of hachikō 's death? The linked entity is Hachikō (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "Hachikō",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 389000601,
        "question": "what was the site of hachiko 's death? The linked entity is hachiko (m.03c9pl).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012xky",
                "entity_name": "Shibuya"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "location.jp_special_ward",
                    "class": "location.jp_special_ward",
                    "friendly_name": "Special ward of Tokyo, Japan",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03c9pl",
                    "class": "biology.deceased_organism",
                    "friendly_name": "hachiko",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "biology.deceased_organism.place_of_death",
                    "friendly_name": "Place of death"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.jp_special_ward . \nVALUES ?x1 { :m.03c9pl } \n?x1 :biology.deceased_organism.place_of_death ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND location.jp_special_ward (JOIN (R biology.deceased_organism.place_of_death) m.03c9pl))",
        "program": "step1:(JOIN (R biology.deceased_organism.place_of_death) m.03c9pl)[SEP]step2:(AND location.jp_special_ward step1)[SEP]"
    },
    {
        "qid": 390000000,
        "question": "list dog breeds in the toy group. The linked entity is Toy Group (m.05781x).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f57_",
                "entity_name": "Chinese Crested Dog"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ysz",
                "entity_name": "Italian Greyhound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0khhs",
                "entity_name": "Chihuahua"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h0pv",
                "entity_name": "Australian Silky Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s7fj",
                "entity_name": "Shih Tzu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xtxb",
                "entity_name": "Cavalier King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cyl6",
                "entity_name": "Maltese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.035xn5",
                "entity_name": "Toy Fox Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ydd_",
                "entity_name": "Havanese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04nmst",
                "entity_name": "King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xx17",
                "entity_name": "Griffon Bruxellois"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0363rs",
                "entity_name": "Toy Manchester Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0393qn",
                "entity_name": "Phalène"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wfy",
                "entity_name": "Pomeranian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_gx_",
                "entity_name": "Yorkshire Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pkw7",
                "entity_name": "Papillon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03svl1",
                "entity_name": "Miniature Pinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045tty",
                "entity_name": "Japanese Chin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wkx",
                "entity_name": "Pug"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01p2dp",
                "entity_name": "Affenpinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bp0t",
                "entity_name": "Pekingese"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.dog_breed",
                    "class": "base.petbreeds.dog_breed",
                    "friendly_name": "Dog Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05781x",
                    "class": "base.petbreeds.dog_breed_group",
                    "friendly_name": "Toy Group",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.petbreeds.dog_breed_group.dog_breeds",
                    "friendly_name": "Dog Breeds in Group"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.dog_breed . \nVALUES ?x1 { :m.05781x } \n?x1 :base.petbreeds.dog_breed_group.dog_breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.dog_breed (JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x))",
        "program": "step1:(JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x)[SEP]step2:(AND base.petbreeds.dog_breed step1)[SEP]"
    },
    {
        "qid": 390000100,
        "question": "what dogs are there in the toy group? The linked entity is Toy Group (m.05781x).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f57_",
                "entity_name": "Chinese Crested Dog"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ysz",
                "entity_name": "Italian Greyhound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0khhs",
                "entity_name": "Chihuahua"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h0pv",
                "entity_name": "Australian Silky Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s7fj",
                "entity_name": "Shih Tzu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xtxb",
                "entity_name": "Cavalier King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cyl6",
                "entity_name": "Maltese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.035xn5",
                "entity_name": "Toy Fox Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ydd_",
                "entity_name": "Havanese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04nmst",
                "entity_name": "King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xx17",
                "entity_name": "Griffon Bruxellois"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0363rs",
                "entity_name": "Toy Manchester Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0393qn",
                "entity_name": "Phalène"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wfy",
                "entity_name": "Pomeranian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_gx_",
                "entity_name": "Yorkshire Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pkw7",
                "entity_name": "Papillon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03svl1",
                "entity_name": "Miniature Pinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045tty",
                "entity_name": "Japanese Chin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wkx",
                "entity_name": "Pug"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01p2dp",
                "entity_name": "Affenpinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bp0t",
                "entity_name": "Pekingese"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.dog_breed",
                    "class": "base.petbreeds.dog_breed",
                    "friendly_name": "Dog Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05781x",
                    "class": "base.petbreeds.dog_breed_group",
                    "friendly_name": "Toy Group",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.petbreeds.dog_breed_group.dog_breeds",
                    "friendly_name": "Dog Breeds in Group"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.dog_breed . \nVALUES ?x1 { :m.05781x } \n?x1 :base.petbreeds.dog_breed_group.dog_breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.dog_breed (JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x))",
        "program": "step1:(JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x)[SEP]step2:(AND base.petbreeds.dog_breed step1)[SEP]"
    },
    {
        "qid": 390000200,
        "question": "which dog breeds are included in the toy group? The linked entity is Toy Group (m.05781x).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f57_",
                "entity_name": "Chinese Crested Dog"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ysz",
                "entity_name": "Italian Greyhound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0khhs",
                "entity_name": "Chihuahua"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h0pv",
                "entity_name": "Australian Silky Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s7fj",
                "entity_name": "Shih Tzu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xtxb",
                "entity_name": "Cavalier King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cyl6",
                "entity_name": "Maltese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.035xn5",
                "entity_name": "Toy Fox Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ydd_",
                "entity_name": "Havanese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04nmst",
                "entity_name": "King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xx17",
                "entity_name": "Griffon Bruxellois"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0363rs",
                "entity_name": "Toy Manchester Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0393qn",
                "entity_name": "Phalène"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wfy",
                "entity_name": "Pomeranian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_gx_",
                "entity_name": "Yorkshire Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pkw7",
                "entity_name": "Papillon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03svl1",
                "entity_name": "Miniature Pinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045tty",
                "entity_name": "Japanese Chin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wkx",
                "entity_name": "Pug"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01p2dp",
                "entity_name": "Affenpinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bp0t",
                "entity_name": "Pekingese"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.dog_breed",
                    "class": "base.petbreeds.dog_breed",
                    "friendly_name": "Dog Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05781x",
                    "class": "base.petbreeds.dog_breed_group",
                    "friendly_name": "Toy Group",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.petbreeds.dog_breed_group.dog_breeds",
                    "friendly_name": "Dog Breeds in Group"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.dog_breed . \nVALUES ?x1 { :m.05781x } \n?x1 :base.petbreeds.dog_breed_group.dog_breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.dog_breed (JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x))",
        "program": "step1:(JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x)[SEP]step2:(AND base.petbreeds.dog_breed step1)[SEP]"
    },
    {
        "qid": 390000300,
        "question": "what are all of the dog breeds belonging to the toy group? The linked entity is Toy Group (m.05781x).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f57_",
                "entity_name": "Chinese Crested Dog"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ysz",
                "entity_name": "Italian Greyhound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0khhs",
                "entity_name": "Chihuahua"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h0pv",
                "entity_name": "Australian Silky Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s7fj",
                "entity_name": "Shih Tzu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xtxb",
                "entity_name": "Cavalier King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cyl6",
                "entity_name": "Maltese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.035xn5",
                "entity_name": "Toy Fox Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ydd_",
                "entity_name": "Havanese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04nmst",
                "entity_name": "King Charles Spaniel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xx17",
                "entity_name": "Griffon Bruxellois"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0363rs",
                "entity_name": "Toy Manchester Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0393qn",
                "entity_name": "Phalène"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wfy",
                "entity_name": "Pomeranian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01_gx_",
                "entity_name": "Yorkshire Terrier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pkw7",
                "entity_name": "Papillon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03svl1",
                "entity_name": "Miniature Pinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045tty",
                "entity_name": "Japanese Chin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016wkx",
                "entity_name": "Pug"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01p2dp",
                "entity_name": "Affenpinscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bp0t",
                "entity_name": "Pekingese"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.petbreeds.dog_breed",
                    "class": "base.petbreeds.dog_breed",
                    "friendly_name": "Dog Breed",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05781x",
                    "class": "base.petbreeds.dog_breed_group",
                    "friendly_name": "Toy Group",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.petbreeds.dog_breed_group.dog_breeds",
                    "friendly_name": "Dog Breeds in Group"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.petbreeds.dog_breed . \nVALUES ?x1 { :m.05781x } \n?x1 :base.petbreeds.dog_breed_group.dog_breeds ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.petbreeds.dog_breed (JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x))",
        "program": "step1:(JOIN (R base.petbreeds.dog_breed_group.dog_breeds) m.05781x)[SEP]step2:(AND base.petbreeds.dog_breed step1)[SEP]"
    },
    {
        "qid": 393000000,
        "question": "which drugs for animals contain gold? The linked entity is Gold (m.025rs2z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h32h4",
                "entity_name": "Sodium aurothiomalate"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.veterinarymedicine.veterinary_drug",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "veterinary drug",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025rs2z",
                    "class": "medicine.drug_ingredient",
                    "friendly_name": "Gold",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.drug.active_moieties",
                    "friendly_name": "Active moieties"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.veterinarymedicine.veterinary_drug . \nVALUES ?x1 { :m.025rs2z } \n?x0 :medicine.drug.active_moieties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.veterinarymedicine.veterinary_drug (JOIN medicine.drug.active_moieties m.025rs2z))",
        "program": "step1:(JOIN medicine.drug.active_moieties m.025rs2z)[SEP]step2:(AND base.veterinarymedicine.veterinary_drug step1)[SEP]"
    },
    {
        "qid": 393000100,
        "question": "what veterinary drugs have gold as active moiety? The linked entity is Gold (m.025rs2z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h32h4",
                "entity_name": "Sodium aurothiomalate"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.veterinarymedicine.veterinary_drug",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "veterinary drug",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025rs2z",
                    "class": "medicine.drug_ingredient",
                    "friendly_name": "Gold",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.drug.active_moieties",
                    "friendly_name": "Active moieties"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.veterinarymedicine.veterinary_drug . \nVALUES ?x1 { :m.025rs2z } \n?x0 :medicine.drug.active_moieties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.veterinarymedicine.veterinary_drug (JOIN medicine.drug.active_moieties m.025rs2z))",
        "program": "step1:(JOIN medicine.drug.active_moieties m.025rs2z)[SEP]step2:(AND base.veterinarymedicine.veterinary_drug step1)[SEP]"
    },
    {
        "qid": 393000200,
        "question": "gold is an active moiety in what veterinary drugs? The linked entity is Gold (m.025rs2z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h32h4",
                "entity_name": "Sodium aurothiomalate"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.veterinarymedicine.veterinary_drug",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "veterinary drug",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025rs2z",
                    "class": "medicine.drug_ingredient",
                    "friendly_name": "Gold",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.drug.active_moieties",
                    "friendly_name": "Active moieties"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.veterinarymedicine.veterinary_drug . \nVALUES ?x1 { :m.025rs2z } \n?x0 :medicine.drug.active_moieties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.veterinarymedicine.veterinary_drug (JOIN medicine.drug.active_moieties m.025rs2z))",
        "program": "step1:(JOIN medicine.drug.active_moieties m.025rs2z)[SEP]step2:(AND base.veterinarymedicine.veterinary_drug step1)[SEP]"
    },
    {
        "qid": 393000300,
        "question": "which animal medications have gold as an active ingredient? The linked entity is Gold (m.025rs2z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h32h4",
                "entity_name": "Sodium aurothiomalate"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.veterinarymedicine.veterinary_drug",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "veterinary drug",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025rs2z",
                    "class": "medicine.drug_ingredient",
                    "friendly_name": "Gold",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.drug.active_moieties",
                    "friendly_name": "Active moieties"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.veterinarymedicine.veterinary_drug . \nVALUES ?x1 { :m.025rs2z } \n?x0 :medicine.drug.active_moieties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.veterinarymedicine.veterinary_drug (JOIN medicine.drug.active_moieties m.025rs2z))",
        "program": "step1:(JOIN medicine.drug.active_moieties m.025rs2z)[SEP]step2:(AND base.veterinarymedicine.veterinary_drug step1)[SEP]"
    },
    {
        "qid": 393000400,
        "question": "which veterinary drugs use gold as an ingredient? The linked entity is Gold (m.025rs2z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h32h4",
                "entity_name": "Sodium aurothiomalate"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.veterinarymedicine.veterinary_drug",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "veterinary drug",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025rs2z",
                    "class": "medicine.drug_ingredient",
                    "friendly_name": "Gold",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.drug.active_moieties",
                    "friendly_name": "Active moieties"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.veterinarymedicine.veterinary_drug . \nVALUES ?x1 { :m.025rs2z } \n?x0 :medicine.drug.active_moieties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.veterinarymedicine.veterinary_drug (JOIN medicine.drug.active_moieties m.025rs2z))",
        "program": "step1:(JOIN medicine.drug.active_moieties m.025rs2z)[SEP]step2:(AND base.veterinarymedicine.veterinary_drug step1)[SEP]"
    },
    {
        "qid": 393000500,
        "question": "of which veterinary drug is gold the active moiety? The linked entity is Gold (m.025rs2z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h32h4",
                "entity_name": "Sodium aurothiomalate"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.veterinarymedicine.veterinary_drug",
                    "class": "base.veterinarymedicine.veterinary_drug",
                    "friendly_name": "veterinary drug",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.025rs2z",
                    "class": "medicine.drug_ingredient",
                    "friendly_name": "Gold",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.drug.active_moieties",
                    "friendly_name": "Active moieties"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.veterinarymedicine.veterinary_drug . \nVALUES ?x1 { :m.025rs2z } \n?x0 :medicine.drug.active_moieties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.veterinarymedicine.veterinary_drug (JOIN medicine.drug.active_moieties m.025rs2z))",
        "program": "step1:(JOIN medicine.drug.active_moieties m.025rs2z)[SEP]step2:(AND base.veterinarymedicine.veterinary_drug step1)[SEP]"
    },
    {
        "qid": 394000000,
        "question": "what aircrafts does general motors make? The linked entity is General Motors (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "General Motors",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000001,
        "question": "what aircrafts does gm make? The linked entity is gm (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "gm",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000002,
        "question": "what aircrafts does general motors corporation make? The linked entity is general motors corporation (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "general motors corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000100,
        "question": "find aircraft models made by general motors. The linked entity is General Motors (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "General Motors",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000101,
        "question": "find aircraft models made by gm. The linked entity is gm (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "gm",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000102,
        "question": "find aircraft models made by general motors corporation. The linked entity is general motors corporation (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "general motors corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000200,
        "question": "what aircraft models does general motors manufacture? The linked entity is General Motors (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "General Motors",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000201,
        "question": "what aircraft models does gm manufacture? The linked entity is gm (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "gm",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000202,
        "question": "what aircraft models does general motors corporation manufacture? The linked entity is general motors corporation (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "general motors corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000300,
        "question": "what aircraft models are manufactured by general motors? The linked entity is General Motors (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "General Motors",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000301,
        "question": "what aircraft models are manufactured by gm? The linked entity is gm (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "gm",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000302,
        "question": "what aircraft models are manufactured by general motors corporation? The linked entity is general motors corporation (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "general motors corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000400,
        "question": "search for the models of aircraft from general motors. The linked entity is General Motors (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "General Motors",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000401,
        "question": "search for the models of aircraft from gm. The linked entity is gm (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "gm",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 394000402,
        "question": "search for the models of aircraft from general motors corporation. The linked entity is general motors corporation (m.035nm).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jphj",
                "entity_name": "Grumman TBF Avenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sw0s",
                "entity_name": "Fisher P-75 Eagle"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.035nm",
                    "class": "aviation.aircraft_manufacturer",
                    "friendly_name": "general motors corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.aircraft_manufacturer.aircraft_models_made",
                    "friendly_name": "Aircraft Models Manufactured"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.035nm } \n?x1 :aviation.aircraft_manufacturer.aircraft_models_made ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm))",
        "program": "step1:(JOIN (R aviation.aircraft_manufacturer.aircraft_models_made) m.035nm)[SEP]step2:(AND aviation.aircraft_model step1)[SEP]"
    },
    {
        "qid": 396000000,
        "question": "what passes are there in himalayas? The linked entity is Himalayas (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "Himalayas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000001,
        "question": "what passes are there in himalaya? The linked entity is himalaya (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "himalaya",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000100,
        "question": "what passes are available in himalayas? The linked entity is Himalayas (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "Himalayas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000101,
        "question": "what passes are available in himalaya? The linked entity is himalaya (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "himalaya",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000200,
        "question": "what are the names of the mountain passes in the himalayas? The linked entity is Himalayas (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "Himalayas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000201,
        "question": "what are the names of the mountain passes in the himalaya? The linked entity is himalaya (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "himalaya",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000300,
        "question": "which mountain passes go through himalayas? The linked entity is Himalayas (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "Himalayas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000301,
        "question": "which mountain passes go through himalaya? The linked entity is himalaya (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "himalaya",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000400,
        "question": "what is the name of the mountain passes that travel through the himalayas? The linked entity is Himalayas (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "Himalayas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000401,
        "question": "what is the name of the mountain passes that travel through the himalaya? The linked entity is himalaya (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "himalaya",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000500,
        "question": "what are the mountain passes that traverse the himalayas? The linked entity is Himalayas (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "Himalayas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000501,
        "question": "what are the mountain passes that traverse the himalaya? The linked entity is himalaya (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "himalaya",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000600,
        "question": "what are the major mountain passes of the himalayas? The linked entity is Himalayas (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "Himalayas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 396000601,
        "question": "what are the major mountain passes of the himalaya? The linked entity is himalaya (m.09glw).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kmqp",
                "entity_name": "Banihal Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l_bh",
                "entity_name": "Rohtang Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fg5l",
                "entity_name": "North Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm3dt",
                "entity_name": "Bara-lacha la"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w57k",
                "entity_name": "Nathu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f91mg",
                "entity_name": "Lipulekh Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wh68",
                "entity_name": "Chang La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lg6h6",
                "entity_name": "Fotu La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpp0y",
                "entity_name": "Namika La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071b48",
                "entity_name": "South Col"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc7x0",
                "entity_name": "Goecha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh5cg",
                "entity_name": "Marsimik La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6ltrv",
                "entity_name": "Araniko Highway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086nyx",
                "entity_name": "Debsa Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r8xt",
                "entity_name": "Sin La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fgl4",
                "entity_name": "Khardung La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f939n",
                "entity_name": "Dongkha La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lgb7n",
                "entity_name": "Zoji La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwp7d6",
                "entity_name": "Kora La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z3d_",
                "entity_name": "Traill's Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09s2vx",
                "entity_name": "Nama Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w56h",
                "entity_name": "Jelep La"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0278n50",
                "entity_name": "Mohan Pass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb7fh",
                "entity_name": "Taglang La"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.mountain_pass",
                    "class": "geography.mountain_pass",
                    "friendly_name": "Mountain pass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09glw",
                    "class": "geography.mountain_range",
                    "friendly_name": "himalaya",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.mountain_pass.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_pass . \nVALUES ?x1 { :m.09glw } \n?x0 :geography.mountain_pass.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND geography.mountain_pass (JOIN geography.mountain_pass.range m.09glw))",
        "program": "step1:(JOIN geography.mountain_pass.range m.09glw)[SEP]step2:(AND geography.mountain_pass step1)[SEP]"
    },
    {
        "qid": 397000000,
        "question": "the galactic language is spoken by which species? The linked entity is Galactic (m.04krrq2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgw9r",
                "entity_name": "Homo sapiens"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.character_species",
                    "class": "fictional_universe.character_species",
                    "friendly_name": "Character Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04krrq2",
                    "class": "fictional_universe.fictional_language",
                    "friendly_name": "Galactic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_language.spoken_by",
                    "friendly_name": "Spoken by character species"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.04krrq2 } \n?x1 :fictional_universe.fictional_language.spoken_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.character_species (JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2))",
        "program": "step1:(JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2)[SEP]step2:(AND fictional_universe.character_species step1)[SEP]"
    },
    {
        "qid": 397000100,
        "question": "what are the species that speak the language of galactic? The linked entity is Galactic (m.04krrq2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgw9r",
                "entity_name": "Homo sapiens"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.character_species",
                    "class": "fictional_universe.character_species",
                    "friendly_name": "Character Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04krrq2",
                    "class": "fictional_universe.fictional_language",
                    "friendly_name": "Galactic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_language.spoken_by",
                    "friendly_name": "Spoken by character species"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.04krrq2 } \n?x1 :fictional_universe.fictional_language.spoken_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.character_species (JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2))",
        "program": "step1:(JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2)[SEP]step2:(AND fictional_universe.character_species step1)[SEP]"
    },
    {
        "qid": 397000200,
        "question": "in asimov's \"foundation\" series, the fictional galactic language is spoken by which species? The linked entity is Galactic (m.04krrq2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgw9r",
                "entity_name": "Homo sapiens"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.character_species",
                    "class": "fictional_universe.character_species",
                    "friendly_name": "Character Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04krrq2",
                    "class": "fictional_universe.fictional_language",
                    "friendly_name": "Galactic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_language.spoken_by",
                    "friendly_name": "Spoken by character species"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.04krrq2 } \n?x1 :fictional_universe.fictional_language.spoken_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.character_species (JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2))",
        "program": "step1:(JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2)[SEP]step2:(AND fictional_universe.character_species step1)[SEP]"
    },
    {
        "qid": 397000300,
        "question": "which species speak the galactic language? The linked entity is Galactic (m.04krrq2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgw9r",
                "entity_name": "Homo sapiens"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.character_species",
                    "class": "fictional_universe.character_species",
                    "friendly_name": "Character Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04krrq2",
                    "class": "fictional_universe.fictional_language",
                    "friendly_name": "Galactic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_language.spoken_by",
                    "friendly_name": "Spoken by character species"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.04krrq2 } \n?x1 :fictional_universe.fictional_language.spoken_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.character_species (JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2))",
        "program": "step1:(JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2)[SEP]step2:(AND fictional_universe.character_species step1)[SEP]"
    },
    {
        "qid": 397000400,
        "question": "which types of intelligent life forms speak the language known as galactic in asimov's foundation series? The linked entity is Galactic (m.04krrq2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgw9r",
                "entity_name": "Homo sapiens"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.character_species",
                    "class": "fictional_universe.character_species",
                    "friendly_name": "Character Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04krrq2",
                    "class": "fictional_universe.fictional_language",
                    "friendly_name": "Galactic",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_language.spoken_by",
                    "friendly_name": "Spoken by character species"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.04krrq2 } \n?x1 :fictional_universe.fictional_language.spoken_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND fictional_universe.character_species (JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2))",
        "program": "step1:(JOIN (R fictional_universe.fictional_language.spoken_by) m.04krrq2)[SEP]step2:(AND fictional_universe.character_species step1)[SEP]"
    },
    {
        "qid": 398000000,
        "question": "who produces crown royal? The linked entity is Crown Royal (m.05j9r4).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.022cdf",
                "entity_name": "Diageo"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_blender",
                    "class": "distilled_spirits.spirit_blender",
                    "friendly_name": "Spirit product manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05j9r4",
                    "class": "distilled_spirits.blended_spirit",
                    "friendly_name": "Crown Royal",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.blended_spirit.blender",
                    "friendly_name": "Blender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_blender . \nVALUES ?x1 { :m.05j9r4 } \n?x1 :distilled_spirits.blended_spirit.blender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_blender (JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4))",
        "program": "step1:(JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4)[SEP]step2:(AND distilled_spirits.spirit_blender step1)[SEP]"
    },
    {
        "qid": 398000100,
        "question": "find companies that blends crown royal. The linked entity is Crown Royal (m.05j9r4).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.022cdf",
                "entity_name": "Diageo"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_blender",
                    "class": "distilled_spirits.spirit_blender",
                    "friendly_name": "Spirit product manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05j9r4",
                    "class": "distilled_spirits.blended_spirit",
                    "friendly_name": "Crown Royal",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.blended_spirit.blender",
                    "friendly_name": "Blender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_blender . \nVALUES ?x1 { :m.05j9r4 } \n?x1 :distilled_spirits.blended_spirit.blender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_blender (JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4))",
        "program": "step1:(JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4)[SEP]step2:(AND distilled_spirits.spirit_blender step1)[SEP]"
    },
    {
        "qid": 398000200,
        "question": "who was crown royal produced by? The linked entity is Crown Royal (m.05j9r4).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.022cdf",
                "entity_name": "Diageo"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_blender",
                    "class": "distilled_spirits.spirit_blender",
                    "friendly_name": "Spirit product manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05j9r4",
                    "class": "distilled_spirits.blended_spirit",
                    "friendly_name": "Crown Royal",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.blended_spirit.blender",
                    "friendly_name": "Blender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_blender . \nVALUES ?x1 { :m.05j9r4 } \n?x1 :distilled_spirits.blended_spirit.blender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_blender (JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4))",
        "program": "step1:(JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4)[SEP]step2:(AND distilled_spirits.spirit_blender step1)[SEP]"
    },
    {
        "qid": 398000300,
        "question": "who is the manufacturer of crown royal? The linked entity is Crown Royal (m.05j9r4).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.022cdf",
                "entity_name": "Diageo"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_blender",
                    "class": "distilled_spirits.spirit_blender",
                    "friendly_name": "Spirit product manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05j9r4",
                    "class": "distilled_spirits.blended_spirit",
                    "friendly_name": "Crown Royal",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.blended_spirit.blender",
                    "friendly_name": "Blender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_blender . \nVALUES ?x1 { :m.05j9r4 } \n?x1 :distilled_spirits.blended_spirit.blender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_blender (JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4))",
        "program": "step1:(JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4)[SEP]step2:(AND distilled_spirits.spirit_blender step1)[SEP]"
    },
    {
        "qid": 398000400,
        "question": "what companies are producing the crown royal whiskey? The linked entity is Crown Royal (m.05j9r4).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.022cdf",
                "entity_name": "Diageo"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "distilled_spirits.spirit_blender",
                    "class": "distilled_spirits.spirit_blender",
                    "friendly_name": "Spirit product manufacturer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05j9r4",
                    "class": "distilled_spirits.blended_spirit",
                    "friendly_name": "Crown Royal",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "distilled_spirits.blended_spirit.blender",
                    "friendly_name": "Blender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.spirit_blender . \nVALUES ?x1 { :m.05j9r4 } \n?x1 :distilled_spirits.blended_spirit.blender ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND distilled_spirits.spirit_blender (JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4))",
        "program": "step1:(JOIN (R distilled_spirits.blended_spirit.blender) m.05j9r4)[SEP]step2:(AND distilled_spirits.spirit_blender step1)[SEP]"
    },
    {
        "qid": 399000000,
        "question": "in which location was the movie juno shot? The linked entity is Juno (m.02rv_dz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.080h2",
                "entity_name": "Vancouver"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_location",
                    "class": "film.film_location",
                    "friendly_name": "Filming location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rv_dz",
                    "class": "base.americancomedy.movie",
                    "friendly_name": "Juno",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "film.film_location.featured_in_films",
                    "friendly_name": "Featured In Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_location . \nVALUES ?x1 { :m.02rv_dz } \n?x0 :film.film_location.featured_in_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND film.film_location (JOIN film.film_location.featured_in_films m.02rv_dz))",
        "program": "step1:(JOIN film.film_location.featured_in_films m.02rv_dz)[SEP]step2:(AND film.film_location step1)[SEP]"
    },
    {
        "qid": 399000100,
        "question": "what location was juno shot at? The linked entity is Juno (m.02rv_dz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.080h2",
                "entity_name": "Vancouver"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_location",
                    "class": "film.film_location",
                    "friendly_name": "Filming location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rv_dz",
                    "class": "base.americancomedy.movie",
                    "friendly_name": "Juno",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "film.film_location.featured_in_films",
                    "friendly_name": "Featured In Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_location . \nVALUES ?x1 { :m.02rv_dz } \n?x0 :film.film_location.featured_in_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND film.film_location (JOIN film.film_location.featured_in_films m.02rv_dz))",
        "program": "step1:(JOIN film.film_location.featured_in_films m.02rv_dz)[SEP]step2:(AND film.film_location step1)[SEP]"
    },
    {
        "qid": 399000200,
        "question": "where was juno shot? The linked entity is Juno (m.02rv_dz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.080h2",
                "entity_name": "Vancouver"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_location",
                    "class": "film.film_location",
                    "friendly_name": "Filming location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rv_dz",
                    "class": "base.americancomedy.movie",
                    "friendly_name": "Juno",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "film.film_location.featured_in_films",
                    "friendly_name": "Featured In Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_location . \nVALUES ?x1 { :m.02rv_dz } \n?x0 :film.film_location.featured_in_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND film.film_location (JOIN film.film_location.featured_in_films m.02rv_dz))",
        "program": "step1:(JOIN film.film_location.featured_in_films m.02rv_dz)[SEP]step2:(AND film.film_location step1)[SEP]"
    },
    {
        "qid": 399000300,
        "question": "what city was juno shot in? The linked entity is Juno (m.02rv_dz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.080h2",
                "entity_name": "Vancouver"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_location",
                    "class": "film.film_location",
                    "friendly_name": "Filming location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rv_dz",
                    "class": "base.americancomedy.movie",
                    "friendly_name": "Juno",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "film.film_location.featured_in_films",
                    "friendly_name": "Featured In Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_location . \nVALUES ?x1 { :m.02rv_dz } \n?x0 :film.film_location.featured_in_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND film.film_location (JOIN film.film_location.featured_in_films m.02rv_dz))",
        "program": "step1:(JOIN film.film_location.featured_in_films m.02rv_dz)[SEP]step2:(AND film.film_location step1)[SEP]"
    },
    {
        "qid": 399000400,
        "question": "what were the set localities for the movie juno? The linked entity is Juno (m.02rv_dz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.080h2",
                "entity_name": "Vancouver"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_location",
                    "class": "film.film_location",
                    "friendly_name": "Filming location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rv_dz",
                    "class": "base.americancomedy.movie",
                    "friendly_name": "Juno",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "film.film_location.featured_in_films",
                    "friendly_name": "Featured In Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_location . \nVALUES ?x1 { :m.02rv_dz } \n?x0 :film.film_location.featured_in_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND film.film_location (JOIN film.film_location.featured_in_films m.02rv_dz))",
        "program": "step1:(JOIN film.film_location.featured_in_films m.02rv_dz)[SEP]step2:(AND film.film_location step1)[SEP]"
    },
    {
        "qid": 399000500,
        "question": "in what location was the footage for the film juno recorded? The linked entity is Juno (m.02rv_dz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.080h2",
                "entity_name": "Vancouver"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_location",
                    "class": "film.film_location",
                    "friendly_name": "Filming location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rv_dz",
                    "class": "base.americancomedy.movie",
                    "friendly_name": "Juno",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "film.film_location.featured_in_films",
                    "friendly_name": "Featured In Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_location . \nVALUES ?x1 { :m.02rv_dz } \n?x0 :film.film_location.featured_in_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND film.film_location (JOIN film.film_location.featured_in_films m.02rv_dz))",
        "program": "step1:(JOIN film.film_location.featured_in_films m.02rv_dz)[SEP]step2:(AND film.film_location step1)[SEP]"
    },
    {
        "qid": 399000600,
        "question": "what is the filming location of juno? The linked entity is Juno (m.02rv_dz).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.080h2",
                "entity_name": "Vancouver"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_location",
                    "class": "film.film_location",
                    "friendly_name": "Filming location",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rv_dz",
                    "class": "base.americancomedy.movie",
                    "friendly_name": "Juno",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "film.film_location.featured_in_films",
                    "friendly_name": "Featured In Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_location . \nVALUES ?x1 { :m.02rv_dz } \n?x0 :film.film_location.featured_in_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND film.film_location (JOIN film.film_location.featured_in_films m.02rv_dz))",
        "program": "step1:(JOIN film.film_location.featured_in_films m.02rv_dz)[SEP]step2:(AND film.film_location step1)[SEP]"
    },
    {
        "qid": 400000000,
        "question": "which surf films has sarah finn served as the casting director? The linked entity is Sarah Finn (m.08mt595).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01snqb",
                "entity_name": "Blue Crush"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.surfing.surf_film",
                    "class": "base.surfing.surf_film",
                    "friendly_name": "Surf Film",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08mt595",
                    "class": "film.film_casting_director",
                    "friendly_name": "Sarah Finn",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_casting_director.films_casting_directed",
                    "friendly_name": "Films casting directed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.surfing.surf_film . \nVALUES ?x1 { :m.08mt595 } \n?x1 :film.film_casting_director.films_casting_directed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.surfing.surf_film (JOIN (R film.film_casting_director.films_casting_directed) m.08mt595))",
        "program": "step1:(JOIN (R film.film_casting_director.films_casting_directed) m.08mt595)[SEP]step2:(AND base.surfing.surf_film step1)[SEP]"
    },
    {
        "qid": 400000100,
        "question": "of which surf films did sarah finn direct the casting? The linked entity is Sarah Finn (m.08mt595).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01snqb",
                "entity_name": "Blue Crush"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.surfing.surf_film",
                    "class": "base.surfing.surf_film",
                    "friendly_name": "Surf Film",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08mt595",
                    "class": "film.film_casting_director",
                    "friendly_name": "Sarah Finn",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_casting_director.films_casting_directed",
                    "friendly_name": "Films casting directed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.surfing.surf_film . \nVALUES ?x1 { :m.08mt595 } \n?x1 :film.film_casting_director.films_casting_directed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.surfing.surf_film (JOIN (R film.film_casting_director.films_casting_directed) m.08mt595))",
        "program": "step1:(JOIN (R film.film_casting_director.films_casting_directed) m.08mt595)[SEP]step2:(AND base.surfing.surf_film step1)[SEP]"
    },
    {
        "qid": 400000200,
        "question": "for which surfing films has sarah finn been the casting director? The linked entity is Sarah Finn (m.08mt595).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01snqb",
                "entity_name": "Blue Crush"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.surfing.surf_film",
                    "class": "base.surfing.surf_film",
                    "friendly_name": "Surf Film",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08mt595",
                    "class": "film.film_casting_director",
                    "friendly_name": "Sarah Finn",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_casting_director.films_casting_directed",
                    "friendly_name": "Films casting directed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.surfing.surf_film . \nVALUES ?x1 { :m.08mt595 } \n?x1 :film.film_casting_director.films_casting_directed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.surfing.surf_film (JOIN (R film.film_casting_director.films_casting_directed) m.08mt595))",
        "program": "step1:(JOIN (R film.film_casting_director.films_casting_directed) m.08mt595)[SEP]step2:(AND base.surfing.surf_film step1)[SEP]"
    },
    {
        "qid": 400000300,
        "question": "sarah finn was the casting director of which surf film? The linked entity is Sarah Finn (m.08mt595).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01snqb",
                "entity_name": "Blue Crush"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.surfing.surf_film",
                    "class": "base.surfing.surf_film",
                    "friendly_name": "Surf Film",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08mt595",
                    "class": "film.film_casting_director",
                    "friendly_name": "Sarah Finn",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_casting_director.films_casting_directed",
                    "friendly_name": "Films casting directed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.surfing.surf_film . \nVALUES ?x1 { :m.08mt595 } \n?x1 :film.film_casting_director.films_casting_directed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.surfing.surf_film (JOIN (R film.film_casting_director.films_casting_directed) m.08mt595))",
        "program": "step1:(JOIN (R film.film_casting_director.films_casting_directed) m.08mt595)[SEP]step2:(AND base.surfing.surf_film step1)[SEP]"
    },
    {
        "qid": 400000400,
        "question": "for which films pertaining to surfing has sarah finn served as the casting director? The linked entity is Sarah Finn (m.08mt595).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01snqb",
                "entity_name": "Blue Crush"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.surfing.surf_film",
                    "class": "base.surfing.surf_film",
                    "friendly_name": "Surf Film",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08mt595",
                    "class": "film.film_casting_director",
                    "friendly_name": "Sarah Finn",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_casting_director.films_casting_directed",
                    "friendly_name": "Films casting directed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.surfing.surf_film . \nVALUES ?x1 { :m.08mt595 } \n?x1 :film.film_casting_director.films_casting_directed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.surfing.surf_film (JOIN (R film.film_casting_director.films_casting_directed) m.08mt595))",
        "program": "step1:(JOIN (R film.film_casting_director.films_casting_directed) m.08mt595)[SEP]step2:(AND base.surfing.surf_film step1)[SEP]"
    },
    {
        "qid": 400000500,
        "question": "which films has sarah finn worked on as casting director that have to do with surfing? The linked entity is Sarah Finn (m.08mt595).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01snqb",
                "entity_name": "Blue Crush"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.surfing.surf_film",
                    "class": "base.surfing.surf_film",
                    "friendly_name": "Surf Film",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08mt595",
                    "class": "film.film_casting_director",
                    "friendly_name": "Sarah Finn",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_casting_director.films_casting_directed",
                    "friendly_name": "Films casting directed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.surfing.surf_film . \nVALUES ?x1 { :m.08mt595 } \n?x1 :film.film_casting_director.films_casting_directed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.surfing.surf_film (JOIN (R film.film_casting_director.films_casting_directed) m.08mt595))",
        "program": "step1:(JOIN (R film.film_casting_director.films_casting_directed) m.08mt595)[SEP]step2:(AND base.surfing.surf_film step1)[SEP]"
    },
    {
        "qid": 400000600,
        "question": "what are the surf films of which the casting director is sarah finn? The linked entity is Sarah Finn (m.08mt595).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01snqb",
                "entity_name": "Blue Crush"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.surfing.surf_film",
                    "class": "base.surfing.surf_film",
                    "friendly_name": "Surf Film",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08mt595",
                    "class": "film.film_casting_director",
                    "friendly_name": "Sarah Finn",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_casting_director.films_casting_directed",
                    "friendly_name": "Films casting directed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.surfing.surf_film . \nVALUES ?x1 { :m.08mt595 } \n?x1 :film.film_casting_director.films_casting_directed ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "s_expression": "(AND base.surfing.surf_film (JOIN (R film.film_casting_director.films_casting_directed) m.08mt595))",
        "program": "step1:(JOIN (R film.film_casting_director.films_casting_directed) m.08mt595)[SEP]step2:(AND base.surfing.surf_film step1)[SEP]"
    },
    {
        "qid": 404000000,
        "question": "what are the protected species that are critically endangered? The linked entity is Critically Endangered (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "Critically Endangered",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000001,
        "question": "what are the protected species that are cr? The linked entity is cr (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "cr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000100,
        "question": "which species are on the critically endangered list? The linked entity is Critically Endangered (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "Critically Endangered",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000101,
        "question": "which species are on the cr list? The linked entity is cr (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "cr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000200,
        "question": "list critically endangered species. The linked entity is Critically Endangered (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "Critically Endangered",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000201,
        "question": "list cr species. The linked entity is cr (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "cr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000300,
        "question": "list the species that is considered to be critically endangered. The linked entity is Critically Endangered (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "Critically Endangered",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000301,
        "question": "list the species that is considered to be cr. The linked entity is cr (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "cr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000400,
        "question": "which species are critically endangered? The linked entity is Critically Endangered (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "Critically Endangered",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000401,
        "question": "which species are cr? The linked entity is cr (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "cr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000500,
        "question": "critically endangered are what species? The linked entity is Critically Endangered (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "Critically Endangered",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 404000501,
        "question": "cr are what species? The linked entity is cr (m.0cgnb7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f89mk",
                "entity_name": "Cuban kite"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.conservation.protected_species",
                    "class": "base.conservation.protected_species",
                    "friendly_name": "Protected Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.conservation.protected_species_status",
                    "class": "base.conservation.protected_species_status",
                    "friendly_name": "Protected Species Status",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cgnb7",
                    "class": "base.conservation.conservation_status_designation",
                    "friendly_name": "cr",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.conservation.protected_species_status.protected_species",
                    "friendly_name": "Protected Species"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.conservation.protected_species_status.status_designation",
                    "friendly_name": "Status Designation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.conservation.protected_species . \n?x1 :type.object.type :base.conservation.protected_species_status . \nVALUES ?x2 { :m.0cgnb7 } \n?x1 :base.conservation.protected_species_status.protected_species ?x0 . \n?x1 :base.conservation.protected_species_status.status_designation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.conservation.protected_species (JOIN (R base.conservation.protected_species_status.protected_species) (JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)))",
        "program": "step1:(JOIN base.conservation.protected_species_status.status_designation m.0cgnb7)[SEP]step2:(JOIN (R base.conservation.protected_species_status.protected_species) step1)[SEP]step3:(AND base.conservation.protected_species step2)[SEP]"
    },
    {
        "qid": 406000000,
        "question": "which country in the olympics was represented by lance armstrong? The linked entity is Lance Armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "Lance Armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000001,
        "question": "which country in the olympics was represented by armstrong? The linked entity is armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000100,
        "question": "lance armstrong was an olympic athlete for which nation? The linked entity is Lance Armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "Lance Armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000101,
        "question": "armstrong was an olympic athlete for which nation? The linked entity is armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000200,
        "question": "in the olympic, which country did lance armstrong represent? The linked entity is Lance Armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "Lance Armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000201,
        "question": "in the olympic, which country did armstrong represent? The linked entity is armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000300,
        "question": "which country did lance armstrong represent in the olympics? The linked entity is Lance Armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "Lance Armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000301,
        "question": "which country did armstrong represent in the olympics? The linked entity is armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000400,
        "question": "lance armstrong represented which country in olympics? The linked entity is Lance Armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "Lance Armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 406000401,
        "question": "armstrong represented which country in olympics? The linked entity is armstrong (m.0hfwb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c7w0",
                "entity_name": "United States of America"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "olympics.olympic_participating_country",
                    "class": "olympics.olympic_participating_country",
                    "friendly_name": "Olympic participating country",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "olympics.olympic_medal_honor",
                    "class": "olympics.olympic_medal_honor",
                    "friendly_name": "Olympic athlete/competition relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hfwb",
                    "class": "olympics.olympic_athlete",
                    "friendly_name": "armstrong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "olympics.olympic_medal_honor.country",
                    "friendly_name": "Country"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "olympics.olympic_medal_honor.medalist",
                    "friendly_name": "Athlete"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_participating_country . \n?x1 :type.object.type :olympics.olympic_medal_honor . \nVALUES ?x2 { :m.0hfwb } \n?x1 :olympics.olympic_medal_honor.country ?x0 . \n?x1 :olympics.olympic_medal_honor.medalist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND olympics.olympic_participating_country (JOIN (R olympics.olympic_medal_honor.country) (JOIN olympics.olympic_medal_honor.medalist m.0hfwb)))",
        "program": "step1:(JOIN olympics.olympic_medal_honor.medalist m.0hfwb)[SEP]step2:(JOIN (R olympics.olympic_medal_honor.country) step1)[SEP]step3:(AND olympics.olympic_participating_country step2)[SEP]"
    },
    {
        "qid": 409000000,
        "question": "who owns the casino having the house of blues show? The linked entity is House of Blues (m.0525fd).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r5dz",
                "entity_name": "Caesars Entertainment Corporation"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino_owner",
                    "class": "base.casinos.casino_owner",
                    "friendly_name": "Casino owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0525fd",
                    "class": "base.casinos.casino_show",
                    "friendly_name": "House of Blues",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.casinos.casino.shows",
                    "friendly_name": "Shows"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.casinos.casino.owner",
                    "friendly_name": "Owner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino_owner . \n?x1 :type.object.type :base.casinos.casino . \nVALUES ?x2 { :m.0525fd } \n?x1 :base.casinos.casino.shows ?x2 . \n?x1 :base.casinos.casino.owner ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.casinos.casino_owner (JOIN (R base.casinos.casino.owner) (JOIN base.casinos.casino.shows m.0525fd)))",
        "program": "step1:(JOIN base.casinos.casino.shows m.0525fd)[SEP]step2:(JOIN (R base.casinos.casino.owner) step1)[SEP]step3:(AND base.casinos.casino_owner step2)[SEP]"
    },
    {
        "qid": 409000100,
        "question": "the casino having the house of blues show is owned by who? The linked entity is House of Blues (m.0525fd).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r5dz",
                "entity_name": "Caesars Entertainment Corporation"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino_owner",
                    "class": "base.casinos.casino_owner",
                    "friendly_name": "Casino owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0525fd",
                    "class": "base.casinos.casino_show",
                    "friendly_name": "House of Blues",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.casinos.casino.shows",
                    "friendly_name": "Shows"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.casinos.casino.owner",
                    "friendly_name": "Owner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino_owner . \n?x1 :type.object.type :base.casinos.casino . \nVALUES ?x2 { :m.0525fd } \n?x1 :base.casinos.casino.shows ?x2 . \n?x1 :base.casinos.casino.owner ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.casinos.casino_owner (JOIN (R base.casinos.casino.owner) (JOIN base.casinos.casino.shows m.0525fd)))",
        "program": "step1:(JOIN base.casinos.casino.shows m.0525fd)[SEP]step2:(JOIN (R base.casinos.casino.owner) step1)[SEP]step3:(AND base.casinos.casino_owner step2)[SEP]"
    },
    {
        "qid": 409000200,
        "question": "who is the owner of the casino where the house of blues show is performed? The linked entity is House of Blues (m.0525fd).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r5dz",
                "entity_name": "Caesars Entertainment Corporation"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino_owner",
                    "class": "base.casinos.casino_owner",
                    "friendly_name": "Casino owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0525fd",
                    "class": "base.casinos.casino_show",
                    "friendly_name": "House of Blues",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.casinos.casino.shows",
                    "friendly_name": "Shows"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.casinos.casino.owner",
                    "friendly_name": "Owner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino_owner . \n?x1 :type.object.type :base.casinos.casino . \nVALUES ?x2 { :m.0525fd } \n?x1 :base.casinos.casino.shows ?x2 . \n?x1 :base.casinos.casino.owner ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.casinos.casino_owner (JOIN (R base.casinos.casino.owner) (JOIN base.casinos.casino.shows m.0525fd)))",
        "program": "step1:(JOIN base.casinos.casino.shows m.0525fd)[SEP]step2:(JOIN (R base.casinos.casino.owner) step1)[SEP]step3:(AND base.casinos.casino_owner step2)[SEP]"
    },
    {
        "qid": 409000300,
        "question": "who is the owner of the casino which showcases the house of blues? The linked entity is House of Blues (m.0525fd).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r5dz",
                "entity_name": "Caesars Entertainment Corporation"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino_owner",
                    "class": "base.casinos.casino_owner",
                    "friendly_name": "Casino owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0525fd",
                    "class": "base.casinos.casino_show",
                    "friendly_name": "House of Blues",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.casinos.casino.shows",
                    "friendly_name": "Shows"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.casinos.casino.owner",
                    "friendly_name": "Owner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino_owner . \n?x1 :type.object.type :base.casinos.casino . \nVALUES ?x2 { :m.0525fd } \n?x1 :base.casinos.casino.shows ?x2 . \n?x1 :base.casinos.casino.owner ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.casinos.casino_owner (JOIN (R base.casinos.casino.owner) (JOIN base.casinos.casino.shows m.0525fd)))",
        "program": "step1:(JOIN base.casinos.casino.shows m.0525fd)[SEP]step2:(JOIN (R base.casinos.casino.owner) step1)[SEP]step3:(AND base.casinos.casino_owner step2)[SEP]"
    },
    {
        "qid": 409000400,
        "question": "the house of blues show is found in the casino owned by whom? The linked entity is House of Blues (m.0525fd).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r5dz",
                "entity_name": "Caesars Entertainment Corporation"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino_owner",
                    "class": "base.casinos.casino_owner",
                    "friendly_name": "Casino owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0525fd",
                    "class": "base.casinos.casino_show",
                    "friendly_name": "House of Blues",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.casinos.casino.shows",
                    "friendly_name": "Shows"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.casinos.casino.owner",
                    "friendly_name": "Owner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino_owner . \n?x1 :type.object.type :base.casinos.casino . \nVALUES ?x2 { :m.0525fd } \n?x1 :base.casinos.casino.shows ?x2 . \n?x1 :base.casinos.casino.owner ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.casinos.casino_owner (JOIN (R base.casinos.casino.owner) (JOIN base.casinos.casino.shows m.0525fd)))",
        "program": "step1:(JOIN base.casinos.casino.shows m.0525fd)[SEP]step2:(JOIN (R base.casinos.casino.owner) step1)[SEP]step3:(AND base.casinos.casino_owner step2)[SEP]"
    },
    {
        "qid": 409000500,
        "question": "who is the owner of the casino that has the house of blues show? The linked entity is House of Blues (m.0525fd).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r5dz",
                "entity_name": "Caesars Entertainment Corporation"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.casinos.casino_owner",
                    "class": "base.casinos.casino_owner",
                    "friendly_name": "Casino owner",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.casinos.casino",
                    "class": "base.casinos.casino",
                    "friendly_name": "Casino",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0525fd",
                    "class": "base.casinos.casino_show",
                    "friendly_name": "House of Blues",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.casinos.casino.shows",
                    "friendly_name": "Shows"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.casinos.casino.owner",
                    "friendly_name": "Owner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.casinos.casino_owner . \n?x1 :type.object.type :base.casinos.casino . \nVALUES ?x2 { :m.0525fd } \n?x1 :base.casinos.casino.shows ?x2 . \n?x1 :base.casinos.casino.owner ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.casinos.casino_owner (JOIN (R base.casinos.casino.owner) (JOIN base.casinos.casino.shows m.0525fd)))",
        "program": "step1:(JOIN base.casinos.casino.shows m.0525fd)[SEP]step2:(JOIN (R base.casinos.casino.owner) step1)[SEP]step3:(AND base.casinos.casino_owner step2)[SEP]"
    },
    {
        "qid": 410000000,
        "question": "robert redford owns which recreational skiing locations? The linked entity is Robert Redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "Robert Redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000001,
        "question": "redford owns which recreational skiing locations? The linked entity is redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000002,
        "question": "bob redford owns which recreational skiing locations? The linked entity is bob redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "bob redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000100,
        "question": "robert redford owns what ski sites? The linked entity is Robert Redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "Robert Redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000101,
        "question": "redford owns what ski sites? The linked entity is redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000102,
        "question": "bob redford owns what ski sites? The linked entity is bob redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "bob redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000200,
        "question": "which ski sights does robert redford own? The linked entity is Robert Redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "Robert Redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000201,
        "question": "which ski sights does redford own? The linked entity is redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000202,
        "question": "which ski sights does bob redford own? The linked entity is bob redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "bob redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000300,
        "question": "robert redford is the owner of which ski areas? The linked entity is Robert Redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "Robert Redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000301,
        "question": "redford is the owner of which ski areas? The linked entity is redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000302,
        "question": "bob redford is the owner of which ski areas? The linked entity is bob redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "bob redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000400,
        "question": "what ski sites are owned by robert redford? The linked entity is Robert Redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "Robert Redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000401,
        "question": "what ski sites are owned by redford? The linked entity is redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 410000402,
        "question": "what ski sites are owned by bob redford? The linked entity is bob redford (m.0gs1_).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fd3v",
                "entity_name": "Sundance Resort"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_area",
                    "class": "skiing.ski_area",
                    "friendly_name": "Ski Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "skiing.ski_area_ownership",
                    "class": "skiing.ski_area_ownership",
                    "friendly_name": "Ski Area Ownership",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gs1_",
                    "class": "skiing.ski_area_owner",
                    "friendly_name": "bob redford",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.ski_area_ownership.ski_area",
                    "friendly_name": "Ski Area"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "skiing.ski_area_owner.ski_areas_owned",
                    "friendly_name": "Ski Areas Owned"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_area . \n?x1 :type.object.type :skiing.ski_area_ownership . \nVALUES ?x2 { :m.0gs1_ } \n?x1 :skiing.ski_area_ownership.ski_area ?x0 . \n?x2 :skiing.ski_area_owner.ski_areas_owned ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND skiing.ski_area (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)))",
        "program": "step1:(JOIN (R skiing.ski_area_owner.ski_areas_owned) m.0gs1_)[SEP]step2:(JOIN (R skiing.ski_area_ownership.ski_area) step1)[SEP]step3:(AND skiing.ski_area step2)[SEP]"
    },
    {
        "qid": 413000000,
        "question": "a ballet about orpheus was composed by whom? The linked entity is Orpheus (m.0kv0c).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kv0c",
                    "class": "base.ballet.ballet_character",
                    "friendly_name": "Orpheus",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.ballet.ballet.characters",
                    "friendly_name": "Characters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.0kv0c } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x1 :base.ballet.ballet.characters ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN base.ballet.ballet.characters m.0kv0c)))",
        "program": "step1:(JOIN base.ballet.ballet.characters m.0kv0c)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 413000100,
        "question": "who wrote a orpheus ballet. The linked entity is Orpheus (m.0kv0c).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kv0c",
                    "class": "base.ballet.ballet_character",
                    "friendly_name": "Orpheus",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.ballet.ballet.characters",
                    "friendly_name": "Characters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.0kv0c } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x1 :base.ballet.ballet.characters ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN base.ballet.ballet.characters m.0kv0c)))",
        "program": "step1:(JOIN base.ballet.ballet.characters m.0kv0c)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 413000200,
        "question": "what composer wrote a ballet about orpheus? The linked entity is Orpheus (m.0kv0c).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kv0c",
                    "class": "base.ballet.ballet_character",
                    "friendly_name": "Orpheus",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.ballet.ballet.characters",
                    "friendly_name": "Characters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.0kv0c } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x1 :base.ballet.ballet.characters ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN base.ballet.ballet.characters m.0kv0c)))",
        "program": "step1:(JOIN base.ballet.ballet.characters m.0kv0c)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 413000300,
        "question": "orpheus was the subject of a ballet by which composer? The linked entity is Orpheus (m.0kv0c).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kv0c",
                    "class": "base.ballet.ballet_character",
                    "friendly_name": "Orpheus",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.ballet.ballet.characters",
                    "friendly_name": "Characters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.0kv0c } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x1 :base.ballet.ballet.characters ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN base.ballet.ballet.characters m.0kv0c)))",
        "program": "step1:(JOIN base.ballet.ballet.characters m.0kv0c)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 413000400,
        "question": "who composed a ballet about orpheus? The linked entity is Orpheus (m.0kv0c).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kv0c",
                    "class": "base.ballet.ballet_character",
                    "friendly_name": "Orpheus",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.ballet.ballet.characters",
                    "friendly_name": "Characters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.0kv0c } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x1 :base.ballet.ballet.characters ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN base.ballet.ballet.characters m.0kv0c)))",
        "program": "step1:(JOIN base.ballet.ballet.characters m.0kv0c)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 416000000,
        "question": "who was publishing the column ask ann landers? The linked entity is Ask Ann Landers (m.06wbhpj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01khdz",
                "entity_name": "Chicago Sun-Times"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.column.column_publisher",
                    "class": "base.column.column_publisher",
                    "friendly_name": "Column Publisher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.column.column_periodical_duration",
                    "class": "base.column.column_periodical_duration",
                    "friendly_name": "Column Periodical Duration",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06wbhpj",
                    "class": "base.column.column",
                    "friendly_name": "Ask Ann Landers",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.column.column_periodical_duration.periodical",
                    "friendly_name": "Periodical"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.column.column_periodical_duration.column",
                    "friendly_name": "Column"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.column.column_publisher . \n?x1 :type.object.type :base.column.column_periodical_duration . \nVALUES ?x2 { :m.06wbhpj } \n?x1 :base.column.column_periodical_duration.periodical ?x0 . \n?x1 :base.column.column_periodical_duration.column ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.column.column_publisher (JOIN (R base.column.column_periodical_duration.periodical) (JOIN base.column.column_periodical_duration.column m.06wbhpj)))",
        "program": "step1:(JOIN base.column.column_periodical_duration.column m.06wbhpj)[SEP]step2:(JOIN (R base.column.column_periodical_duration.periodical) step1)[SEP]step3:(AND base.column.column_publisher step2)[SEP]"
    },
    {
        "qid": 416000100,
        "question": "on which newspaper was ask ann landers published? The linked entity is Ask Ann Landers (m.06wbhpj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01khdz",
                "entity_name": "Chicago Sun-Times"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.column.column_publisher",
                    "class": "base.column.column_publisher",
                    "friendly_name": "Column Publisher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.column.column_periodical_duration",
                    "class": "base.column.column_periodical_duration",
                    "friendly_name": "Column Periodical Duration",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06wbhpj",
                    "class": "base.column.column",
                    "friendly_name": "Ask Ann Landers",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.column.column_periodical_duration.periodical",
                    "friendly_name": "Periodical"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.column.column_periodical_duration.column",
                    "friendly_name": "Column"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.column.column_publisher . \n?x1 :type.object.type :base.column.column_periodical_duration . \nVALUES ?x2 { :m.06wbhpj } \n?x1 :base.column.column_periodical_duration.periodical ?x0 . \n?x1 :base.column.column_periodical_duration.column ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.column.column_publisher (JOIN (R base.column.column_periodical_duration.periodical) (JOIN base.column.column_periodical_duration.column m.06wbhpj)))",
        "program": "step1:(JOIN base.column.column_periodical_duration.column m.06wbhpj)[SEP]step2:(JOIN (R base.column.column_periodical_duration.periodical) step1)[SEP]step3:(AND base.column.column_publisher step2)[SEP]"
    },
    {
        "qid": 416000200,
        "question": "ask ann landers was in which newspaper? The linked entity is Ask Ann Landers (m.06wbhpj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01khdz",
                "entity_name": "Chicago Sun-Times"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.column.column_publisher",
                    "class": "base.column.column_publisher",
                    "friendly_name": "Column Publisher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.column.column_periodical_duration",
                    "class": "base.column.column_periodical_duration",
                    "friendly_name": "Column Periodical Duration",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06wbhpj",
                    "class": "base.column.column",
                    "friendly_name": "Ask Ann Landers",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.column.column_periodical_duration.periodical",
                    "friendly_name": "Periodical"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.column.column_periodical_duration.column",
                    "friendly_name": "Column"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.column.column_publisher . \n?x1 :type.object.type :base.column.column_periodical_duration . \nVALUES ?x2 { :m.06wbhpj } \n?x1 :base.column.column_periodical_duration.periodical ?x0 . \n?x1 :base.column.column_periodical_duration.column ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.column.column_publisher (JOIN (R base.column.column_periodical_duration.periodical) (JOIN base.column.column_periodical_duration.column m.06wbhpj)))",
        "program": "step1:(JOIN base.column.column_periodical_duration.column m.06wbhpj)[SEP]step2:(JOIN (R base.column.column_periodical_duration.periodical) step1)[SEP]step3:(AND base.column.column_publisher step2)[SEP]"
    },
    {
        "qid": 416000300,
        "question": "where to find ask ann landers? The linked entity is Ask Ann Landers (m.06wbhpj).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01khdz",
                "entity_name": "Chicago Sun-Times"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.column.column_publisher",
                    "class": "base.column.column_publisher",
                    "friendly_name": "Column Publisher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.column.column_periodical_duration",
                    "class": "base.column.column_periodical_duration",
                    "friendly_name": "Column Periodical Duration",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06wbhpj",
                    "class": "base.column.column",
                    "friendly_name": "Ask Ann Landers",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.column.column_periodical_duration.periodical",
                    "friendly_name": "Periodical"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.column.column_periodical_duration.column",
                    "friendly_name": "Column"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.column.column_publisher . \n?x1 :type.object.type :base.column.column_periodical_duration . \nVALUES ?x2 { :m.06wbhpj } \n?x1 :base.column.column_periodical_duration.periodical ?x0 . \n?x1 :base.column.column_periodical_duration.column ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.column.column_publisher (JOIN (R base.column.column_periodical_duration.periodical) (JOIN base.column.column_periodical_duration.column m.06wbhpj)))",
        "program": "step1:(JOIN base.column.column_periodical_duration.column m.06wbhpj)[SEP]step2:(JOIN (R base.column.column_periodical_duration.periodical) step1)[SEP]step3:(AND base.column.column_publisher step2)[SEP]"
    },
    {
        "qid": 418000000,
        "question": "which baseball teams did dave eiland coach? The linked entity is Dave Eiland (m.0c0x6v).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cqt41",
                "entity_name": "New York Yankees"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "baseball.baseball_team",
                    "class": "baseball.baseball_team",
                    "friendly_name": "Baseball Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "baseball.historical_coaching_tenure",
                    "class": "baseball.historical_coaching_tenure",
                    "friendly_name": "Historical Coaching Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c0x6v",
                    "class": "baseball.baseball_coach",
                    "friendly_name": "Dave Eiland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "baseball.baseball_team.historical_coaches",
                    "friendly_name": "Historical Coaches"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "baseball.historical_coaching_tenure.baseball_coach",
                    "friendly_name": "Baseball Coach"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :baseball.baseball_team . \n?x1 :type.object.type :baseball.historical_coaching_tenure . \nVALUES ?x2 { :m.0c0x6v } \n?x0 :baseball.baseball_team.historical_coaches ?x1 . \n?x1 :baseball.historical_coaching_tenure.baseball_coach ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND baseball.baseball_team (JOIN baseball.baseball_team.historical_coaches (JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)))",
        "program": "step1:(JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)[SEP]step2:(JOIN baseball.baseball_team.historical_coaches step1)[SEP]step3:(AND baseball.baseball_team step2)[SEP]"
    },
    {
        "qid": 418000001,
        "question": "which baseball teams did eiland coach? The linked entity is eiland (m.0c0x6v).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cqt41",
                "entity_name": "New York Yankees"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "baseball.baseball_team",
                    "class": "baseball.baseball_team",
                    "friendly_name": "Baseball Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "baseball.historical_coaching_tenure",
                    "class": "baseball.historical_coaching_tenure",
                    "friendly_name": "Historical Coaching Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c0x6v",
                    "class": "baseball.baseball_coach",
                    "friendly_name": "eiland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "baseball.baseball_team.historical_coaches",
                    "friendly_name": "Historical Coaches"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "baseball.historical_coaching_tenure.baseball_coach",
                    "friendly_name": "Baseball Coach"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :baseball.baseball_team . \n?x1 :type.object.type :baseball.historical_coaching_tenure . \nVALUES ?x2 { :m.0c0x6v } \n?x0 :baseball.baseball_team.historical_coaches ?x1 . \n?x1 :baseball.historical_coaching_tenure.baseball_coach ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND baseball.baseball_team (JOIN baseball.baseball_team.historical_coaches (JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)))",
        "program": "step1:(JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)[SEP]step2:(JOIN baseball.baseball_team.historical_coaches step1)[SEP]step3:(AND baseball.baseball_team step2)[SEP]"
    },
    {
        "qid": 418000100,
        "question": "which baseball teams were coached by dave eiland? The linked entity is Dave Eiland (m.0c0x6v).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cqt41",
                "entity_name": "New York Yankees"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "baseball.baseball_team",
                    "class": "baseball.baseball_team",
                    "friendly_name": "Baseball Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "baseball.historical_coaching_tenure",
                    "class": "baseball.historical_coaching_tenure",
                    "friendly_name": "Historical Coaching Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c0x6v",
                    "class": "baseball.baseball_coach",
                    "friendly_name": "Dave Eiland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "baseball.baseball_team.historical_coaches",
                    "friendly_name": "Historical Coaches"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "baseball.historical_coaching_tenure.baseball_coach",
                    "friendly_name": "Baseball Coach"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :baseball.baseball_team . \n?x1 :type.object.type :baseball.historical_coaching_tenure . \nVALUES ?x2 { :m.0c0x6v } \n?x0 :baseball.baseball_team.historical_coaches ?x1 . \n?x1 :baseball.historical_coaching_tenure.baseball_coach ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND baseball.baseball_team (JOIN baseball.baseball_team.historical_coaches (JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)))",
        "program": "step1:(JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)[SEP]step2:(JOIN baseball.baseball_team.historical_coaches step1)[SEP]step3:(AND baseball.baseball_team step2)[SEP]"
    },
    {
        "qid": 418000101,
        "question": "which baseball teams were coached by eiland? The linked entity is eiland (m.0c0x6v).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cqt41",
                "entity_name": "New York Yankees"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "baseball.baseball_team",
                    "class": "baseball.baseball_team",
                    "friendly_name": "Baseball Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "baseball.historical_coaching_tenure",
                    "class": "baseball.historical_coaching_tenure",
                    "friendly_name": "Historical Coaching Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c0x6v",
                    "class": "baseball.baseball_coach",
                    "friendly_name": "eiland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "baseball.baseball_team.historical_coaches",
                    "friendly_name": "Historical Coaches"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "baseball.historical_coaching_tenure.baseball_coach",
                    "friendly_name": "Baseball Coach"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :baseball.baseball_team . \n?x1 :type.object.type :baseball.historical_coaching_tenure . \nVALUES ?x2 { :m.0c0x6v } \n?x0 :baseball.baseball_team.historical_coaches ?x1 . \n?x1 :baseball.historical_coaching_tenure.baseball_coach ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND baseball.baseball_team (JOIN baseball.baseball_team.historical_coaches (JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)))",
        "program": "step1:(JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)[SEP]step2:(JOIN baseball.baseball_team.historical_coaches step1)[SEP]step3:(AND baseball.baseball_team step2)[SEP]"
    },
    {
        "qid": 418000200,
        "question": "dave eiland coached which baseball teams? The linked entity is Dave Eiland (m.0c0x6v).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cqt41",
                "entity_name": "New York Yankees"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "baseball.baseball_team",
                    "class": "baseball.baseball_team",
                    "friendly_name": "Baseball Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "baseball.historical_coaching_tenure",
                    "class": "baseball.historical_coaching_tenure",
                    "friendly_name": "Historical Coaching Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c0x6v",
                    "class": "baseball.baseball_coach",
                    "friendly_name": "Dave Eiland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "baseball.baseball_team.historical_coaches",
                    "friendly_name": "Historical Coaches"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "baseball.historical_coaching_tenure.baseball_coach",
                    "friendly_name": "Baseball Coach"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :baseball.baseball_team . \n?x1 :type.object.type :baseball.historical_coaching_tenure . \nVALUES ?x2 { :m.0c0x6v } \n?x0 :baseball.baseball_team.historical_coaches ?x1 . \n?x1 :baseball.historical_coaching_tenure.baseball_coach ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND baseball.baseball_team (JOIN baseball.baseball_team.historical_coaches (JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)))",
        "program": "step1:(JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)[SEP]step2:(JOIN baseball.baseball_team.historical_coaches step1)[SEP]step3:(AND baseball.baseball_team step2)[SEP]"
    },
    {
        "qid": 418000201,
        "question": "eiland coached which baseball teams? The linked entity is eiland (m.0c0x6v).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cqt41",
                "entity_name": "New York Yankees"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "baseball.baseball_team",
                    "class": "baseball.baseball_team",
                    "friendly_name": "Baseball Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "baseball.historical_coaching_tenure",
                    "class": "baseball.historical_coaching_tenure",
                    "friendly_name": "Historical Coaching Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c0x6v",
                    "class": "baseball.baseball_coach",
                    "friendly_name": "eiland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "baseball.baseball_team.historical_coaches",
                    "friendly_name": "Historical Coaches"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "baseball.historical_coaching_tenure.baseball_coach",
                    "friendly_name": "Baseball Coach"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :baseball.baseball_team . \n?x1 :type.object.type :baseball.historical_coaching_tenure . \nVALUES ?x2 { :m.0c0x6v } \n?x0 :baseball.baseball_team.historical_coaches ?x1 . \n?x1 :baseball.historical_coaching_tenure.baseball_coach ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND baseball.baseball_team (JOIN baseball.baseball_team.historical_coaches (JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)))",
        "program": "step1:(JOIN baseball.historical_coaching_tenure.baseball_coach m.0c0x6v)[SEP]step2:(JOIN baseball.baseball_team.historical_coaches step1)[SEP]step3:(AND baseball.baseball_team step2)[SEP]"
    },
    {
        "qid": 419000000,
        "question": "what meteor showers have been recorded in the constellation that vega is in? The linked entity is Vega (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "Vega",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000001,
        "question": "what meteor showers have been recorded in the constellation that alpha lyrae is in? The linked entity is alpha lyrae (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "alpha lyrae",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000100,
        "question": "the constellation which contains vega has had which meteor showers recorded within it? The linked entity is Vega (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "Vega",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000101,
        "question": "the constellation which contains alpha lyrae has had which meteor showers recorded within it? The linked entity is alpha lyrae (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "alpha lyrae",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000200,
        "question": "what are the known meteor showers within the constellation of vega. The linked entity is Vega (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "Vega",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000201,
        "question": "what are the known meteor showers within the constellation of alpha lyrae. The linked entity is alpha lyrae (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "alpha lyrae",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000300,
        "question": "in the constellation of vega, what meteor showers have been observed? The linked entity is Vega (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "Vega",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000301,
        "question": "in the constellation of alpha lyrae, what meteor showers have been observed? The linked entity is alpha lyrae (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "alpha lyrae",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000400,
        "question": "what meteor showers took place in the constellation with vega? The linked entity is Vega (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "Vega",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000401,
        "question": "what meteor showers took place in the constellation with alpha lyrae? The linked entity is alpha lyrae (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "alpha lyrae",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000500,
        "question": "which meteor showers have occurred in vega's constellation? The linked entity is Vega (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "Vega",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 419000501,
        "question": "which meteor showers have occurred in alpha lyrae's constellation? The linked entity is alpha lyrae (m.080jt).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267sh0",
                "entity_name": "Lyrids"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.meteor_shower",
                    "class": "astronomy.meteor_shower",
                    "friendly_name": "Meteor Shower",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.constellation",
                    "class": "astronomy.constellation",
                    "friendly_name": "Constellation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.080jt",
                    "class": "astronomy.star",
                    "friendly_name": "alpha lyrae",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.meteor_shower.radiant",
                    "friendly_name": "Radiant"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "astronomy.star.constellation",
                    "friendly_name": "Constellation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \n?x1 :type.object.type :astronomy.constellation . \nVALUES ?x2 { :m.080jt } \n?x0 :astronomy.meteor_shower.radiant ?x1 . \n?x2 :astronomy.star.constellation ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.radiant (JOIN (R astronomy.star.constellation) m.080jt)))",
        "program": "step1:(JOIN (R astronomy.star.constellation) m.080jt)[SEP]step2:(JOIN astronomy.meteor_shower.radiant step1)[SEP]step3:(AND astronomy.meteor_shower step2)[SEP]"
    },
    {
        "qid": 422000000,
        "question": "in the film, which artist sang the song my heart will go on? The linked entity is My Heart Will Go On (m.03q8sx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cwhp",
                "entity_name": "Celine Dion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_song_performer",
                    "class": "film.film_song_performer",
                    "friendly_name": "Film song performer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "film.film_song_relationship",
                    "class": "film.film_song_relationship",
                    "friendly_name": "Film song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03q8sx",
                    "class": "film.film_song",
                    "friendly_name": "My Heart Will Go On",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_song_relationship.performers",
                    "friendly_name": "Performers"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "film.film_song.films",
                    "friendly_name": "Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_song_performer . \n?x1 :type.object.type :film.film_song_relationship . \nVALUES ?x2 { :m.03q8sx } \n?x1 :film.film_song_relationship.performers ?x0 . \n?x2 :film.film_song.films ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND film.film_song_performer (JOIN (R film.film_song_relationship.performers) (JOIN (R film.film_song.films) m.03q8sx)))",
        "program": "step1:(JOIN (R film.film_song.films) m.03q8sx)[SEP]step2:(JOIN (R film.film_song_relationship.performers) step1)[SEP]step3:(AND film.film_song_performer step2)[SEP]"
    },
    {
        "qid": 422000100,
        "question": "who sang my heart will go on in the film? The linked entity is My Heart Will Go On (m.03q8sx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cwhp",
                "entity_name": "Celine Dion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_song_performer",
                    "class": "film.film_song_performer",
                    "friendly_name": "Film song performer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "film.film_song_relationship",
                    "class": "film.film_song_relationship",
                    "friendly_name": "Film song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03q8sx",
                    "class": "film.film_song",
                    "friendly_name": "My Heart Will Go On",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_song_relationship.performers",
                    "friendly_name": "Performers"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "film.film_song.films",
                    "friendly_name": "Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_song_performer . \n?x1 :type.object.type :film.film_song_relationship . \nVALUES ?x2 { :m.03q8sx } \n?x1 :film.film_song_relationship.performers ?x0 . \n?x2 :film.film_song.films ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND film.film_song_performer (JOIN (R film.film_song_relationship.performers) (JOIN (R film.film_song.films) m.03q8sx)))",
        "program": "step1:(JOIN (R film.film_song.films) m.03q8sx)[SEP]step2:(JOIN (R film.film_song_relationship.performers) step1)[SEP]step3:(AND film.film_song_performer step2)[SEP]"
    },
    {
        "qid": 422000200,
        "question": "who performed the song my heart will go on in the film? The linked entity is My Heart Will Go On (m.03q8sx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cwhp",
                "entity_name": "Celine Dion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_song_performer",
                    "class": "film.film_song_performer",
                    "friendly_name": "Film song performer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "film.film_song_relationship",
                    "class": "film.film_song_relationship",
                    "friendly_name": "Film song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03q8sx",
                    "class": "film.film_song",
                    "friendly_name": "My Heart Will Go On",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_song_relationship.performers",
                    "friendly_name": "Performers"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "film.film_song.films",
                    "friendly_name": "Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_song_performer . \n?x1 :type.object.type :film.film_song_relationship . \nVALUES ?x2 { :m.03q8sx } \n?x1 :film.film_song_relationship.performers ?x0 . \n?x2 :film.film_song.films ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND film.film_song_performer (JOIN (R film.film_song_relationship.performers) (JOIN (R film.film_song.films) m.03q8sx)))",
        "program": "step1:(JOIN (R film.film_song.films) m.03q8sx)[SEP]step2:(JOIN (R film.film_song_relationship.performers) step1)[SEP]step3:(AND film.film_song_performer step2)[SEP]"
    },
    {
        "qid": 422000300,
        "question": "who is the original singer of my heart will go on? The linked entity is My Heart Will Go On (m.03q8sx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cwhp",
                "entity_name": "Celine Dion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_song_performer",
                    "class": "film.film_song_performer",
                    "friendly_name": "Film song performer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "film.film_song_relationship",
                    "class": "film.film_song_relationship",
                    "friendly_name": "Film song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03q8sx",
                    "class": "film.film_song",
                    "friendly_name": "My Heart Will Go On",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_song_relationship.performers",
                    "friendly_name": "Performers"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "film.film_song.films",
                    "friendly_name": "Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_song_performer . \n?x1 :type.object.type :film.film_song_relationship . \nVALUES ?x2 { :m.03q8sx } \n?x1 :film.film_song_relationship.performers ?x0 . \n?x2 :film.film_song.films ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND film.film_song_performer (JOIN (R film.film_song_relationship.performers) (JOIN (R film.film_song.films) m.03q8sx)))",
        "program": "step1:(JOIN (R film.film_song.films) m.03q8sx)[SEP]step2:(JOIN (R film.film_song_relationship.performers) step1)[SEP]step3:(AND film.film_song_performer step2)[SEP]"
    },
    {
        "qid": 422000400,
        "question": "my heart will go on was performed by which singer? The linked entity is My Heart Will Go On (m.03q8sx).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cwhp",
                "entity_name": "Celine Dion"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_song_performer",
                    "class": "film.film_song_performer",
                    "friendly_name": "Film song performer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "film.film_song_relationship",
                    "class": "film.film_song_relationship",
                    "friendly_name": "Film song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03q8sx",
                    "class": "film.film_song",
                    "friendly_name": "My Heart Will Go On",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "film.film_song_relationship.performers",
                    "friendly_name": "Performers"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "film.film_song.films",
                    "friendly_name": "Films"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_song_performer . \n?x1 :type.object.type :film.film_song_relationship . \nVALUES ?x2 { :m.03q8sx } \n?x1 :film.film_song_relationship.performers ?x0 . \n?x2 :film.film_song.films ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND film.film_song_performer (JOIN (R film.film_song_relationship.performers) (JOIN (R film.film_song.films) m.03q8sx)))",
        "program": "step1:(JOIN (R film.film_song.films) m.03q8sx)[SEP]step2:(JOIN (R film.film_song_relationship.performers) step1)[SEP]step3:(AND film.film_song_performer step2)[SEP]"
    },
    {
        "qid": 423000000,
        "question": "where can i find a list of the 1976 democratic national convention candidates? The linked entity is 1976 Democratic National Convention (m.08byf7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z9yq",
                "entity_name": "Barbara Jordan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bl83",
                "entity_name": "Walter Mondale"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p5rv",
                "entity_name": "Ron Dellums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ncpq",
                "entity_name": "Carl Albert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fh7",
                "entity_name": "Others"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fvf",
                "entity_name": "Fritz Efaw"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.politicalconventions.primary_candidate",
                    "class": "base.politicalconventions.primary_candidate",
                    "friendly_name": "Primary Candidate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.politicalconventions.vp_delegate_vote_tally",
                    "class": "base.politicalconventions.vp_delegate_vote_tally",
                    "friendly_name": "VP Delegate Vote Tally",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08byf7",
                    "class": "base.politicalconventions.political_convention",
                    "friendly_name": "1976 Democratic National Convention",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.politicalconventions.vp_delegate_vote_tally.candidate",
                    "friendly_name": "Candidate"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.politicalconventions.political_convention.final_vp_vote_tally",
                    "friendly_name": "Final VP Vote Tally"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.politicalconventions.primary_candidate . \n?x1 :type.object.type :base.politicalconventions.vp_delegate_vote_tally . \nVALUES ?x2 { :m.08byf7 } \n?x1 :base.politicalconventions.vp_delegate_vote_tally.candidate ?x0 . \n?x2 :base.politicalconventions.political_convention.final_vp_vote_tally ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.politicalconventions.primary_candidate (JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) (JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)))",
        "program": "step1:(JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)[SEP]step2:(JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) step1)[SEP]step3:(AND base.politicalconventions.primary_candidate step2)[SEP]"
    },
    {
        "qid": 423000100,
        "question": "who were the candidates at the 1976 democratic national convention? The linked entity is 1976 Democratic National Convention (m.08byf7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z9yq",
                "entity_name": "Barbara Jordan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bl83",
                "entity_name": "Walter Mondale"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p5rv",
                "entity_name": "Ron Dellums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ncpq",
                "entity_name": "Carl Albert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fh7",
                "entity_name": "Others"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fvf",
                "entity_name": "Fritz Efaw"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.politicalconventions.primary_candidate",
                    "class": "base.politicalconventions.primary_candidate",
                    "friendly_name": "Primary Candidate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.politicalconventions.vp_delegate_vote_tally",
                    "class": "base.politicalconventions.vp_delegate_vote_tally",
                    "friendly_name": "VP Delegate Vote Tally",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08byf7",
                    "class": "base.politicalconventions.political_convention",
                    "friendly_name": "1976 Democratic National Convention",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.politicalconventions.vp_delegate_vote_tally.candidate",
                    "friendly_name": "Candidate"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.politicalconventions.political_convention.final_vp_vote_tally",
                    "friendly_name": "Final VP Vote Tally"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.politicalconventions.primary_candidate . \n?x1 :type.object.type :base.politicalconventions.vp_delegate_vote_tally . \nVALUES ?x2 { :m.08byf7 } \n?x1 :base.politicalconventions.vp_delegate_vote_tally.candidate ?x0 . \n?x2 :base.politicalconventions.political_convention.final_vp_vote_tally ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.politicalconventions.primary_candidate (JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) (JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)))",
        "program": "step1:(JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)[SEP]step2:(JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) step1)[SEP]step3:(AND base.politicalconventions.primary_candidate step2)[SEP]"
    },
    {
        "qid": 423000200,
        "question": "who are those candidates in the 1976 democratic national convention? The linked entity is 1976 Democratic National Convention (m.08byf7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z9yq",
                "entity_name": "Barbara Jordan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bl83",
                "entity_name": "Walter Mondale"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p5rv",
                "entity_name": "Ron Dellums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ncpq",
                "entity_name": "Carl Albert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fh7",
                "entity_name": "Others"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fvf",
                "entity_name": "Fritz Efaw"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.politicalconventions.primary_candidate",
                    "class": "base.politicalconventions.primary_candidate",
                    "friendly_name": "Primary Candidate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.politicalconventions.vp_delegate_vote_tally",
                    "class": "base.politicalconventions.vp_delegate_vote_tally",
                    "friendly_name": "VP Delegate Vote Tally",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08byf7",
                    "class": "base.politicalconventions.political_convention",
                    "friendly_name": "1976 Democratic National Convention",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.politicalconventions.vp_delegate_vote_tally.candidate",
                    "friendly_name": "Candidate"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.politicalconventions.political_convention.final_vp_vote_tally",
                    "friendly_name": "Final VP Vote Tally"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.politicalconventions.primary_candidate . \n?x1 :type.object.type :base.politicalconventions.vp_delegate_vote_tally . \nVALUES ?x2 { :m.08byf7 } \n?x1 :base.politicalconventions.vp_delegate_vote_tally.candidate ?x0 . \n?x2 :base.politicalconventions.political_convention.final_vp_vote_tally ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.politicalconventions.primary_candidate (JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) (JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)))",
        "program": "step1:(JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)[SEP]step2:(JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) step1)[SEP]step3:(AND base.politicalconventions.primary_candidate step2)[SEP]"
    },
    {
        "qid": 423000300,
        "question": "1976 democratic national convention had which candidates? The linked entity is 1976 Democratic National Convention (m.08byf7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z9yq",
                "entity_name": "Barbara Jordan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bl83",
                "entity_name": "Walter Mondale"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p5rv",
                "entity_name": "Ron Dellums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ncpq",
                "entity_name": "Carl Albert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fh7",
                "entity_name": "Others"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fvf",
                "entity_name": "Fritz Efaw"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.politicalconventions.primary_candidate",
                    "class": "base.politicalconventions.primary_candidate",
                    "friendly_name": "Primary Candidate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.politicalconventions.vp_delegate_vote_tally",
                    "class": "base.politicalconventions.vp_delegate_vote_tally",
                    "friendly_name": "VP Delegate Vote Tally",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08byf7",
                    "class": "base.politicalconventions.political_convention",
                    "friendly_name": "1976 Democratic National Convention",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.politicalconventions.vp_delegate_vote_tally.candidate",
                    "friendly_name": "Candidate"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.politicalconventions.political_convention.final_vp_vote_tally",
                    "friendly_name": "Final VP Vote Tally"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.politicalconventions.primary_candidate . \n?x1 :type.object.type :base.politicalconventions.vp_delegate_vote_tally . \nVALUES ?x2 { :m.08byf7 } \n?x1 :base.politicalconventions.vp_delegate_vote_tally.candidate ?x0 . \n?x2 :base.politicalconventions.political_convention.final_vp_vote_tally ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.politicalconventions.primary_candidate (JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) (JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)))",
        "program": "step1:(JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)[SEP]step2:(JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) step1)[SEP]step3:(AND base.politicalconventions.primary_candidate step2)[SEP]"
    },
    {
        "qid": 423000400,
        "question": "in the 1976 democratic national convention, which politicians where competing? The linked entity is 1976 Democratic National Convention (m.08byf7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z9yq",
                "entity_name": "Barbara Jordan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bl83",
                "entity_name": "Walter Mondale"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p5rv",
                "entity_name": "Ron Dellums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ncpq",
                "entity_name": "Carl Albert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fh7",
                "entity_name": "Others"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j3fvf",
                "entity_name": "Fritz Efaw"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.politicalconventions.primary_candidate",
                    "class": "base.politicalconventions.primary_candidate",
                    "friendly_name": "Primary Candidate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.politicalconventions.vp_delegate_vote_tally",
                    "class": "base.politicalconventions.vp_delegate_vote_tally",
                    "friendly_name": "VP Delegate Vote Tally",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08byf7",
                    "class": "base.politicalconventions.political_convention",
                    "friendly_name": "1976 Democratic National Convention",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.politicalconventions.vp_delegate_vote_tally.candidate",
                    "friendly_name": "Candidate"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.politicalconventions.political_convention.final_vp_vote_tally",
                    "friendly_name": "Final VP Vote Tally"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.politicalconventions.primary_candidate . \n?x1 :type.object.type :base.politicalconventions.vp_delegate_vote_tally . \nVALUES ?x2 { :m.08byf7 } \n?x1 :base.politicalconventions.vp_delegate_vote_tally.candidate ?x0 . \n?x2 :base.politicalconventions.political_convention.final_vp_vote_tally ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.politicalconventions.primary_candidate (JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) (JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)))",
        "program": "step1:(JOIN (R base.politicalconventions.political_convention.final_vp_vote_tally) m.08byf7)[SEP]step2:(JOIN (R base.politicalconventions.vp_delegate_vote_tally.candidate) step1)[SEP]step3:(AND base.politicalconventions.primary_candidate step2)[SEP]"
    },
    {
        "qid": 424000000,
        "question": "who is toyota motor corporation endorsed by? The linked entity is Toyota Motor Corporation (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "Toyota Motor Corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000001,
        "question": "who is toyota endorsed by? The linked entity is toyota (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000002,
        "question": "who is toyota motor corp. endorsed by? The linked entity is toyota motor corp. (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota motor corp.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000100,
        "question": "find the endorsers for toyota motor corporation's products. The linked entity is Toyota Motor Corporation (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "Toyota Motor Corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000101,
        "question": "find the endorsers for toyota's products. The linked entity is toyota (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000102,
        "question": "find the endorsers for toyota motor corp.'s products. The linked entity is toyota motor corp. (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota motor corp.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000200,
        "question": "who was an endorser of products made by toyota motor corporation? The linked entity is Toyota Motor Corporation (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "Toyota Motor Corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000201,
        "question": "who was an endorser of products made by toyota? The linked entity is toyota (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000202,
        "question": "who was an endorser of products made by toyota motor corp.? The linked entity is toyota motor corp. (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota motor corp.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000300,
        "question": "who endorsed products of toyota motor corporation? The linked entity is Toyota Motor Corporation (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "Toyota Motor Corporation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000301,
        "question": "who endorsed products of toyota? The linked entity is toyota (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 424000302,
        "question": "who endorsed products of toyota motor corp.? The linked entity is toyota motor corp. (m.07mb6).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r7ht6",
                "entity_name": "Greg Lutzka"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "business.product_endorser",
                    "class": "business.product_endorser",
                    "friendly_name": "Product Endorser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "business.product_endorsement",
                    "class": "business.product_endorsement",
                    "friendly_name": "Product Endorsement",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07mb6",
                    "class": "business.product_endorsee",
                    "friendly_name": "toyota motor corp.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "business.product_endorsee.endorsements",
                    "friendly_name": "Endorsements"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "business.product_endorsement.endorser",
                    "friendly_name": "Endorser"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.07mb6 } \n?x2 :business.product_endorsee.endorsements ?x1 . \n?x1 :business.product_endorsement.endorser ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN (R business.product_endorsee.endorsements) m.07mb6)))",
        "program": "step1:(JOIN (R business.product_endorsee.endorsements) m.07mb6)[SEP]step2:(JOIN (R business.product_endorsement.endorser) step1)[SEP]step3:(AND business.product_endorser step2)[SEP]"
    },
    {
        "qid": 425000000,
        "question": "what are the hosts of barley stem rust? The linked entity is Barley stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "Barley stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000001,
        "question": "what are the hosts of black rust? The linked entity is black rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000002,
        "question": "what are the hosts of black stem rust? The linked entity is black stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000100,
        "question": "what plants can have the barley stem rust? The linked entity is Barley stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "Barley stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000101,
        "question": "what plants can have the black rust? The linked entity is black rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000102,
        "question": "what plants can have the black stem rust? The linked entity is black stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000200,
        "question": "which host plant is known to sometimes suffer from barley stem rust? The linked entity is Barley stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "Barley stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000201,
        "question": "which host plant is known to sometimes suffer from black rust? The linked entity is black rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000202,
        "question": "which host plant is known to sometimes suffer from black stem rust? The linked entity is black stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000300,
        "question": "find hosts of the barley stem rust. The linked entity is Barley stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "Barley stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000301,
        "question": "find hosts of the black rust. The linked entity is black rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000302,
        "question": "find hosts of the black stem rust. The linked entity is black stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000400,
        "question": "locate plants capable of hosting barley stem rust. The linked entity is Barley stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "Barley stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000401,
        "question": "locate plants capable of hosting black rust. The linked entity is black rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000402,
        "question": "locate plants capable of hosting black stem rust. The linked entity is black stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000500,
        "question": "barley stem rust has what hosts? The linked entity is Barley stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "Barley stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000501,
        "question": "black rust has what hosts? The linked entity is black rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000502,
        "question": "black stem rust has what hosts? The linked entity is black stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000600,
        "question": "what plants can be affected by the barley stem rust? The linked entity is Barley stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "Barley stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000601,
        "question": "what plants can be affected by the black rust? The linked entity is black rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 425000602,
        "question": "what plants can be affected by the black stem rust? The linked entity is black stem rust (m.02pn8yb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gtx",
                "entity_name": "Barley"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "biology.plant_disease_host",
                    "class": "biology.plant_disease_host",
                    "friendly_name": "Plant Disease Host",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "biology.plant_disease_triangle",
                    "class": "biology.plant_disease_triangle",
                    "friendly_name": "Plant Disease Triangle",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02pn8yb",
                    "class": "biology.plant_disease",
                    "friendly_name": "black stem rust",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "biology.plant_disease_host.disease_s",
                    "friendly_name": "Disease(s)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "biology.plant_disease_triangle.plant_disease",
                    "friendly_name": "Plant disease"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease_host . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.02pn8yb } \n?x0 :biology.plant_disease_host.disease_s ?x1 . \n?x1 :biology.plant_disease_triangle.plant_disease ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND biology.plant_disease_host (JOIN biology.plant_disease_host.disease_s (JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)))",
        "program": "step1:(JOIN biology.plant_disease_triangle.plant_disease m.02pn8yb)[SEP]step2:(JOIN biology.plant_disease_host.disease_s step1)[SEP]step3:(AND biology.plant_disease_host step2)[SEP]"
    },
    {
        "qid": 426000000,
        "question": "ralph lauren creates what fashion brands? The linked entity is Ralph Lauren (m.02c748).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qh2f5t",
                "entity_name": "Ralph Lauren"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.fashion_label",
                    "class": "fashion.fashion_label",
                    "friendly_name": "Fashion label",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fashion.designer_label_association",
                    "class": "fashion.designer_label_association",
                    "friendly_name": "Designer-label association",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02c748",
                    "class": "fashion.fashion_designer",
                    "friendly_name": "Ralph Lauren",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fashion.designer_label_association.label",
                    "friendly_name": "Label"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "fashion.designer_label_association.designer",
                    "friendly_name": "Designer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.fashion_label . \n?x1 :type.object.type :fashion.designer_label_association . \nVALUES ?x2 { :m.02c748 } \n?x1 :fashion.designer_label_association.label ?x0 . \n?x1 :fashion.designer_label_association.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND fashion.fashion_label (JOIN (R fashion.designer_label_association.label) (JOIN fashion.designer_label_association.designer m.02c748)))",
        "program": "step1:(JOIN fashion.designer_label_association.designer m.02c748)[SEP]step2:(JOIN (R fashion.designer_label_association.label) step1)[SEP]step3:(AND fashion.fashion_label step2)[SEP]"
    },
    {
        "qid": 426000100,
        "question": "ralph lauren works for what fashion label? The linked entity is Ralph Lauren (m.02c748).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qh2f5t",
                "entity_name": "Ralph Lauren"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.fashion_label",
                    "class": "fashion.fashion_label",
                    "friendly_name": "Fashion label",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fashion.designer_label_association",
                    "class": "fashion.designer_label_association",
                    "friendly_name": "Designer-label association",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02c748",
                    "class": "fashion.fashion_designer",
                    "friendly_name": "Ralph Lauren",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fashion.designer_label_association.label",
                    "friendly_name": "Label"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "fashion.designer_label_association.designer",
                    "friendly_name": "Designer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.fashion_label . \n?x1 :type.object.type :fashion.designer_label_association . \nVALUES ?x2 { :m.02c748 } \n?x1 :fashion.designer_label_association.label ?x0 . \n?x1 :fashion.designer_label_association.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND fashion.fashion_label (JOIN (R fashion.designer_label_association.label) (JOIN fashion.designer_label_association.designer m.02c748)))",
        "program": "step1:(JOIN fashion.designer_label_association.designer m.02c748)[SEP]step2:(JOIN (R fashion.designer_label_association.label) step1)[SEP]step3:(AND fashion.fashion_label step2)[SEP]"
    },
    {
        "qid": 426000200,
        "question": "what are the labels that ralph lauren designed? The linked entity is Ralph Lauren (m.02c748).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qh2f5t",
                "entity_name": "Ralph Lauren"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.fashion_label",
                    "class": "fashion.fashion_label",
                    "friendly_name": "Fashion label",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fashion.designer_label_association",
                    "class": "fashion.designer_label_association",
                    "friendly_name": "Designer-label association",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02c748",
                    "class": "fashion.fashion_designer",
                    "friendly_name": "Ralph Lauren",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fashion.designer_label_association.label",
                    "friendly_name": "Label"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "fashion.designer_label_association.designer",
                    "friendly_name": "Designer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.fashion_label . \n?x1 :type.object.type :fashion.designer_label_association . \nVALUES ?x2 { :m.02c748 } \n?x1 :fashion.designer_label_association.label ?x0 . \n?x1 :fashion.designer_label_association.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND fashion.fashion_label (JOIN (R fashion.designer_label_association.label) (JOIN fashion.designer_label_association.designer m.02c748)))",
        "program": "step1:(JOIN fashion.designer_label_association.designer m.02c748)[SEP]step2:(JOIN (R fashion.designer_label_association.label) step1)[SEP]step3:(AND fashion.fashion_label step2)[SEP]"
    },
    {
        "qid": 426000300,
        "question": "what labels has ralph lauren made? The linked entity is Ralph Lauren (m.02c748).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qh2f5t",
                "entity_name": "Ralph Lauren"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.fashion_label",
                    "class": "fashion.fashion_label",
                    "friendly_name": "Fashion label",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fashion.designer_label_association",
                    "class": "fashion.designer_label_association",
                    "friendly_name": "Designer-label association",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02c748",
                    "class": "fashion.fashion_designer",
                    "friendly_name": "Ralph Lauren",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fashion.designer_label_association.label",
                    "friendly_name": "Label"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "fashion.designer_label_association.designer",
                    "friendly_name": "Designer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.fashion_label . \n?x1 :type.object.type :fashion.designer_label_association . \nVALUES ?x2 { :m.02c748 } \n?x1 :fashion.designer_label_association.label ?x0 . \n?x1 :fashion.designer_label_association.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND fashion.fashion_label (JOIN (R fashion.designer_label_association.label) (JOIN fashion.designer_label_association.designer m.02c748)))",
        "program": "step1:(JOIN fashion.designer_label_association.designer m.02c748)[SEP]step2:(JOIN (R fashion.designer_label_association.label) step1)[SEP]step3:(AND fashion.fashion_label step2)[SEP]"
    },
    {
        "qid": 426000400,
        "question": "what fashion labels have been created by ralph lauren? The linked entity is Ralph Lauren (m.02c748).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qh2f5t",
                "entity_name": "Ralph Lauren"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.fashion_label",
                    "class": "fashion.fashion_label",
                    "friendly_name": "Fashion label",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fashion.designer_label_association",
                    "class": "fashion.designer_label_association",
                    "friendly_name": "Designer-label association",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02c748",
                    "class": "fashion.fashion_designer",
                    "friendly_name": "Ralph Lauren",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fashion.designer_label_association.label",
                    "friendly_name": "Label"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "fashion.designer_label_association.designer",
                    "friendly_name": "Designer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.fashion_label . \n?x1 :type.object.type :fashion.designer_label_association . \nVALUES ?x2 { :m.02c748 } \n?x1 :fashion.designer_label_association.label ?x0 . \n?x1 :fashion.designer_label_association.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND fashion.fashion_label (JOIN (R fashion.designer_label_association.label) (JOIN fashion.designer_label_association.designer m.02c748)))",
        "program": "step1:(JOIN fashion.designer_label_association.designer m.02c748)[SEP]step2:(JOIN (R fashion.designer_label_association.label) step1)[SEP]step3:(AND fashion.fashion_label step2)[SEP]"
    },
    {
        "qid": 426000500,
        "question": "ralph lauren designs what fashion labels? The linked entity is Ralph Lauren (m.02c748).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qh2f5t",
                "entity_name": "Ralph Lauren"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.fashion_label",
                    "class": "fashion.fashion_label",
                    "friendly_name": "Fashion label",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fashion.designer_label_association",
                    "class": "fashion.designer_label_association",
                    "friendly_name": "Designer-label association",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02c748",
                    "class": "fashion.fashion_designer",
                    "friendly_name": "Ralph Lauren",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fashion.designer_label_association.label",
                    "friendly_name": "Label"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "fashion.designer_label_association.designer",
                    "friendly_name": "Designer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.fashion_label . \n?x1 :type.object.type :fashion.designer_label_association . \nVALUES ?x2 { :m.02c748 } \n?x1 :fashion.designer_label_association.label ?x0 . \n?x1 :fashion.designer_label_association.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND fashion.fashion_label (JOIN (R fashion.designer_label_association.label) (JOIN fashion.designer_label_association.designer m.02c748)))",
        "program": "step1:(JOIN fashion.designer_label_association.designer m.02c748)[SEP]step2:(JOIN (R fashion.designer_label_association.label) step1)[SEP]step3:(AND fashion.fashion_label step2)[SEP]"
    },
    {
        "qid": 426000600,
        "question": "what fashion labels are designed by ralph lauren? The linked entity is Ralph Lauren (m.02c748).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qh2f5t",
                "entity_name": "Ralph Lauren"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fashion.fashion_label",
                    "class": "fashion.fashion_label",
                    "friendly_name": "Fashion label",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fashion.designer_label_association",
                    "class": "fashion.designer_label_association",
                    "friendly_name": "Designer-label association",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02c748",
                    "class": "fashion.fashion_designer",
                    "friendly_name": "Ralph Lauren",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fashion.designer_label_association.label",
                    "friendly_name": "Label"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "fashion.designer_label_association.designer",
                    "friendly_name": "Designer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.fashion_label . \n?x1 :type.object.type :fashion.designer_label_association . \nVALUES ?x2 { :m.02c748 } \n?x1 :fashion.designer_label_association.label ?x0 . \n?x1 :fashion.designer_label_association.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND fashion.fashion_label (JOIN (R fashion.designer_label_association.label) (JOIN fashion.designer_label_association.designer m.02c748)))",
        "program": "step1:(JOIN fashion.designer_label_association.designer m.02c748)[SEP]step2:(JOIN (R fashion.designer_label_association.label) step1)[SEP]step3:(AND fashion.fashion_label step2)[SEP]"
    },
    {
        "qid": 427000000,
        "question": "cheerios uses what standard of barcode? The linked entity is Cheerios (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "Cheerios",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 427000001,
        "question": "cheerio uses what standard of barcode? The linked entity is cheerio (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "cheerio",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 427000100,
        "question": "cheerios uses which standard barcoding system? The linked entity is Cheerios (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "Cheerios",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 427000101,
        "question": "cheerio uses which standard barcoding system? The linked entity is cheerio (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "cheerio",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 427000200,
        "question": "what is the standard of the barcode used by cheerios? The linked entity is Cheerios (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "Cheerios",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 427000201,
        "question": "what is the standard of the barcode used by cheerio? The linked entity is cheerio (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "cheerio",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 427000300,
        "question": "what barcoding system is employed by cheerios? The linked entity is Cheerios (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "Cheerios",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 427000301,
        "question": "what barcoding system is employed by cheerio? The linked entity is cheerio (m.03m1ls).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1yc",
                "entity_name": "Universal Product Code"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.barcode.barcode_system",
                    "class": "base.barcode.barcode_system",
                    "friendly_name": "Barcode system",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.barcode.barcode",
                    "class": "base.barcode.barcode",
                    "friendly_name": "Barcode",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03m1ls",
                    "class": "base.barcode.barcoded_item",
                    "friendly_name": "cheerio",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.barcode.barcode.barcode_system",
                    "friendly_name": "Barcode system"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.barcode.barcoded_item.barcode",
                    "friendly_name": "Barcode"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.barcode.barcode_system . \n?x1 :type.object.type :base.barcode.barcode . \nVALUES ?x2 { :m.03m1ls } \n?x1 :base.barcode.barcode.barcode_system ?x0 . \n?x2 :base.barcode.barcoded_item.barcode ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.barcode.barcode_system (JOIN (R base.barcode.barcode.barcode_system) (JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)))",
        "program": "step1:(JOIN (R base.barcode.barcoded_item.barcode) m.03m1ls)[SEP]step2:(JOIN (R base.barcode.barcode.barcode_system) step1)[SEP]step3:(AND base.barcode.barcode_system step2)[SEP]"
    },
    {
        "qid": 430000000,
        "question": "which lost works of art share with le moulin de blute-fin the same reason for their inability to be recovered? The linked entity is Le Moulin de Blute-Fin (m.0hgz3zy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.044dnb2",
                "entity_name": "Vase with Five Sunflowers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059pt2q",
                "entity_name": "The Seven Sacraments: Penance"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.lost_work",
                    "class": "media_common.lost_work",
                    "friendly_name": "Lost work",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "media_common.cause_of_loss",
                    "class": "media_common.cause_of_loss",
                    "friendly_name": "Cause of loss",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hgz3zy",
                    "class": "media_common.lost_work",
                    "friendly_name": "Le Moulin de Blute-Fin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.lost_work . \n?x1 :type.object.type :media_common.cause_of_loss . \nVALUES ?x2 { :m.0hgz3zy } \n?x0 :media_common.lost_work.reason_for_loss ?x1 . \n?x2 :media_common.lost_work.reason_for_loss ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND media_common.lost_work (JOIN media_common.lost_work.reason_for_loss (JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)))",
        "program": "step1:(JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)[SEP]step2:(JOIN media_common.lost_work.reason_for_loss step1)[SEP]step3:(AND media_common.lost_work step2)[SEP]"
    },
    {
        "qid": 430000100,
        "question": "what work were lost in a similar manner as le moulin de blute-fin? The linked entity is Le Moulin de Blute-Fin (m.0hgz3zy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.044dnb2",
                "entity_name": "Vase with Five Sunflowers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059pt2q",
                "entity_name": "The Seven Sacraments: Penance"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.lost_work",
                    "class": "media_common.lost_work",
                    "friendly_name": "Lost work",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "media_common.cause_of_loss",
                    "class": "media_common.cause_of_loss",
                    "friendly_name": "Cause of loss",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hgz3zy",
                    "class": "media_common.lost_work",
                    "friendly_name": "Le Moulin de Blute-Fin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.lost_work . \n?x1 :type.object.type :media_common.cause_of_loss . \nVALUES ?x2 { :m.0hgz3zy } \n?x0 :media_common.lost_work.reason_for_loss ?x1 . \n?x2 :media_common.lost_work.reason_for_loss ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND media_common.lost_work (JOIN media_common.lost_work.reason_for_loss (JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)))",
        "program": "step1:(JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)[SEP]step2:(JOIN media_common.lost_work.reason_for_loss step1)[SEP]step3:(AND media_common.lost_work step2)[SEP]"
    },
    {
        "qid": 430000200,
        "question": "find the works lost due to the same reason as le moulin de blute-fin. The linked entity is Le Moulin de Blute-Fin (m.0hgz3zy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.044dnb2",
                "entity_name": "Vase with Five Sunflowers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059pt2q",
                "entity_name": "The Seven Sacraments: Penance"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.lost_work",
                    "class": "media_common.lost_work",
                    "friendly_name": "Lost work",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "media_common.cause_of_loss",
                    "class": "media_common.cause_of_loss",
                    "friendly_name": "Cause of loss",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hgz3zy",
                    "class": "media_common.lost_work",
                    "friendly_name": "Le Moulin de Blute-Fin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.lost_work . \n?x1 :type.object.type :media_common.cause_of_loss . \nVALUES ?x2 { :m.0hgz3zy } \n?x0 :media_common.lost_work.reason_for_loss ?x1 . \n?x2 :media_common.lost_work.reason_for_loss ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND media_common.lost_work (JOIN media_common.lost_work.reason_for_loss (JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)))",
        "program": "step1:(JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)[SEP]step2:(JOIN media_common.lost_work.reason_for_loss step1)[SEP]step3:(AND media_common.lost_work step2)[SEP]"
    },
    {
        "qid": 430000300,
        "question": "what other works are said to be lost like le moulin de blute-fin was? The linked entity is Le Moulin de Blute-Fin (m.0hgz3zy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.044dnb2",
                "entity_name": "Vase with Five Sunflowers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059pt2q",
                "entity_name": "The Seven Sacraments: Penance"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.lost_work",
                    "class": "media_common.lost_work",
                    "friendly_name": "Lost work",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "media_common.cause_of_loss",
                    "class": "media_common.cause_of_loss",
                    "friendly_name": "Cause of loss",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hgz3zy",
                    "class": "media_common.lost_work",
                    "friendly_name": "Le Moulin de Blute-Fin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.lost_work . \n?x1 :type.object.type :media_common.cause_of_loss . \nVALUES ?x2 { :m.0hgz3zy } \n?x0 :media_common.lost_work.reason_for_loss ?x1 . \n?x2 :media_common.lost_work.reason_for_loss ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND media_common.lost_work (JOIN media_common.lost_work.reason_for_loss (JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)))",
        "program": "step1:(JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)[SEP]step2:(JOIN media_common.lost_work.reason_for_loss step1)[SEP]step3:(AND media_common.lost_work step2)[SEP]"
    },
    {
        "qid": 430000400,
        "question": "le moulin de blute-fin is lost for similar reasons to which other pieces? The linked entity is Le Moulin de Blute-Fin (m.0hgz3zy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.044dnb2",
                "entity_name": "Vase with Five Sunflowers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059pt2q",
                "entity_name": "The Seven Sacraments: Penance"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.lost_work",
                    "class": "media_common.lost_work",
                    "friendly_name": "Lost work",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "media_common.cause_of_loss",
                    "class": "media_common.cause_of_loss",
                    "friendly_name": "Cause of loss",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hgz3zy",
                    "class": "media_common.lost_work",
                    "friendly_name": "Le Moulin de Blute-Fin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.lost_work . \n?x1 :type.object.type :media_common.cause_of_loss . \nVALUES ?x2 { :m.0hgz3zy } \n?x0 :media_common.lost_work.reason_for_loss ?x1 . \n?x2 :media_common.lost_work.reason_for_loss ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND media_common.lost_work (JOIN media_common.lost_work.reason_for_loss (JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)))",
        "program": "step1:(JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)[SEP]step2:(JOIN media_common.lost_work.reason_for_loss step1)[SEP]step3:(AND media_common.lost_work step2)[SEP]"
    },
    {
        "qid": 430000500,
        "question": "what works are lost for the same reason as le moulin de blute-fin? The linked entity is Le Moulin de Blute-Fin (m.0hgz3zy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.044dnb2",
                "entity_name": "Vase with Five Sunflowers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059pt2q",
                "entity_name": "The Seven Sacraments: Penance"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.lost_work",
                    "class": "media_common.lost_work",
                    "friendly_name": "Lost work",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "media_common.cause_of_loss",
                    "class": "media_common.cause_of_loss",
                    "friendly_name": "Cause of loss",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0hgz3zy",
                    "class": "media_common.lost_work",
                    "friendly_name": "Le Moulin de Blute-Fin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "media_common.lost_work.reason_for_loss",
                    "friendly_name": "Reason for loss"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.lost_work . \n?x1 :type.object.type :media_common.cause_of_loss . \nVALUES ?x2 { :m.0hgz3zy } \n?x0 :media_common.lost_work.reason_for_loss ?x1 . \n?x2 :media_common.lost_work.reason_for_loss ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND media_common.lost_work (JOIN media_common.lost_work.reason_for_loss (JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)))",
        "program": "step1:(JOIN (R media_common.lost_work.reason_for_loss) m.0hgz3zy)[SEP]step2:(JOIN media_common.lost_work.reason_for_loss step1)[SEP]step3:(AND media_common.lost_work step2)[SEP]"
    },
    {
        "qid": 431000000,
        "question": "which pet diseases are caused by the same thing as canine arthritis? The linked entity is Canine arthritis (m.05gj3zc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05yv9kh",
                "entity_name": "Pancreatitis in cats and dogs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b9fw1",
                "entity_name": "Corneal ulcers in animals"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.pethealth.pet_disease_or_medical_condition",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Pet disease or medical condition",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.pethealth.cause",
                    "class": "base.pethealth.cause",
                    "friendly_name": "Pet Disease Cause",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05gj3zc",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Canine arthritis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.pethealth.cause.pet_diseases_or_conditions_caused",
                    "friendly_name": "Pet diseases or conditions caused"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.pethealth.pet_disease_or_medical_condition.causes",
                    "friendly_name": "Causes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.pethealth.pet_disease_or_medical_condition . \n?x1 :type.object.type :base.pethealth.cause . \nVALUES ?x2 { :m.05gj3zc } \n?x1 :base.pethealth.cause.pet_diseases_or_conditions_caused ?x0 . \n?x2 :base.pethealth.pet_disease_or_medical_condition.causes ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.pethealth.pet_disease_or_medical_condition (JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) (JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)))",
        "program": "step1:(JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)[SEP]step2:(JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) step1)[SEP]step3:(AND base.pethealth.pet_disease_or_medical_condition step2)[SEP]"
    },
    {
        "qid": 431000100,
        "question": "what other pet diseases occur for the same reason as canine arthritis? The linked entity is Canine arthritis (m.05gj3zc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05yv9kh",
                "entity_name": "Pancreatitis in cats and dogs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b9fw1",
                "entity_name": "Corneal ulcers in animals"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.pethealth.pet_disease_or_medical_condition",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Pet disease or medical condition",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.pethealth.cause",
                    "class": "base.pethealth.cause",
                    "friendly_name": "Pet Disease Cause",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05gj3zc",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Canine arthritis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.pethealth.cause.pet_diseases_or_conditions_caused",
                    "friendly_name": "Pet diseases or conditions caused"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.pethealth.pet_disease_or_medical_condition.causes",
                    "friendly_name": "Causes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.pethealth.pet_disease_or_medical_condition . \n?x1 :type.object.type :base.pethealth.cause . \nVALUES ?x2 { :m.05gj3zc } \n?x1 :base.pethealth.cause.pet_diseases_or_conditions_caused ?x0 . \n?x2 :base.pethealth.pet_disease_or_medical_condition.causes ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.pethealth.pet_disease_or_medical_condition (JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) (JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)))",
        "program": "step1:(JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)[SEP]step2:(JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) step1)[SEP]step3:(AND base.pethealth.pet_disease_or_medical_condition step2)[SEP]"
    },
    {
        "qid": 431000200,
        "question": "what pet diseases have the same cause with canine arthritis? The linked entity is Canine arthritis (m.05gj3zc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05yv9kh",
                "entity_name": "Pancreatitis in cats and dogs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b9fw1",
                "entity_name": "Corneal ulcers in animals"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.pethealth.pet_disease_or_medical_condition",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Pet disease or medical condition",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.pethealth.cause",
                    "class": "base.pethealth.cause",
                    "friendly_name": "Pet Disease Cause",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05gj3zc",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Canine arthritis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.pethealth.cause.pet_diseases_or_conditions_caused",
                    "friendly_name": "Pet diseases or conditions caused"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.pethealth.pet_disease_or_medical_condition.causes",
                    "friendly_name": "Causes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.pethealth.pet_disease_or_medical_condition . \n?x1 :type.object.type :base.pethealth.cause . \nVALUES ?x2 { :m.05gj3zc } \n?x1 :base.pethealth.cause.pet_diseases_or_conditions_caused ?x0 . \n?x2 :base.pethealth.pet_disease_or_medical_condition.causes ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.pethealth.pet_disease_or_medical_condition (JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) (JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)))",
        "program": "step1:(JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)[SEP]step2:(JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) step1)[SEP]step3:(AND base.pethealth.pet_disease_or_medical_condition step2)[SEP]"
    },
    {
        "qid": 431000300,
        "question": "the cause of canine arthritis can lead to what other diseases? The linked entity is Canine arthritis (m.05gj3zc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05yv9kh",
                "entity_name": "Pancreatitis in cats and dogs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b9fw1",
                "entity_name": "Corneal ulcers in animals"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.pethealth.pet_disease_or_medical_condition",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Pet disease or medical condition",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.pethealth.cause",
                    "class": "base.pethealth.cause",
                    "friendly_name": "Pet Disease Cause",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05gj3zc",
                    "class": "base.pethealth.pet_disease_or_medical_condition",
                    "friendly_name": "Canine arthritis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.pethealth.cause.pet_diseases_or_conditions_caused",
                    "friendly_name": "Pet diseases or conditions caused"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.pethealth.pet_disease_or_medical_condition.causes",
                    "friendly_name": "Causes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.pethealth.pet_disease_or_medical_condition . \n?x1 :type.object.type :base.pethealth.cause . \nVALUES ?x2 { :m.05gj3zc } \n?x1 :base.pethealth.cause.pet_diseases_or_conditions_caused ?x0 . \n?x2 :base.pethealth.pet_disease_or_medical_condition.causes ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.pethealth.pet_disease_or_medical_condition (JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) (JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)))",
        "program": "step1:(JOIN (R base.pethealth.pet_disease_or_medical_condition.causes) m.05gj3zc)[SEP]step2:(JOIN (R base.pethealth.cause.pet_diseases_or_conditions_caused) step1)[SEP]step3:(AND base.pethealth.pet_disease_or_medical_condition step2)[SEP]"
    },
    {
        "qid": 434000000,
        "question": "what was michael jackson inducted into the hall of fame as? The linked entity is Michael Jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "Michael Jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000001,
        "question": "what was mj inducted into the hall of fame as? The linked entity is mj (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "mj",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000002,
        "question": "what was jackson inducted into the hall of fame as? The linked entity is jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000100,
        "question": "what title was given to michael jackson when he was inducted into the hall of fame? The linked entity is Michael Jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "Michael Jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000101,
        "question": "what title was given to mj when he was inducted into the hall of fame? The linked entity is mj (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "mj",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000102,
        "question": "what title was given to jackson when he was inducted into the hall of fame? The linked entity is jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000200,
        "question": "under which category was michael jackson inducted into a hall of fame? The linked entity is Michael Jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "Michael Jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000201,
        "question": "under which category was mj inducted into a hall of fame? The linked entity is mj (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "mj",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000202,
        "question": "under which category was jackson inducted into a hall of fame? The linked entity is jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000300,
        "question": "michael jackson was inducted into a hall of fame as what? The linked entity is Michael Jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "Michael Jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000301,
        "question": "mj was inducted into a hall of fame as what? The linked entity is mj (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "mj",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 434000302,
        "question": "jackson was inducted into a hall of fame as what? The linked entity is jackson (m.09889g).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rbly",
                "entity_name": "Performers"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction_category",
                    "class": "award.hall_of_fame_induction_category",
                    "friendly_name": "Hall of fame induction category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "award.hall_of_fame_induction",
                    "class": "award.hall_of_fame_induction",
                    "friendly_name": "Hall of fame induction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.09889g",
                    "class": "award.hall_of_fame_inductee",
                    "friendly_name": "jackson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "award.hall_of_fame_inductee.hall_of_fame_inductions",
                    "friendly_name": "Hall of fame inductions"
                },
                {
                    "start": 1,
                    "end": 0,
                    "relation": "award.hall_of_fame_induction.category",
                    "friendly_name": "Category"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.hall_of_fame_induction_category . \n?x1 :type.object.type :award.hall_of_fame_induction . \nVALUES ?x2 { :m.09889g } \n?x2 :award.hall_of_fame_inductee.hall_of_fame_inductions ?x1 . \n?x1 :award.hall_of_fame_induction.category ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND award.hall_of_fame_induction_category (JOIN (R award.hall_of_fame_induction.category) (JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)))",
        "program": "step1:(JOIN (R award.hall_of_fame_inductee.hall_of_fame_inductions) m.09889g)[SEP]step2:(JOIN (R award.hall_of_fame_induction.category) step1)[SEP]step3:(AND award.hall_of_fame_induction_category step2)[SEP]"
    },
    {
        "qid": 435000000,
        "question": "in the same system that uses kelvin for temperature, what unit measures magnetic field strength? The linked entity is Kelvin (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Kelvin",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000001,
        "question": "in the same system that uses kelvin scale for temperature, what unit measures magnetic field strength? The linked entity is kelvin scale (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin scale",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000002,
        "question": "in the same system that uses kelvin degree for temperature, what unit measures magnetic field strength? The linked entity is kelvin degree (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin degree",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000100,
        "question": "in the measurement system using kelvin for temperature, what's the unit for magnetic field strength? The linked entity is Kelvin (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Kelvin",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000101,
        "question": "in the measurement system using kelvin scale for temperature, what's the unit for magnetic field strength? The linked entity is kelvin scale (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin scale",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000102,
        "question": "in the measurement system using kelvin degree for temperature, what's the unit for magnetic field strength? The linked entity is kelvin degree (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin degree",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000200,
        "question": "what is the unit for magnetic field strength in the measurement system using kelvin for temperature? The linked entity is Kelvin (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Kelvin",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000201,
        "question": "what is the unit for magnetic field strength in the measurement system using kelvin scale for temperature? The linked entity is kelvin scale (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin scale",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000202,
        "question": "what is the unit for magnetic field strength in the measurement system using kelvin degree for temperature? The linked entity is kelvin degree (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin degree",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000300,
        "question": "which is the unit for magnetic strength in the same measuring system that uses kelvin? The linked entity is Kelvin (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Kelvin",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000301,
        "question": "which is the unit for magnetic strength in the same measuring system that uses kelvin scale? The linked entity is kelvin scale (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin scale",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 435000302,
        "question": "which is the unit for magnetic strength in the same measuring system that uses kelvin degree? The linked entity is kelvin degree (m.047f7).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj414",
                "entity_name": "Ampere per metre"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_field_strength_unit",
                    "class": "measurement_unit.magnetic_field_strength_unit",
                    "friendly_name": "Unit of Magnetic Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047f7",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "kelvin degree",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 2,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.temperature_units",
                    "friendly_name": "Temperature Units"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "measurement_unit.measurement_system.magnetic_field_strength_units",
                    "friendly_name": "Magnetic Field Strength Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_field_strength_unit . \nVALUES ?x1 { :m.047f7 } \n?x2 :type.object.type :measurement_unit.measurement_system . \n?x2 :measurement_unit.measurement_system.temperature_units ?x1 . \n?x2 :measurement_unit.measurement_system.magnetic_field_strength_units ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND measurement_unit.magnetic_field_strength_unit (JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) (JOIN measurement_unit.measurement_system.temperature_units m.047f7)))",
        "program": "step1:(JOIN measurement_unit.measurement_system.temperature_units m.047f7)[SEP]step2:(JOIN (R measurement_unit.measurement_system.magnetic_field_strength_units) step1)[SEP]step3:(AND measurement_unit.magnetic_field_strength_unit step2)[SEP]"
    },
    {
        "qid": 436000000,
        "question": "what is largest unit of area in the international system of units? The linked entity is International System of Units (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000001,
        "question": "what is largest unit of area in the si? The linked entity is si (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000002,
        "question": "what is largest unit of area in the si system? The linked entity is si system (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si system",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000100,
        "question": "the largest unit of area in the international system of units is called as? The linked entity is International System of Units (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000101,
        "question": "the largest unit of area in the si is called as? The linked entity is si (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000102,
        "question": "the largest unit of area in the si system is called as? The linked entity is si system (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si system",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000200,
        "question": "which is the biggest unit of area defined in the international system of units? The linked entity is International System of Units (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000201,
        "question": "which is the biggest unit of area defined in the si? The linked entity is si (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000202,
        "question": "which is the biggest unit of area defined in the si system? The linked entity is si system (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si system",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000300,
        "question": "which area unit in the international system of units is the largest? The linked entity is International System of Units (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000301,
        "question": "which area unit in the si is the largest? The linked entity is si (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 436000302,
        "question": "which area unit in the si system is the largest? The linked entity is si system (m.0c13h).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jljd",
                "entity_name": "Square kilometer"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.area_unit",
                    "class": "measurement_unit.area_unit",
                    "friendly_name": "Unit of Area",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "si system",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.area_unit.area_in_square_meters",
                    "friendly_name": "Area In Square Meters"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "measurement_unit.area_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.area_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.area_unit . \nVALUES ?y2 { :m.0c13h } \n?y0 :measurement_unit.area_unit.area_in_square_meters ?y1 . \n?y0 :measurement_unit.area_unit.measurement_system ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0c13h } \n?x0 :measurement_unit.area_unit.area_in_square_meters ?x1 . \n?x0 :measurement_unit.area_unit.measurement_system ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX (AND measurement_unit.area_unit (JOIN measurement_unit.area_unit.measurement_system m.0c13h)) measurement_unit.area_unit.area_in_square_meters)",
        "program": "step1:(JOIN measurement_unit.area_unit.measurement_system m.0c13h)[SEP]step2:(AND measurement_unit.area_unit step1)[SEP]step3:(ARGMAX step2 measurement_unit.area_unit.area_in_square_meters)[SEP]"
    },
    {
        "qid": 437000000,
        "question": "which martial arts have a black belt level? The linked entity is Black belt (m.02gss8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ddb4",
                "entity_name": "Brazilian jiu-jitsu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cxf5",
                "entity_name": "American Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cjpb3",
                "entity_name": "SeishinDo Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gyv",
                "entity_name": "Taekwondo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_8r",
                "entity_name": "Judo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048dz",
                "entity_name": "Karate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8qnq_",
                "entity_name": "Tsoi Li Ho Fut Hung"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "martial_arts.martial_art",
                    "class": "martial_arts.martial_art",
                    "friendly_name": "Martial Art",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "martial_arts.martial_arts_certification",
                    "class": "martial_arts.martial_arts_certification",
                    "friendly_name": "Martial Arts Certification",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02gss8",
                    "class": "martial_arts.martial_arts_qualification",
                    "friendly_name": "Black belt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "martial_arts.martial_arts_certification.art",
                    "friendly_name": "Art"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "martial_arts.martial_arts_certification.qualification",
                    "friendly_name": "Qualification"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \n?x1 :type.object.type :martial_arts.martial_arts_certification . \nVALUES ?x2 { :m.02gss8 } \n?x1 :martial_arts.martial_arts_certification.art ?x0 . \n?x1 :martial_arts.martial_arts_certification.qualification ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND martial_arts.martial_art (JOIN (R martial_arts.martial_arts_certification.art) (JOIN martial_arts.martial_arts_certification.qualification m.02gss8)))",
        "program": "step1:(JOIN martial_arts.martial_arts_certification.qualification m.02gss8)[SEP]step2:(JOIN (R martial_arts.martial_arts_certification.art) step1)[SEP]step3:(AND martial_arts.martial_art step2)[SEP]"
    },
    {
        "qid": 437000100,
        "question": "list the martial arts disciplines that assign the rank of black belt? The linked entity is Black belt (m.02gss8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ddb4",
                "entity_name": "Brazilian jiu-jitsu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cxf5",
                "entity_name": "American Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cjpb3",
                "entity_name": "SeishinDo Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gyv",
                "entity_name": "Taekwondo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_8r",
                "entity_name": "Judo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048dz",
                "entity_name": "Karate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8qnq_",
                "entity_name": "Tsoi Li Ho Fut Hung"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "martial_arts.martial_art",
                    "class": "martial_arts.martial_art",
                    "friendly_name": "Martial Art",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "martial_arts.martial_arts_certification",
                    "class": "martial_arts.martial_arts_certification",
                    "friendly_name": "Martial Arts Certification",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02gss8",
                    "class": "martial_arts.martial_arts_qualification",
                    "friendly_name": "Black belt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "martial_arts.martial_arts_certification.art",
                    "friendly_name": "Art"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "martial_arts.martial_arts_certification.qualification",
                    "friendly_name": "Qualification"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \n?x1 :type.object.type :martial_arts.martial_arts_certification . \nVALUES ?x2 { :m.02gss8 } \n?x1 :martial_arts.martial_arts_certification.art ?x0 . \n?x1 :martial_arts.martial_arts_certification.qualification ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND martial_arts.martial_art (JOIN (R martial_arts.martial_arts_certification.art) (JOIN martial_arts.martial_arts_certification.qualification m.02gss8)))",
        "program": "step1:(JOIN martial_arts.martial_arts_certification.qualification m.02gss8)[SEP]step2:(JOIN (R martial_arts.martial_arts_certification.art) step1)[SEP]step3:(AND martial_arts.martial_art step2)[SEP]"
    },
    {
        "qid": 437000200,
        "question": "what form of martial arts has black belt as a title? The linked entity is Black belt (m.02gss8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ddb4",
                "entity_name": "Brazilian jiu-jitsu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cxf5",
                "entity_name": "American Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cjpb3",
                "entity_name": "SeishinDo Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gyv",
                "entity_name": "Taekwondo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_8r",
                "entity_name": "Judo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048dz",
                "entity_name": "Karate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8qnq_",
                "entity_name": "Tsoi Li Ho Fut Hung"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "martial_arts.martial_art",
                    "class": "martial_arts.martial_art",
                    "friendly_name": "Martial Art",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "martial_arts.martial_arts_certification",
                    "class": "martial_arts.martial_arts_certification",
                    "friendly_name": "Martial Arts Certification",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02gss8",
                    "class": "martial_arts.martial_arts_qualification",
                    "friendly_name": "Black belt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "martial_arts.martial_arts_certification.art",
                    "friendly_name": "Art"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "martial_arts.martial_arts_certification.qualification",
                    "friendly_name": "Qualification"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \n?x1 :type.object.type :martial_arts.martial_arts_certification . \nVALUES ?x2 { :m.02gss8 } \n?x1 :martial_arts.martial_arts_certification.art ?x0 . \n?x1 :martial_arts.martial_arts_certification.qualification ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND martial_arts.martial_art (JOIN (R martial_arts.martial_arts_certification.art) (JOIN martial_arts.martial_arts_certification.qualification m.02gss8)))",
        "program": "step1:(JOIN martial_arts.martial_arts_certification.qualification m.02gss8)[SEP]step2:(JOIN (R martial_arts.martial_arts_certification.art) step1)[SEP]step3:(AND martial_arts.martial_art step2)[SEP]"
    },
    {
        "qid": 437000300,
        "question": "black belts are awarded in which martial arts disciplines? The linked entity is Black belt (m.02gss8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ddb4",
                "entity_name": "Brazilian jiu-jitsu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cxf5",
                "entity_name": "American Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cjpb3",
                "entity_name": "SeishinDo Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gyv",
                "entity_name": "Taekwondo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_8r",
                "entity_name": "Judo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048dz",
                "entity_name": "Karate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8qnq_",
                "entity_name": "Tsoi Li Ho Fut Hung"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "martial_arts.martial_art",
                    "class": "martial_arts.martial_art",
                    "friendly_name": "Martial Art",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "martial_arts.martial_arts_certification",
                    "class": "martial_arts.martial_arts_certification",
                    "friendly_name": "Martial Arts Certification",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02gss8",
                    "class": "martial_arts.martial_arts_qualification",
                    "friendly_name": "Black belt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "martial_arts.martial_arts_certification.art",
                    "friendly_name": "Art"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "martial_arts.martial_arts_certification.qualification",
                    "friendly_name": "Qualification"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \n?x1 :type.object.type :martial_arts.martial_arts_certification . \nVALUES ?x2 { :m.02gss8 } \n?x1 :martial_arts.martial_arts_certification.art ?x0 . \n?x1 :martial_arts.martial_arts_certification.qualification ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND martial_arts.martial_art (JOIN (R martial_arts.martial_arts_certification.art) (JOIN martial_arts.martial_arts_certification.qualification m.02gss8)))",
        "program": "step1:(JOIN martial_arts.martial_arts_certification.qualification m.02gss8)[SEP]step2:(JOIN (R martial_arts.martial_arts_certification.art) step1)[SEP]step3:(AND martial_arts.martial_art step2)[SEP]"
    },
    {
        "qid": 437000400,
        "question": "what kind of martial arts use black belt as a title? The linked entity is Black belt (m.02gss8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ddb4",
                "entity_name": "Brazilian jiu-jitsu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cxf5",
                "entity_name": "American Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cjpb3",
                "entity_name": "SeishinDo Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gyv",
                "entity_name": "Taekwondo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_8r",
                "entity_name": "Judo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048dz",
                "entity_name": "Karate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8qnq_",
                "entity_name": "Tsoi Li Ho Fut Hung"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "martial_arts.martial_art",
                    "class": "martial_arts.martial_art",
                    "friendly_name": "Martial Art",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "martial_arts.martial_arts_certification",
                    "class": "martial_arts.martial_arts_certification",
                    "friendly_name": "Martial Arts Certification",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02gss8",
                    "class": "martial_arts.martial_arts_qualification",
                    "friendly_name": "Black belt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "martial_arts.martial_arts_certification.art",
                    "friendly_name": "Art"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "martial_arts.martial_arts_certification.qualification",
                    "friendly_name": "Qualification"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \n?x1 :type.object.type :martial_arts.martial_arts_certification . \nVALUES ?x2 { :m.02gss8 } \n?x1 :martial_arts.martial_arts_certification.art ?x0 . \n?x1 :martial_arts.martial_arts_certification.qualification ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND martial_arts.martial_art (JOIN (R martial_arts.martial_arts_certification.art) (JOIN martial_arts.martial_arts_certification.qualification m.02gss8)))",
        "program": "step1:(JOIN martial_arts.martial_arts_certification.qualification m.02gss8)[SEP]step2:(JOIN (R martial_arts.martial_arts_certification.art) step1)[SEP]step3:(AND martial_arts.martial_art step2)[SEP]"
    },
    {
        "qid": 437000500,
        "question": "the title black belt is used by which martial arts? The linked entity is Black belt (m.02gss8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ddb4",
                "entity_name": "Brazilian jiu-jitsu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cxf5",
                "entity_name": "American Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cjpb3",
                "entity_name": "SeishinDo Kenpo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gyv",
                "entity_name": "Taekwondo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_8r",
                "entity_name": "Judo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048dz",
                "entity_name": "Karate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8qnq_",
                "entity_name": "Tsoi Li Ho Fut Hung"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "martial_arts.martial_art",
                    "class": "martial_arts.martial_art",
                    "friendly_name": "Martial Art",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "martial_arts.martial_arts_certification",
                    "class": "martial_arts.martial_arts_certification",
                    "friendly_name": "Martial Arts Certification",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02gss8",
                    "class": "martial_arts.martial_arts_qualification",
                    "friendly_name": "Black belt",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "martial_arts.martial_arts_certification.art",
                    "friendly_name": "Art"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "martial_arts.martial_arts_certification.qualification",
                    "friendly_name": "Qualification"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \n?x1 :type.object.type :martial_arts.martial_arts_certification . \nVALUES ?x2 { :m.02gss8 } \n?x1 :martial_arts.martial_arts_certification.art ?x0 . \n?x1 :martial_arts.martial_arts_certification.qualification ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND martial_arts.martial_art (JOIN (R martial_arts.martial_arts_certification.art) (JOIN martial_arts.martial_arts_certification.qualification m.02gss8)))",
        "program": "step1:(JOIN martial_arts.martial_arts_certification.qualification m.02gss8)[SEP]step2:(JOIN (R martial_arts.martial_arts_certification.art) step1)[SEP]step3:(AND martial_arts.martial_art step2)[SEP]"
    },
    {
        "qid": 438000000,
        "question": "the designer of rock band 2 created how many other games? The linked entity is Rock Band 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "Rock Band 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000001,
        "question": "the designer of rb2 created how many other games? The linked entity is rb2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rb2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000002,
        "question": "the designer of rockband 2 created how many other games? The linked entity is rockband 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rockband 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000100,
        "question": "the company that designed rock band 2 has designed how many other games? The linked entity is Rock Band 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "Rock Band 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000101,
        "question": "the company that designed rb2 has designed how many other games? The linked entity is rb2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rb2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000102,
        "question": "the company that designed rockband 2 has designed how many other games? The linked entity is rockband 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rockband 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000200,
        "question": "how many other games are designed by the designer of rock band 2? The linked entity is Rock Band 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "Rock Band 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000201,
        "question": "how many other games are designed by the designer of rb2? The linked entity is rb2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rb2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000202,
        "question": "how many other games are designed by the designer of rockband 2? The linked entity is rockband 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rockband 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000300,
        "question": "what is the number of other video games credited to the creator of rock band 2? The linked entity is Rock Band 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "Rock Band 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000301,
        "question": "what is the number of other video games credited to the creator of rb2? The linked entity is rb2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rb2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 438000302,
        "question": "what is the number of other video games credited to the creator of rockband 2? The linked entity is rockband 2 (m.04kbkd1).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rockband 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.cvg_designer.games_designed",
                    "friendly_name": "Games Designed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \n?x1 :type.object.type :cvg.cvg_designer . \nVALUES ?x2 { :m.04kbkd1 } \n?x0 :cvg.computer_videogame.designers ?x1 . \n?x1 :cvg.cvg_designer.games_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND cvg.computer_videogame (JOIN cvg.computer_videogame.designers (JOIN cvg.cvg_designer.games_designed m.04kbkd1))))",
        "program": "step1:(JOIN cvg.cvg_designer.games_designed m.04kbkd1)[SEP]step2:(JOIN cvg.computer_videogame.designers step1)[SEP]step3:(AND cvg.computer_videogame step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 439000000,
        "question": "which nation has deployed the largest military force during a war?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000100,
        "question": "which country had the biggest army in a war?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000200,
        "question": "what country had the largest war force?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000300,
        "question": "which country has deployed the largest force in war?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000400,
        "question": "what is the country of the largest force that is deployed in any war?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000500,
        "question": "what nation sent the largest force of war?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000600,
        "question": "who have put the largest force in war?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000700,
        "question": "what country has held the largest military force in a war?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 439000800,
        "question": "the largest force in war was deployed by which country?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vz3zq",
                "entity_name": "Soviet Union"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "military.military_combatant",
                    "class": "military.military_combatant",
                    "friendly_name": "Military Combatant",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "military.force_strength",
                    "class": "military.force_strength",
                    "friendly_name": "Force Strength",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "military.force_strength.combatant",
                    "friendly_name": "Combatant"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "military.force_strength.force_size",
                    "friendly_name": "Force Size"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \n?x1 :type.object.type :military.force_strength . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :military.military_combatant . \n?y1 :type.object.type :military.force_strength . \n?y1 :military.force_strength.combatant ?y0 . \n?y1 :military.force_strength.force_size ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :military.force_strength.combatant ?x0 . \n?x1 :military.force_strength.force_size ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX military.military_combatant (R military.force_strength.combatant) military.force_strength.force_size)",
        "program": "step1:(ARGMAX military.military_combatant R military.force_strength.combatant)[SEP]"
    },
    {
        "qid": 443000000,
        "question": "how many tournaments has roger federer won? The linked entity is Roger Federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "Roger Federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000001,
        "question": "how many tournaments has federer won? The linked entity is federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000100,
        "question": "what is the number of tennis tournament championships won by roger federer? The linked entity is Roger Federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "Roger Federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000101,
        "question": "what is the number of tennis tournament championships won by federer? The linked entity is federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000200,
        "question": "roger federer has won how many tennis tournament championship? The linked entity is Roger Federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "Roger Federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000201,
        "question": "federer has won how many tennis tournament championship? The linked entity is federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000300,
        "question": "roger federer has won how many tennis tournament championships? The linked entity is Roger Federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "Roger Federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000301,
        "question": "federer has won how many tennis tournament championships? The linked entity is federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000400,
        "question": "what's the total number of tournament championships that roger federer has amassed? The linked entity is Roger Federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "Roger Federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000401,
        "question": "what's the total number of tournament championships that federer has amassed? The linked entity is federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000500,
        "question": "in how many tournaments is roger federer the final winner? The linked entity is Roger Federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "Roger Federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000501,
        "question": "in how many tournaments is federer the final winner? The linked entity is federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000600,
        "question": "how many tennis tournament championships has roger federer won? The linked entity is Roger Federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "Roger Federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 443000601,
        "question": "how many tennis tournament championships has federer won? The linked entity is federer (m.01my95).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "13"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament",
                    "class": "tennis.tennis_tournament",
                    "friendly_name": "Tennis Tournament",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tennis.tennis_tournament_championship",
                    "class": "tennis.tennis_tournament_championship",
                    "friendly_name": "Tennis Tournament Championship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01my95",
                    "class": "tennis.tennis_tournament_champion",
                    "friendly_name": "federer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_tournament.champions",
                    "friendly_name": "Champions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tennis.tennis_tournament_championship.winner",
                    "friendly_name": "Winner"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?x2 { :m.01my95 } \n?x0 :tennis.tennis_tournament.champions ?x1 . \n?x1 :tennis.tennis_tournament_championship.winner ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND tennis.tennis_tournament (JOIN tennis.tennis_tournament.champions (JOIN tennis.tennis_tournament_championship.winner m.01my95))))",
        "program": "step1:(JOIN tennis.tennis_tournament_championship.winner m.01my95)[SEP]step2:(JOIN tennis.tennis_tournament.champions step1)[SEP]step3:(AND tennis.tennis_tournament step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 446000000,
        "question": "find the formula 1 teams that have recorded 1 fastest laps and have completed at least 2 races.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p8qly",
                "entity_name": "Brawn GP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d09v",
                "entity_name": "Arrows Grand Prix International"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046fx_",
                "entity_name": "Toyota Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n6dl",
                "entity_name": "Ensign Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kvys",
                "entity_name": "Kojima Engineering"
            }
        ],
        "function": ">=",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.formula1.formula_1_team",
                    "class": "base.formula1.formula_1_team",
                    "friendly_name": "Formula 1 Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "2^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "2",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.formula1.formula_1_team.fastest_lap_count",
                    "friendly_name": "Fastest Laps"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "base.formula1.formula_1_team.race_count",
                    "friendly_name": "Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.formula1.formula_1_team . \nVALUES ?x1 { \"1\"^^<http://www.w3.org/2001/XMLSchema#integer> } \nFILTER (?x2 >= \"2\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :base.formula1.formula_1_team.fastest_lap_count ?x1 . \n?x0 :base.formula1.formula_1_team.race_count ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.formula1.formula_1_team (AND (JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer) (ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)))",
        "program": "step1:(JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step3:(AND step1 step2)[SEP]step4:(AND base.formula1.formula_1_team step3)[SEP]"
    },
    {
        "qid": 446000100,
        "question": "which formula 1 teams have completed at least 2 races and have recorded 1 fastest laps?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p8qly",
                "entity_name": "Brawn GP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d09v",
                "entity_name": "Arrows Grand Prix International"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046fx_",
                "entity_name": "Toyota Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n6dl",
                "entity_name": "Ensign Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kvys",
                "entity_name": "Kojima Engineering"
            }
        ],
        "function": ">=",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.formula1.formula_1_team",
                    "class": "base.formula1.formula_1_team",
                    "friendly_name": "Formula 1 Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "2^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "2",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.formula1.formula_1_team.fastest_lap_count",
                    "friendly_name": "Fastest Laps"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "base.formula1.formula_1_team.race_count",
                    "friendly_name": "Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.formula1.formula_1_team . \nVALUES ?x1 { \"1\"^^<http://www.w3.org/2001/XMLSchema#integer> } \nFILTER (?x2 >= \"2\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :base.formula1.formula_1_team.fastest_lap_count ?x1 . \n?x0 :base.formula1.formula_1_team.race_count ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.formula1.formula_1_team (AND (JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer) (ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)))",
        "program": "step1:(JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step3:(AND step1 step2)[SEP]step4:(AND base.formula1.formula_1_team step3)[SEP]"
    },
    {
        "qid": 446000200,
        "question": "of all the formula 1 teams which have completed at least 2 races, which have recorded 1 fastest laps?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p8qly",
                "entity_name": "Brawn GP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d09v",
                "entity_name": "Arrows Grand Prix International"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046fx_",
                "entity_name": "Toyota Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n6dl",
                "entity_name": "Ensign Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kvys",
                "entity_name": "Kojima Engineering"
            }
        ],
        "function": ">=",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.formula1.formula_1_team",
                    "class": "base.formula1.formula_1_team",
                    "friendly_name": "Formula 1 Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "2^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "2",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.formula1.formula_1_team.fastest_lap_count",
                    "friendly_name": "Fastest Laps"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "base.formula1.formula_1_team.race_count",
                    "friendly_name": "Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.formula1.formula_1_team . \nVALUES ?x1 { \"1\"^^<http://www.w3.org/2001/XMLSchema#integer> } \nFILTER (?x2 >= \"2\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :base.formula1.formula_1_team.fastest_lap_count ?x1 . \n?x0 :base.formula1.formula_1_team.race_count ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.formula1.formula_1_team (AND (JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer) (ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)))",
        "program": "step1:(JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step3:(AND step1 step2)[SEP]step4:(AND base.formula1.formula_1_team step3)[SEP]"
    },
    {
        "qid": 446000300,
        "question": "name the formula 1 racers completing a minimum of 2 races with exactly 1 recorded fastest laps?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p8qly",
                "entity_name": "Brawn GP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d09v",
                "entity_name": "Arrows Grand Prix International"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046fx_",
                "entity_name": "Toyota Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n6dl",
                "entity_name": "Ensign Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kvys",
                "entity_name": "Kojima Engineering"
            }
        ],
        "function": ">=",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.formula1.formula_1_team",
                    "class": "base.formula1.formula_1_team",
                    "friendly_name": "Formula 1 Team",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "2^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "2",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.formula1.formula_1_team.fastest_lap_count",
                    "friendly_name": "Fastest Laps"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "base.formula1.formula_1_team.race_count",
                    "friendly_name": "Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.formula1.formula_1_team . \nVALUES ?x1 { \"1\"^^<http://www.w3.org/2001/XMLSchema#integer> } \nFILTER (?x2 >= \"2\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :base.formula1.formula_1_team.fastest_lap_count ?x1 . \n?x0 :base.formula1.formula_1_team.race_count ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.formula1.formula_1_team (AND (JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer) (ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)))",
        "program": "step1:(JOIN base.formula1.formula_1_team.fastest_lap_count 1^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(ge base.formula1.formula_1_team.race_count 2^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step3:(AND step1 step2)[SEP]step4:(AND base.formula1.formula_1_team step3)[SEP]"
    },
    {
        "qid": 449000000,
        "question": "how many comic issues does the sequel to amazing fantasy have in its collection? The linked entity is Amazing Fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Amazing Fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000001,
        "question": "how many comic issues does the sequel to amazing adult fantasy have in its collection? The linked entity is amazing adult fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "amazing adult fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000100,
        "question": "how many issues does the sequel of amazing fantasy have? The linked entity is Amazing Fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Amazing Fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000101,
        "question": "how many issues does the sequel of amazing adult fantasy have? The linked entity is amazing adult fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "amazing adult fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000200,
        "question": "the amazing fantasy sequel has how many issues? The linked entity is Amazing Fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Amazing Fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000201,
        "question": "the amazing adult fantasy sequel has how many issues? The linked entity is amazing adult fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "amazing adult fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000300,
        "question": "how many episodes were there in the sequel to the amazing fantasy comic books? The linked entity is Amazing Fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Amazing Fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000301,
        "question": "how many episodes were there in the sequel to the amazing adult fantasy comic books? The linked entity is amazing adult fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "amazing adult fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000400,
        "question": "find the count of issues which exist in the sequel of amazing fantasy? The linked entity is Amazing Fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Amazing Fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000401,
        "question": "find the count of issues which exist in the sequel of amazing adult fantasy? The linked entity is amazing adult fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "amazing adult fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000500,
        "question": "the sequel of amazing fantasy has how many issues? The linked entity is Amazing Fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Amazing Fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 449000501,
        "question": "the sequel of amazing adult fantasy has how many issues? The linked entity is amazing adult fantasy (m.01wl9q).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "4"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_issue",
                    "class": "comic_books.comic_book_issue",
                    "friendly_name": "Comic Book Issue",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "comic_books.comic_book_series",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "Comic Book Series",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01wl9q",
                    "class": "comic_books.comic_book_series",
                    "friendly_name": "amazing adult fantasy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "comic_books.comic_book_series.issues",
                    "friendly_name": "Issues"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "comic_books.comic_book_series.continued_by",
                    "friendly_name": "Continued By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \n?x1 :type.object.type :comic_books.comic_book_series . \nVALUES ?x2 { :m.01wl9q } \n?x1 :comic_books.comic_book_series.issues ?x0 . \n?x2 :comic_books.comic_book_series.continued_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(COUNT (AND comic_books.comic_book_issue (JOIN (R comic_books.comic_book_series.issues) (JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q))))",
        "program": "step1:(JOIN (R comic_books.comic_book_series.continued_by) m.01wl9q)[SEP]step2:(JOIN (R comic_books.comic_book_series.issues) step1)[SEP]step3:(AND comic_books.comic_book_issue step2)[SEP]step4:(COUNT step3)[SEP]"
    },
    {
        "qid": 454000000,
        "question": "for the chemical isotope with the larget decay probability, what's its decay mode?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h28",
                "entity_name": "Beta decay"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r2l",
                "entity_name": "Positron emission"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l4rm",
                "entity_name": "Electron capture"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nf5",
                "entity_name": "Alpha decay"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "chemistry.radioactive_decay_mode",
                    "class": "chemistry.radioactive_decay_mode",
                    "friendly_name": "Radioactive decay mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "chemistry.isotope_decay",
                    "class": "chemistry.isotope_decay",
                    "friendly_name": "Isotope decay",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "chemistry.isotope_decay.decay_mode",
                    "friendly_name": "Decay mode"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "chemistry.isotope_decay.percentage",
                    "friendly_name": "Percentage"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :chemistry.radioactive_decay_mode . \n?x1 :type.object.type :chemistry.isotope_decay . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :chemistry.radioactive_decay_mode . \n?y1 :type.object.type :chemistry.isotope_decay . \n?y1 :chemistry.isotope_decay.decay_mode ?y0 . \n?y1 :chemistry.isotope_decay.percentage ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :chemistry.isotope_decay.decay_mode ?x0 . \n?x1 :chemistry.isotope_decay.percentage ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX chemistry.radioactive_decay_mode (R chemistry.isotope_decay.decay_mode) chemistry.isotope_decay.percentage)",
        "program": "step1:(ARGMAX chemistry.radioactive_decay_mode R chemistry.isotope_decay.decay_mode)[SEP]"
    },
    {
        "qid": 454000100,
        "question": "what is the decay mode of the chemical isotope with the largest decay probability?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h28",
                "entity_name": "Beta decay"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r2l",
                "entity_name": "Positron emission"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l4rm",
                "entity_name": "Electron capture"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nf5",
                "entity_name": "Alpha decay"
            }
        ],
        "function": "argmax",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "chemistry.radioactive_decay_mode",
                    "class": "chemistry.radioactive_decay_mode",
                    "friendly_name": "Radioactive decay mode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "chemistry.isotope_decay",
                    "class": "chemistry.isotope_decay",
                    "friendly_name": "Isotope decay",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "chemistry.isotope_decay.decay_mode",
                    "friendly_name": "Decay mode"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "chemistry.isotope_decay.percentage",
                    "friendly_name": "Percentage"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :chemistry.radioactive_decay_mode . \n?x1 :type.object.type :chemistry.isotope_decay . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :chemistry.radioactive_decay_mode . \n?y1 :type.object.type :chemistry.isotope_decay . \n?y1 :chemistry.isotope_decay.decay_mode ?y0 . \n?y1 :chemistry.isotope_decay.percentage ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :chemistry.isotope_decay.decay_mode ?x0 . \n?x1 :chemistry.isotope_decay.percentage ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(ARGMAX chemistry.radioactive_decay_mode (R chemistry.isotope_decay.decay_mode) chemistry.isotope_decay.percentage)",
        "program": "step1:(ARGMAX chemistry.radioactive_decay_mode R chemistry.isotope_decay.decay_mode)[SEP]"
    },
    {
        "qid": 456000000,
        "question": "which composers have collaborated with george balanchine in a ballet? The linked entity is George Balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "George Balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 456000001,
        "question": "which composers have collaborated with balanchine in a ballet? The linked entity is balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 456000100,
        "question": "which composers worked on a ballet with choreographer george balanchine? The linked entity is George Balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "George Balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 456000101,
        "question": "which composers worked on a ballet with choreographer balanchine? The linked entity is balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 456000200,
        "question": "who has composed a ballet that was choreographed by george balanchine? The linked entity is George Balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "George Balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 456000201,
        "question": "who has composed a ballet that was choreographed by balanchine? The linked entity is balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 456000300,
        "question": "which composers have worked together on a ballet with george balanchine? The linked entity is George Balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "George Balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 456000301,
        "question": "which composers have worked together on a ballet with balanchine? The linked entity is balanchine (m.01dn0t).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wvj",
                "entity_name": "Sergei Prokofiev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h_q",
                "entity_name": "Igor Stravinsky"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.ballet.ballet_composer",
                    "class": "base.ballet.ballet_composer",
                    "friendly_name": "Ballet composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.ballet.ballet",
                    "class": "base.ballet.ballet",
                    "friendly_name": "Ballet",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dn0t",
                    "class": "base.ballet.choreographer",
                    "friendly_name": "balanchine",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.ballet.ballet_composer.ballets_composed",
                    "friendly_name": "Ballets composed"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.ballet.choreographer.ballets_choreographed",
                    "friendly_name": "Ballets choreographed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.ballet.ballet_composer . \n?x1 :type.object.type :base.ballet.ballet . \nVALUES ?x2 { :m.01dn0t } \n?x0 :base.ballet.ballet_composer.ballets_composed ?x1 . \n?x2 :base.ballet.choreographer.ballets_choreographed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.ballet.ballet_composer (JOIN base.ballet.ballet_composer.ballets_composed (JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)))",
        "program": "step1:(JOIN (R base.ballet.choreographer.ballets_choreographed) m.01dn0t)[SEP]step2:(JOIN base.ballet.ballet_composer.ballets_composed step1)[SEP]step3:(AND base.ballet.ballet_composer step2)[SEP]"
    },
    {
        "qid": 457000000,
        "question": "name all of the other monarchs of napoleon bonaparte royal family line. The linked entity is Napoleon Bonaparte (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "Napoleon Bonaparte",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000001,
        "question": "name all of the other monarchs of napoleon royal family line. The linked entity is napoleon (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000002,
        "question": "name all of the other monarchs of napoleon i royal family line. The linked entity is napoleon i (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon i",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000100,
        "question": "list all the monarchs of the royal line founded by napoleon bonaparte. The linked entity is Napoleon Bonaparte (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "Napoleon Bonaparte",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000101,
        "question": "list all the monarchs of the royal line founded by napoleon. The linked entity is napoleon (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000102,
        "question": "list all the monarchs of the royal line founded by napoleon i. The linked entity is napoleon i (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon i",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000200,
        "question": "who are the monarchs that following the royal line founded by napoleon bonaparte? The linked entity is Napoleon Bonaparte (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "Napoleon Bonaparte",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000201,
        "question": "who are the monarchs that following the royal line founded by napoleon? The linked entity is napoleon (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000202,
        "question": "who are the monarchs that following the royal line founded by napoleon i? The linked entity is napoleon i (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon i",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000300,
        "question": "what are the monarchs of the royal line started by napoleon bonaparte? The linked entity is Napoleon Bonaparte (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "Napoleon Bonaparte",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000301,
        "question": "what are the monarchs of the royal line started by napoleon? The linked entity is napoleon (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000302,
        "question": "what are the monarchs of the royal line started by napoleon i? The linked entity is napoleon i (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon i",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000400,
        "question": "which monarchs are there in the royal line originating from napoleon bonaparte? The linked entity is Napoleon Bonaparte (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "Napoleon Bonaparte",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000401,
        "question": "which monarchs are there in the royal line originating from napoleon? The linked entity is napoleon (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 457000402,
        "question": "which monarchs are there in the royal line originating from napoleon i? The linked entity is napoleon i (m.0j5b8).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx63",
                "entity_name": "Joseph Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvpd",
                "entity_name": "Jérôme Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0894pt",
                "entity_name": "Napoléon Louis Bonaparte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7lq",
                "entity_name": "Louis Bonaparte"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.monarch",
                    "class": "royalty.monarch",
                    "friendly_name": "Monarch",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.royal_line",
                    "class": "royalty.royal_line",
                    "friendly_name": "Royal line",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j5b8",
                    "class": "people.family_member",
                    "friendly_name": "napoleon i",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.royal_line.monarchs_from_this_line",
                    "friendly_name": "Monarchs from this line"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "people.family.founder",
                    "friendly_name": "Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0j5b8 } \n?x1 :royalty.royal_line.monarchs_from_this_line ?x0 . \n?x1 :people.family.founder ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.monarch (JOIN (R royalty.royal_line.monarchs_from_this_line) (JOIN people.family.founder m.0j5b8)))",
        "program": "step1:(JOIN people.family.founder m.0j5b8)[SEP]step2:(JOIN (R royalty.royal_line.monarchs_from_this_line) step1)[SEP]step3:(AND royalty.monarch step2)[SEP]"
    },
    {
        "qid": 459000000,
        "question": "ronald reagan got which kind of injury? The linked entity is Ronald Reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "Ronald Reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000001,
        "question": "reagan got which kind of injury? The linked entity is reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000002,
        "question": "ronald regan got which kind of injury? The linked entity is ronald regan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "ronald regan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000100,
        "question": "ronald reagan had what injury? The linked entity is Ronald Reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "Ronald Reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000101,
        "question": "reagan had what injury? The linked entity is reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000102,
        "question": "ronald regan had what injury? The linked entity is ronald regan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "ronald regan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000200,
        "question": "what type of injury did ronald reagan receive? The linked entity is Ronald Reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "Ronald Reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000201,
        "question": "what type of injury did reagan receive? The linked entity is reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000202,
        "question": "what type of injury did ronald regan receive? The linked entity is ronald regan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "ronald regan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000300,
        "question": "ronald reagan received an injury, what was that injury? The linked entity is Ronald Reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "Ronald Reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000301,
        "question": "reagan received an injury, what was that injury? The linked entity is reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000302,
        "question": "ronald regan received an injury, what was that injury? The linked entity is ronald regan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "ronald regan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000400,
        "question": "what kind of injury did ronald reagan get? The linked entity is Ronald Reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "Ronald Reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000401,
        "question": "what kind of injury did reagan get? The linked entity is reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000402,
        "question": "what kind of injury did ronald regan get? The linked entity is ronald regan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "ronald regan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000500,
        "question": "ronald reagan sustained what kind of injury? The linked entity is Ronald Reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "Ronald Reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000501,
        "question": "reagan sustained what kind of injury? The linked entity is reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000502,
        "question": "ronald regan sustained what kind of injury? The linked entity is ronald regan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "ronald regan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000600,
        "question": "what injuries did ronald reagan suffer from? The linked entity is Ronald Reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "Ronald Reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000601,
        "question": "what injuries did reagan suffer from? The linked entity is reagan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "reagan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 459000602,
        "question": "what injuries did ronald regan suffer from? The linked entity is ronald regan (m.06c0j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q1sz",
                "entity_name": "Pneumothorax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pzr_",
                "entity_name": "Hip fracture"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.type_of_injury",
                    "class": "base.disaster2.type_of_injury",
                    "friendly_name": "Type of injury",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.injury",
                    "class": "base.disaster2.injury",
                    "friendly_name": "Injury",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.06c0j",
                    "class": "base.disaster2.injured_person",
                    "friendly_name": "ronald regan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.type_of_injury.people_with_this_injury",
                    "friendly_name": "People with this injury"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.injury.injured_person",
                    "friendly_name": "Injured person"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.type_of_injury . \n?x1 :type.object.type :base.disaster2.injury . \nVALUES ?x2 { :m.06c0j } \n?x0 :base.disaster2.type_of_injury.people_with_this_injury ?x1 . \n?x1 :base.disaster2.injury.injured_person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.type_of_injury (JOIN base.disaster2.type_of_injury.people_with_this_injury (JOIN base.disaster2.injury.injured_person m.06c0j)))",
        "program": "step1:(JOIN base.disaster2.injury.injured_person m.06c0j)[SEP]step2:(JOIN base.disaster2.type_of_injury.people_with_this_injury step1)[SEP]step3:(AND base.disaster2.type_of_injury step2)[SEP]"
    },
    {
        "qid": 460000000,
        "question": "what caused the failure of the st. francis dam? The linked entity is St. Francis Dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "St. Francis Dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000001,
        "question": "what caused the failure of the saint francis dam? The linked entity is saint francis dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "saint francis dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000100,
        "question": "what's the cause of failure of the st. francis dam? The linked entity is St. Francis Dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "St. Francis Dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000101,
        "question": "what's the cause of failure of the saint francis dam? The linked entity is saint francis dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "saint francis dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000200,
        "question": "the failure of the st. francis dam was caused by what? The linked entity is St. Francis Dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "St. Francis Dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000201,
        "question": "the failure of the saint francis dam was caused by what? The linked entity is saint francis dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "saint francis dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000300,
        "question": "what caused the st. francis dam to fail? The linked entity is St. Francis Dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "St. Francis Dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000301,
        "question": "what caused the saint francis dam to fail? The linked entity is saint francis dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "saint francis dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000400,
        "question": "why did the st. francis dam fail? The linked entity is St. Francis Dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "St. Francis Dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000401,
        "question": "why did the saint francis dam fail? The linked entity is saint francis dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "saint francis dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000500,
        "question": "how did the failure at the st. francis dam occur? The linked entity is St. Francis Dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "St. Francis Dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 460000501,
        "question": "how did the failure at the saint francis dam occur? The linked entity is saint francis dam (m.026yjh).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.058_r3w",
                "entity_name": "Geological Instability"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.damsbase.dam_destruction_method",
                    "class": "base.damsbase.dam_destruction_method",
                    "friendly_name": "Dam Failure Cause",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.damsbase.dam_failure",
                    "class": "base.damsbase.dam_failure",
                    "friendly_name": "Dam Failure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.026yjh",
                    "class": "base.engineering.dam",
                    "friendly_name": "saint francis dam",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.damsbase.dam_failure.cause_of_failure",
                    "friendly_name": "Cause of Failure"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.engineering.dam.failures",
                    "friendly_name": "Failures"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.damsbase.dam_destruction_method . \n?x1 :type.object.type :base.damsbase.dam_failure . \nVALUES ?x2 { :m.026yjh } \n?x1 :base.damsbase.dam_failure.cause_of_failure ?x0 . \n?x2 :base.engineering.dam.failures ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.damsbase.dam_destruction_method (JOIN (R base.damsbase.dam_failure.cause_of_failure) (JOIN (R base.engineering.dam.failures) m.026yjh)))",
        "program": "step1:(JOIN (R base.engineering.dam.failures) m.026yjh)[SEP]step2:(JOIN (R base.damsbase.dam_failure.cause_of_failure) step1)[SEP]step3:(AND base.damsbase.dam_destruction_method step2)[SEP]"
    },
    {
        "qid": 461000000,
        "question": "the coat of arms of poland has what bearer? The linked entity is Coat of arms of Poland (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of arms of Poland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000001,
        "question": "the white eagle has what bearer? The linked entity is white eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "white eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000002,
        "question": "the polish eagle has what bearer? The linked entity is polish eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "polish eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000100,
        "question": "who has been granted the coat of arms of poland? The linked entity is Coat of arms of Poland (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of arms of Poland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000101,
        "question": "who has been granted the white eagle? The linked entity is white eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "white eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000102,
        "question": "who has been granted the polish eagle? The linked entity is polish eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "polish eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000200,
        "question": "locate the entity bearing the coat of arms of poland. The linked entity is Coat of arms of Poland (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of arms of Poland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000201,
        "question": "locate the entity bearing the white eagle. The linked entity is white eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "white eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000202,
        "question": "locate the entity bearing the polish eagle. The linked entity is polish eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "polish eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000300,
        "question": "who bears the coat of arms of poland? The linked entity is Coat of arms of Poland (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of arms of Poland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000301,
        "question": "who bears the white eagle? The linked entity is white eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "white eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000302,
        "question": "who bears the polish eagle? The linked entity is polish eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "polish eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000400,
        "question": "find bearer of the coat of arms of poland. The linked entity is Coat of arms of Poland (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "Coat of arms of Poland",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000401,
        "question": "find bearer of the white eagle. The linked entity is white eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "white eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 461000402,
        "question": "find bearer of the polish eagle. The linked entity is polish eagle (m.02w96d).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qhw",
                "entity_name": "Poland"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "symbols.coat_of_arms_bearer",
                    "class": "symbols.coat_of_arms_bearer",
                    "friendly_name": "Coat of Arms Bearer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "symbols.armorial_grant",
                    "class": "symbols.armorial_grant",
                    "friendly_name": "Armorial Grant",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02w96d",
                    "class": "symbols.coat_of_arms",
                    "friendly_name": "polish eagle",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "symbols.armorial_grant.armiger",
                    "friendly_name": "Used by (Armiger)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "symbols.armorial_grant.coat_of_arms",
                    "friendly_name": "Coat of Arms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms_bearer . \n?x1 :type.object.type :symbols.armorial_grant . \nVALUES ?x2 { :m.02w96d } \n?x1 :symbols.armorial_grant.armiger ?x0 . \n?x1 :symbols.armorial_grant.coat_of_arms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND symbols.coat_of_arms_bearer (JOIN (R symbols.armorial_grant.armiger) (JOIN symbols.armorial_grant.coat_of_arms m.02w96d)))",
        "program": "step1:(JOIN symbols.armorial_grant.coat_of_arms m.02w96d)[SEP]step2:(JOIN (R symbols.armorial_grant.armiger) step1)[SEP]step3:(AND symbols.coat_of_arms_bearer step2)[SEP]"
    },
    {
        "qid": 464000000,
        "question": "list comparable aircrafts of airbus a380. The linked entity is Airbus A380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Airbus A380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000001,
        "question": "list comparable aircrafts of a380. The linked entity is a380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "a380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000002,
        "question": "list comparable aircrafts of airbus 380. The linked entity is airbus 380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "airbus 380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000100,
        "question": "list the aircraft models that are similar to the airbus a380. The linked entity is Airbus A380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Airbus A380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000101,
        "question": "list the aircraft models that are similar to the a380. The linked entity is a380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "a380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000102,
        "question": "list the aircraft models that are similar to the airbus 380. The linked entity is airbus 380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "airbus 380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000200,
        "question": "the airbus a380 is comparable to which other aircraft models? The linked entity is Airbus A380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Airbus A380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000201,
        "question": "the a380 is comparable to which other aircraft models? The linked entity is a380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "a380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000202,
        "question": "the airbus 380 is comparable to which other aircraft models? The linked entity is airbus 380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "airbus 380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000300,
        "question": "which aircraft models are comparable with airbus a380? The linked entity is Airbus A380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Airbus A380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000301,
        "question": "which aircraft models are comparable with a380? The linked entity is a380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "a380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000302,
        "question": "which aircraft models are comparable with airbus 380? The linked entity is airbus 380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "airbus 380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000400,
        "question": "what are the aircraft models that are comparable to airbus a380? The linked entity is Airbus A380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Airbus A380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000401,
        "question": "what are the aircraft models that are comparable to a380? The linked entity is a380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "a380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 464000402,
        "question": "what are the aircraft models that are comparable to airbus 380? The linked entity is airbus 380 (m.018rl2).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fb8m",
                "entity_name": "Ilyushin Il-96"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c9f4",
                "entity_name": "Boeing New Large Airplane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt7",
                "entity_name": "Boeing 747"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08wmwx",
                "entity_name": "Boeing 747-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01564y",
                "entity_name": "Lockheed C-5 Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r_6",
                "entity_name": "Boeing 747-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866k",
                "entity_name": "Antonov An-124 Ruslan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b5bw",
                "entity_name": "McDonnell Douglas MD-12"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "aviation.comparable_aircraft_relationship",
                    "class": "aviation.comparable_aircraft_relationship",
                    "friendly_name": "Comparable Aircraft Relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.018rl2",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "airbus 380",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "aviation.comparable_aircraft_relationship.aircraft",
                    "friendly_name": "Aircraft"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n?x1 :type.object.type :aviation.comparable_aircraft_relationship . \nVALUES ?x2 { :m.018rl2 } \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x0 . \n?x1 :aviation.comparable_aircraft_relationship.aircraft ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND aviation.aircraft_model (JOIN (R aviation.comparable_aircraft_relationship.aircraft) (JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)))",
        "program": "step1:(JOIN aviation.comparable_aircraft_relationship.aircraft m.018rl2)[SEP]step2:(JOIN (R aviation.comparable_aircraft_relationship.aircraft) step1)[SEP]step3:(AND aviation.aircraft_model step2)[SEP]"
    },
    {
        "qid": 467000000,
        "question": "locate those affected by cerebral palsy. The linked entity is Cerebral palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Cerebral palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000001,
        "question": "locate those affected by cerebal palsy. The linked entity is cerebal palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "cerebal palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000100,
        "question": "what people have cerebral palsy? The linked entity is Cerebral palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Cerebral palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000101,
        "question": "what people have cerebal palsy? The linked entity is cerebal palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "cerebal palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000200,
        "question": "show me people that have been diagnosed with cerebral palsy. The linked entity is Cerebral palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Cerebral palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000201,
        "question": "show me people that have been diagnosed with cerebal palsy. The linked entity is cerebal palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "cerebal palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000300,
        "question": "find people with cerebral palsy. The linked entity is Cerebral palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Cerebral palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000301,
        "question": "find people with cerebal palsy. The linked entity is cerebal palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "cerebal palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000400,
        "question": "list cerebral palsy patients. The linked entity is Cerebral palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "Cerebral palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 467000401,
        "question": "list cerebal palsy patients. The linked entity is cerebal palsy (m.0dcrb).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mkxj",
                "entity_name": "Ruth Sienkiewicz-Mercer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.qualia.disabled_person",
                    "class": "base.qualia.disabled_person",
                    "friendly_name": "Disabled person",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.qualia.disability",
                    "class": "base.qualia.disability",
                    "friendly_name": "Disability",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dcrb",
                    "class": "base.qualia.type_of_disability",
                    "friendly_name": "cerebal palsy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.qualia.disability.person",
                    "friendly_name": "Person"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.qualia.disability.type_of_disability",
                    "friendly_name": "Type of disability"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.qualia.disabled_person . \n?x1 :type.object.type :base.qualia.disability . \nVALUES ?x2 { :m.0dcrb } \n?x1 :base.qualia.disability.person ?x0 . \n?x1 :base.qualia.disability.type_of_disability ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.qualia.disabled_person (JOIN (R base.qualia.disability.person) (JOIN base.qualia.disability.type_of_disability m.0dcrb)))",
        "program": "step1:(JOIN base.qualia.disability.type_of_disability m.0dcrb)[SEP]step2:(JOIN (R base.qualia.disability.person) step1)[SEP]step3:(AND base.qualia.disabled_person step2)[SEP]"
    },
    {
        "qid": 468000000,
        "question": "who in history carried the grand master title within the chivalric order? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000001,
        "question": "who in history carried the grandmaster title within the chivalric order? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000100,
        "question": "who in the chivalric order held the title grand master? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000101,
        "question": "who in the chivalric order held the title grandmaster? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000200,
        "question": "who has held the grand master chivalric order title? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000201,
        "question": "who has held the grandmaster chivalric order title? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000300,
        "question": "who were the grand masters of the chivalric order? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000301,
        "question": "who were the grandmasters of the chivalric order? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000400,
        "question": "by whom was the chivalric order title grand master held? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000401,
        "question": "by whom was the chivalric order title grandmaster held? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000500,
        "question": "who ever held the chivalric order title grand master? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000501,
        "question": "who ever held the chivalric order title grandmaster? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000600,
        "question": "who owned the grand master title? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000601,
        "question": "who owned the grandmaster title? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000700,
        "question": "who has served as the grand master of an order of chivalry? The linked entity is Grand Master (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "Grand Master",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 468000701,
        "question": "who has served as the grandmaster of an order of chivalry? The linked entity is grandmaster (m.092pxy).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3ds",
                "entity_name": "Charles III, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0482zf",
                "entity_name": "Emmanuel Philibert, Duke of Savoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56x",
                "entity_name": "Vittorio Emanuele, Prince of Naples"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1xk",
                "entity_name": "Antipope Felix V"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_officer",
                    "class": "royalty.chivalric_order_officer",
                    "friendly_name": "Chivalric Order Officer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "royalty.chivalric_order_position_tenure",
                    "class": "royalty.chivalric_order_position_tenure",
                    "friendly_name": "Chivalric Order Officer Tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.092pxy",
                    "class": "royalty.chivalric_office",
                    "friendly_name": "grandmaster",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "royalty.chivalric_order_position_tenure.officer",
                    "friendly_name": "Officer"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "royalty.chivalric_office.position_holders",
                    "friendly_name": "Position Holders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.chivalric_order_officer . \n?x1 :type.object.type :royalty.chivalric_order_position_tenure . \nVALUES ?x2 { :m.092pxy } \n?x1 :royalty.chivalric_order_position_tenure.officer ?x0 . \n?x2 :royalty.chivalric_office.position_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND royalty.chivalric_order_officer (JOIN (R royalty.chivalric_order_position_tenure.officer) (JOIN (R royalty.chivalric_office.position_holders) m.092pxy)))",
        "program": "step1:(JOIN (R royalty.chivalric_office.position_holders) m.092pxy)[SEP]step2:(JOIN (R royalty.chivalric_order_position_tenure.officer) step1)[SEP]step3:(AND royalty.chivalric_order_officer step2)[SEP]"
    },
    {
        "qid": 472000000,
        "question": "what sumo division is two levels above makushita? The linked entity is Makushita (m.041nxc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wtcw",
                "entity_name": "Makuuchi"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.041nxc",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Makushita",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.schemastaging.sumo_division.higher_division",
                    "friendly_name": "Higher division"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.schemastaging.sumo_division.lower_division",
                    "friendly_name": "Lower division"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.schemastaging.sumo_division . \n?x1 :type.object.type :base.schemastaging.sumo_division . \nVALUES ?x2 { :m.041nxc } \n?x1 :base.schemastaging.sumo_division.higher_division ?x0 . \n?x1 :base.schemastaging.sumo_division.lower_division ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.schemastaging.sumo_division (JOIN (R base.schemastaging.sumo_division.higher_division) (JOIN base.schemastaging.sumo_division.lower_division m.041nxc)))",
        "program": "step1:(JOIN base.schemastaging.sumo_division.lower_division m.041nxc)[SEP]step2:(JOIN (R base.schemastaging.sumo_division.higher_division) step1)[SEP]step3:(AND base.schemastaging.sumo_division step2)[SEP]"
    },
    {
        "qid": 472000100,
        "question": "what is the sumo division two levels up from makushita? The linked entity is Makushita (m.041nxc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wtcw",
                "entity_name": "Makuuchi"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.041nxc",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Makushita",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.schemastaging.sumo_division.higher_division",
                    "friendly_name": "Higher division"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.schemastaging.sumo_division.lower_division",
                    "friendly_name": "Lower division"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.schemastaging.sumo_division . \n?x1 :type.object.type :base.schemastaging.sumo_division . \nVALUES ?x2 { :m.041nxc } \n?x1 :base.schemastaging.sumo_division.higher_division ?x0 . \n?x1 :base.schemastaging.sumo_division.lower_division ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.schemastaging.sumo_division (JOIN (R base.schemastaging.sumo_division.higher_division) (JOIN base.schemastaging.sumo_division.lower_division m.041nxc)))",
        "program": "step1:(JOIN base.schemastaging.sumo_division.lower_division m.041nxc)[SEP]step2:(JOIN (R base.schemastaging.sumo_division.higher_division) step1)[SEP]step3:(AND base.schemastaging.sumo_division step2)[SEP]"
    },
    {
        "qid": 472000200,
        "question": "what is the name of the sumo division which is two levels above makushita? The linked entity is Makushita (m.041nxc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wtcw",
                "entity_name": "Makuuchi"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.041nxc",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Makushita",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.schemastaging.sumo_division.higher_division",
                    "friendly_name": "Higher division"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.schemastaging.sumo_division.lower_division",
                    "friendly_name": "Lower division"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.schemastaging.sumo_division . \n?x1 :type.object.type :base.schemastaging.sumo_division . \nVALUES ?x2 { :m.041nxc } \n?x1 :base.schemastaging.sumo_division.higher_division ?x0 . \n?x1 :base.schemastaging.sumo_division.lower_division ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.schemastaging.sumo_division (JOIN (R base.schemastaging.sumo_division.higher_division) (JOIN base.schemastaging.sumo_division.lower_division m.041nxc)))",
        "program": "step1:(JOIN base.schemastaging.sumo_division.lower_division m.041nxc)[SEP]step2:(JOIN (R base.schemastaging.sumo_division.higher_division) step1)[SEP]step3:(AND base.schemastaging.sumo_division step2)[SEP]"
    },
    {
        "qid": 472000300,
        "question": "of the sumo division, which is two levels higher than makushita? The linked entity is Makushita (m.041nxc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wtcw",
                "entity_name": "Makuuchi"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.041nxc",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Makushita",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.schemastaging.sumo_division.higher_division",
                    "friendly_name": "Higher division"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.schemastaging.sumo_division.lower_division",
                    "friendly_name": "Lower division"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.schemastaging.sumo_division . \n?x1 :type.object.type :base.schemastaging.sumo_division . \nVALUES ?x2 { :m.041nxc } \n?x1 :base.schemastaging.sumo_division.higher_division ?x0 . \n?x1 :base.schemastaging.sumo_division.lower_division ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.schemastaging.sumo_division (JOIN (R base.schemastaging.sumo_division.higher_division) (JOIN base.schemastaging.sumo_division.lower_division m.041nxc)))",
        "program": "step1:(JOIN base.schemastaging.sumo_division.lower_division m.041nxc)[SEP]step2:(JOIN (R base.schemastaging.sumo_division.higher_division) step1)[SEP]step3:(AND base.schemastaging.sumo_division step2)[SEP]"
    },
    {
        "qid": 472000400,
        "question": "which sumo division is two levels higher than makushita? The linked entity is Makushita (m.041nxc).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wtcw",
                "entity_name": "Makuuchi"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.schemastaging.sumo_division",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Sumo division",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.041nxc",
                    "class": "base.schemastaging.sumo_division",
                    "friendly_name": "Makushita",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "base.schemastaging.sumo_division.higher_division",
                    "friendly_name": "Higher division"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.schemastaging.sumo_division.lower_division",
                    "friendly_name": "Lower division"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.schemastaging.sumo_division . \n?x1 :type.object.type :base.schemastaging.sumo_division . \nVALUES ?x2 { :m.041nxc } \n?x1 :base.schemastaging.sumo_division.higher_division ?x0 . \n?x1 :base.schemastaging.sumo_division.lower_division ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.schemastaging.sumo_division (JOIN (R base.schemastaging.sumo_division.higher_division) (JOIN base.schemastaging.sumo_division.lower_division m.041nxc)))",
        "program": "step1:(JOIN base.schemastaging.sumo_division.lower_division m.041nxc)[SEP]step2:(JOIN (R base.schemastaging.sumo_division.higher_division) step1)[SEP]step3:(AND base.schemastaging.sumo_division step2)[SEP]"
    },
    {
        "qid": 476000000,
        "question": "what kind of weaponry was employed during the beslan school hostage crisis? The linked entity is Beslan school hostage crisis (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "Beslan school hostage crisis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000001,
        "question": "what kind of weaponry was employed during the beslan school siege? The linked entity is beslan school siege (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school siege",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000002,
        "question": "what kind of weaponry was employed during the beslan school massacre? The linked entity is beslan school massacre (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school massacre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000100,
        "question": "in the beslan school hostage crisis, what kind of weapon was used? The linked entity is Beslan school hostage crisis (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "Beslan school hostage crisis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000101,
        "question": "in the beslan school siege, what kind of weapon was used? The linked entity is beslan school siege (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school siege",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000102,
        "question": "in the beslan school massacre, what kind of weapon was used? The linked entity is beslan school massacre (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school massacre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000200,
        "question": "what were the weapons utilized by the perpetrators of the beslan school hostage crisis? The linked entity is Beslan school hostage crisis (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "Beslan school hostage crisis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000201,
        "question": "what were the weapons utilized by the perpetrators of the beslan school siege? The linked entity is beslan school siege (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school siege",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000202,
        "question": "what were the weapons utilized by the perpetrators of the beslan school massacre? The linked entity is beslan school massacre (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school massacre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000300,
        "question": "what weapons were used in the beslan school hostage crisis? The linked entity is Beslan school hostage crisis (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "Beslan school hostage crisis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000301,
        "question": "what weapons were used in the beslan school siege? The linked entity is beslan school siege (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school siege",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000302,
        "question": "what weapons were used in the beslan school massacre? The linked entity is beslan school massacre (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school massacre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000400,
        "question": "what type of weapon was involved in the beslan school hostage crisis? The linked entity is Beslan school hostage crisis (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "Beslan school hostage crisis",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000401,
        "question": "what type of weapon was involved in the beslan school siege? The linked entity is beslan school siege (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school siege",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 476000402,
        "question": "what type of weapon was involved in the beslan school massacre? The linked entity is beslan school massacre (m.03st9z).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gb3y",
                "entity_name": "Gun"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.disaster2.object_used_as_weapon",
                    "class": "base.disaster2.object_used_as_weapon",
                    "friendly_name": "Thing used as weapon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.disaster2.attack_process",
                    "class": "base.disaster2.attack_process",
                    "friendly_name": "Violence",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03st9z",
                    "class": "base.disaster2.attack",
                    "friendly_name": "beslan school massacre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.disaster2.object_used_as_weapon.used_in_attack_s",
                    "friendly_name": "Used in attack"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.disaster2.attack_process.attack_event",
                    "friendly_name": "Attack event"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.disaster2.object_used_as_weapon . \n?x1 :type.object.type :base.disaster2.attack_process . \nVALUES ?x2 { :m.03st9z } \n?x0 :base.disaster2.object_used_as_weapon.used_in_attack_s ?x1 . \n?x1 :base.disaster2.attack_process.attack_event ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND base.disaster2.object_used_as_weapon (JOIN base.disaster2.object_used_as_weapon.used_in_attack_s (JOIN base.disaster2.attack_process.attack_event m.03st9z)))",
        "program": "step1:(JOIN base.disaster2.attack_process.attack_event m.03st9z)[SEP]step2:(JOIN base.disaster2.object_used_as_weapon.used_in_attack_s step1)[SEP]step3:(AND base.disaster2.object_used_as_weapon step2)[SEP]"
    },
    {
        "qid": 478000000,
        "question": "guitar hero iii: legends of rock has what songs? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000001,
        "question": "guitar hero iii has what songs? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000002,
        "question": "guitar hero 3 has what songs? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000100,
        "question": "what songs can be found in guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000101,
        "question": "what songs can be found in guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000102,
        "question": "what songs can be found in guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000200,
        "question": "what songs does guitar hero iii: legends of rock include? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000201,
        "question": "what songs does guitar hero iii include? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000202,
        "question": "what songs does guitar hero 3 include? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000300,
        "question": "what songs are available in guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000301,
        "question": "what songs are available in guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000302,
        "question": "what songs are available in guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000400,
        "question": "which tracks are in guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000401,
        "question": "which tracks are in guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000402,
        "question": "which tracks are in guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000500,
        "question": "in guitar hero iii: legends of rock, what songs are there? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000501,
        "question": "in guitar hero iii, what songs are there? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000502,
        "question": "in guitar hero 3, what songs are there? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000600,
        "question": "what songs can be played in guitar hero iii: legends of rock? The linked entity is Guitar Hero III: Legends of Rock (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "Guitar Hero III: Legends of Rock",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000601,
        "question": "what songs can be played in guitar hero iii? The linked entity is guitar hero iii (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero iii",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 478000602,
        "question": "what songs can be played in guitar hero 3? The linked entity is guitar hero 3 (m.025vn5m).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.050r2c",
                "entity_name": "Yellow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgk51",
                "entity_name": "Knights of Cydonia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cr_wt",
                "entity_name": "La Grange"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cw9x7",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xp99",
                "entity_name": "One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02871qq",
                "entity_name": "Same Old Song and Dance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08cklv",
                "entity_name": "Rock and Roll All Nite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc41y",
                "entity_name": "Tina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc49r",
                "entity_name": "Halo Theme MJOLNIR Mix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flpph",
                "entity_name": "Rock You Like a Hurricane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070z4x",
                "entity_name": "Paint It Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn’t’ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w87",
                "entity_name": "Sunshine of Your Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fjk88",
                "entity_name": "Black Magic Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czkkl",
                "entity_name": "Story of My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n02s1",
                "entity_name": "God Put a Smile Upon Your Face"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lhdz5",
                "entity_name": "The Judas Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sftt",
                "entity_name": "Raining Blood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0xd3",
                "entity_name": "Supermassive Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0547nq",
                "entity_name": "She Bangs the Drums"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0816cq",
                "entity_name": "Dream On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gv9b5",
                "entity_name": "The Day That Never Comes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctfn",
                "entity_name": "(We Are) The Road Crew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dyxz",
                "entity_name": "Slow Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nc432",
                "entity_name": "Messages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9p7g",
                "entity_name": "Don't Hold Back"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4g__",
                "entity_name": "Surfing with the Alien"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.096ydc",
                "entity_name": "Johnny I Hardly Knew Ye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121qgdnt",
                "entity_name": "Radio Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l86h",
                "entity_name": "The Seeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026m2nn",
                "entity_name": "Top Gun Anthem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nqlz",
                "entity_name": "Prayer of the Refugee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026pvry",
                "entity_name": "Talk Dirty to Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sf4s",
                "entity_name": "Through the Fire and Flames"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02702w6",
                "entity_name": "Operation Ground and Pound"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270knw",
                "entity_name": "F.C.P.R.E.M.I.X."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027646y",
                "entity_name": "Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02774bg",
                "entity_name": "Cliffs of Dover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027dm29",
                "entity_name": "Mississippi Queen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0288vsn",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p90s8",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pgmbp",
                "entity_name": "Rock This Town"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqbw1",
                "entity_name": "Can't Be Saved"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q2ssd",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qhv49",
                "entity_name": "Antisocial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4z9_",
                "entity_name": "She Builds Quick Machines"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w1spk",
                "entity_name": "The Pretender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x31zc",
                "entity_name": "Pretty Handsome Awkward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x55kk",
                "entity_name": "In the Belly of a Shark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_729",
                "entity_name": "Cities on Flame with Rock and Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8xhc",
                "entity_name": "Carcinogen Crush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpc5",
                "entity_name": "Taxman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gr9x7",
                "entity_name": "Go That Far"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h5xpn",
                "entity_name": "Mauvais Garçon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkg55",
                "entity_name": "Nine Lives"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0410z25",
                "entity_name": "Take this life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0416__g",
                "entity_name": "Violet Hill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043l3_j",
                "entity_name": "I'm In the Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04_p_d",
                "entity_name": "Welcome to the Jungle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jpn45",
                "entity_name": "Cyanide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4_ft",
                "entity_name": "Lay Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p_zt2",
                "entity_name": "The Unforgiven III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb80m",
                "entity_name": "All Nightmare Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h36rb",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mtfsj",
                "entity_name": "Revolution Deathsquad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__8",
                "entity_name": "The End of the Line"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8__t",
                "entity_name": "Broken, Beat & Scarred"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n8_sw",
                "entity_name": "That Was Just Your Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9042",
                "entity_name": "Suicide & Redemption"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9c75",
                "entity_name": "Guitar Battle vs. Slash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9cbf",
                "entity_name": "Guitar Battle vs. Tom Morello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9l1l",
                "entity_name": "Avalancha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9q8f",
                "entity_name": "Down 'N Dirty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9sm5",
                "entity_name": "Generation Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9zj_",
                "entity_name": "Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbltm",
                "entity_name": "Impulse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nblw6",
                "entity_name": "In Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm63",
                "entity_name": "Metal Heavy Lady"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm9y",
                "entity_name": "Minus Celsius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvkk",
                "entity_name": "Nothing for Me Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbvsw",
                "entity_name": "The Way It Ends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsbs",
                "entity_name": "Ernten Was Wir Säen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsdg",
                "entity_name": "So Payaso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncsn7",
                "entity_name": "Sleeping Giant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncst7",
                "entity_name": "The Arsonist"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncswb",
                "entity_name": "Famous For Nothing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nct6_",
                "entity_name": "Exo-Politics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncthq",
                "entity_name": "Stay Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctmk",
                "entity_name": "Problems (Live at Brixton)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctqj",
                "entity_name": "I Am Murloc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ncv9s",
                "entity_name": "Heroes of Our Time"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p79hg",
                "entity_name": "The End Begins (to Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.069lq1",
                "entity_name": "Reptilia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vw9m",
                "entity_name": "Slither"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y3rd",
                "entity_name": "Motorhead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07135q",
                "entity_name": "This Is a Call"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071x8b",
                "entity_name": "All My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07csl2",
                "entity_name": "Bulls on Parade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k62t",
                "entity_name": "For the Love of God"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n6949",
                "entity_name": "Flannigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07npl0j",
                "entity_name": "Putting Holes In Happiness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t5_1_",
                "entity_name": "Original Composition"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.082dr7",
                "entity_name": "Sabotage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098wyj",
                "entity_name": "Scary Monsters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_hy5cl",
                "entity_name": "No More Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c9my1",
                "entity_name": "Miss Murder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc4r4",
                "entity_name": "School's Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjv1p",
                "entity_name": "Before I Forget"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cszsh",
                "entity_name": "The Number of the Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d1ss9",
                "entity_name": "Lay It Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ds2d7",
                "entity_name": "Stockholm Syndrome"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyqww",
                "entity_name": "Stricken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fd3k5",
                "entity_name": "When You Were Young"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm7g9",
                "entity_name": "Helicopter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g_fc4",
                "entity_name": "Lanigan's Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h03jz",
                "entity_name": "Hole in the Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0vsj",
                "entity_name": "Cult of Personality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4f02",
                "entity_name": "Cities on Flame With Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kjvl",
                "entity_name": "The Devil Went Down to Georgia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045bch",
                "entity_name": "We Three Kings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nzqt",
                "entity_name": "I Predict a Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nctxh",
                "entity_name": "Soothsayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppf4",
                "entity_name": "My Name Is Jonas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2rk6",
                "entity_name": "Barracuda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f8y_",
                "entity_name": "Cherub Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.025vn5m",
                    "class": "cvg.musical_game",
                    "friendly_name": "guitar hero 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.musical_game_song_relationship.song",
                    "friendly_name": "Song"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.025vn5m } \n?x1 :cvg.musical_game_song_relationship.song ?x0 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "s_expression": "(AND cvg.musical_game_song (JOIN (R cvg.musical_game_song_relationship.song) (JOIN cvg.musical_game_song_relationship.game m.025vn5m)))",
        "program": "step1:(JOIN cvg.musical_game_song_relationship.game m.025vn5m)[SEP]step2:(JOIN (R cvg.musical_game_song_relationship.song) step1)[SEP]step3:(AND cvg.musical_game_song step2)[SEP]"
    },
    {
        "qid": 488000000,
        "question": "in which races tony stewart's starting position was before 6? The linked entity is Tony Stewart (m.0271xk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pz66h",
                "entity_name": "2007 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qk12y",
                "entity_name": "2006 DirecTV 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7l_x",
                "entity_name": "2005 Chevy American Revolution 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8tw9",
                "entity_name": "2005 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cgrl0",
                "entity_name": "2003 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chpbr",
                "entity_name": "2002 Sirius Satellite Radio at The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_l",
                "entity_name": "2000 Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4g1",
                "entity_name": "1999 Goody's Body Pain 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4h8",
                "entity_name": "1999 Frontier @ The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hn",
                "entity_name": "1999 Exide NASCAR Select Batteries 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0m",
                "entity_name": "2000 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06yvd26",
                "entity_name": "2009 Sunoco Red Cross Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzm9c",
                "entity_name": "2006 Subway Fresh 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028980f",
                "entity_name": "2007 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdj0l",
                "entity_name": "2004 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cfvym",
                "entity_name": "2002 Pontiac Excitement 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcg6",
                "entity_name": "2006 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rz895",
                "entity_name": "2007 Toyota/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0407qq1",
                "entity_name": "2008 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7lhl",
                "entity_name": "2004 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bncyf",
                "entity_name": "2006 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7r8r",
                "entity_name": "2005 Batman Begins 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c87b6",
                "entity_name": "2005 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8vds",
                "entity_name": "2005 UAW-Ford 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wf8",
                "entity_name": "2005 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wxt",
                "entity_name": "2005 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqxgj",
                "entity_name": "2001 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cr7cs",
                "entity_name": "2001 NAPA Auto Parts 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crd7j",
                "entity_name": "2001 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crlyx",
                "entity_name": "2001 New Hampshire 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0f",
                "entity_name": "2000 NAPA AutoCare 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fp",
                "entity_name": "1999 Cracker Barrel 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hr",
                "entity_name": "1999 Dura Lube/Kmart 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hv",
                "entity_name": "1999 MBNA Gold 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j3",
                "entity_name": "1999 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064v0t9",
                "entity_name": "2009 Toyota/SaveMart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065x32t",
                "entity_name": "2009 Coke Zero 400 Powered by Coca-Cola"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063wzjr",
                "entity_name": "2009 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043r0nf",
                "entity_name": "2008 Dodge Challenger 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7k72",
                "entity_name": "2005 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg284",
                "entity_name": "2002 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crblp",
                "entity_name": "2001 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_9",
                "entity_name": "2000 Save Mart/Kragen 350K"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcw8",
                "entity_name": "2006 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg_pk",
                "entity_name": "2003 Sirius 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cj63n",
                "entity_name": "2002 Mountain Dew Southern 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqk67",
                "entity_name": "2002 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_8m5",
                "entity_name": "2007 Centurion Boats at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqjgc",
                "entity_name": "2002 EA Sports 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fz",
                "entity_name": "1999 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4gt",
                "entity_name": "1999 Save Mart/Kragen 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hg",
                "entity_name": "1999 Goody's Headache Powder 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j0",
                "entity_name": "1999 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzmbr",
                "entity_name": "2006 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043mkq3",
                "entity_name": "2009 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bn1dc",
                "entity_name": "2006 Sharpie 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8qvd",
                "entity_name": "2005 Sirius Satellite Radio at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c9nwb",
                "entity_name": "2003 Auto Club 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdb0r",
                "entity_name": "2004 GFS Marketplace 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ch0rf",
                "entity_name": "2003 Tropicana 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chk66",
                "entity_name": "2002 Brickyard 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqm87",
                "entity_name": "2002 NAPA 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmk3x",
                "entity_name": "2006 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mx7h5",
                "entity_name": "1999 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cd8_m",
                "entity_name": "2004 Sirius at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmm31",
                "entity_name": "2006 Lenox Industrial Tools 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065lvkv",
                "entity_name": "2009 Lenox Industrial Tools 301"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cwsm4",
                "entity_name": "2003 Sirius at the Glen"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_instance",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "NASCAR race instance",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "6",
                    "question_node": 0,
                    "function": "<"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.0271xk",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "Tony Stewart",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_race_instance . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 < \"6\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.0271xk } \n?x0 :base.nascar.nascar_race_instance.results ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_driver.nascar_races ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_race_instance (JOIN base.nascar.nascar_race_instance.results (AND (lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk))))",
        "program": "step1:(lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_race_instance.results step3)[SEP]step5:(AND base.nascar.nascar_race_instance step4)[SEP]"
    },
    {
        "qid": 488000100,
        "question": "tony stewart's starting position was before 6 in which races? The linked entity is Tony Stewart (m.0271xk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pz66h",
                "entity_name": "2007 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qk12y",
                "entity_name": "2006 DirecTV 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7l_x",
                "entity_name": "2005 Chevy American Revolution 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8tw9",
                "entity_name": "2005 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cgrl0",
                "entity_name": "2003 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chpbr",
                "entity_name": "2002 Sirius Satellite Radio at The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_l",
                "entity_name": "2000 Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4g1",
                "entity_name": "1999 Goody's Body Pain 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4h8",
                "entity_name": "1999 Frontier @ The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hn",
                "entity_name": "1999 Exide NASCAR Select Batteries 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0m",
                "entity_name": "2000 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06yvd26",
                "entity_name": "2009 Sunoco Red Cross Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzm9c",
                "entity_name": "2006 Subway Fresh 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028980f",
                "entity_name": "2007 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdj0l",
                "entity_name": "2004 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cfvym",
                "entity_name": "2002 Pontiac Excitement 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcg6",
                "entity_name": "2006 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rz895",
                "entity_name": "2007 Toyota/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0407qq1",
                "entity_name": "2008 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7lhl",
                "entity_name": "2004 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bncyf",
                "entity_name": "2006 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7r8r",
                "entity_name": "2005 Batman Begins 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c87b6",
                "entity_name": "2005 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8vds",
                "entity_name": "2005 UAW-Ford 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wf8",
                "entity_name": "2005 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wxt",
                "entity_name": "2005 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqxgj",
                "entity_name": "2001 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cr7cs",
                "entity_name": "2001 NAPA Auto Parts 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crd7j",
                "entity_name": "2001 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crlyx",
                "entity_name": "2001 New Hampshire 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0f",
                "entity_name": "2000 NAPA AutoCare 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fp",
                "entity_name": "1999 Cracker Barrel 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hr",
                "entity_name": "1999 Dura Lube/Kmart 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hv",
                "entity_name": "1999 MBNA Gold 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j3",
                "entity_name": "1999 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064v0t9",
                "entity_name": "2009 Toyota/SaveMart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065x32t",
                "entity_name": "2009 Coke Zero 400 Powered by Coca-Cola"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063wzjr",
                "entity_name": "2009 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043r0nf",
                "entity_name": "2008 Dodge Challenger 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7k72",
                "entity_name": "2005 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg284",
                "entity_name": "2002 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crblp",
                "entity_name": "2001 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_9",
                "entity_name": "2000 Save Mart/Kragen 350K"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcw8",
                "entity_name": "2006 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg_pk",
                "entity_name": "2003 Sirius 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cj63n",
                "entity_name": "2002 Mountain Dew Southern 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqk67",
                "entity_name": "2002 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_8m5",
                "entity_name": "2007 Centurion Boats at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqjgc",
                "entity_name": "2002 EA Sports 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fz",
                "entity_name": "1999 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4gt",
                "entity_name": "1999 Save Mart/Kragen 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hg",
                "entity_name": "1999 Goody's Headache Powder 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j0",
                "entity_name": "1999 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzmbr",
                "entity_name": "2006 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043mkq3",
                "entity_name": "2009 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bn1dc",
                "entity_name": "2006 Sharpie 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8qvd",
                "entity_name": "2005 Sirius Satellite Radio at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c9nwb",
                "entity_name": "2003 Auto Club 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdb0r",
                "entity_name": "2004 GFS Marketplace 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ch0rf",
                "entity_name": "2003 Tropicana 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chk66",
                "entity_name": "2002 Brickyard 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqm87",
                "entity_name": "2002 NAPA 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmk3x",
                "entity_name": "2006 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mx7h5",
                "entity_name": "1999 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cd8_m",
                "entity_name": "2004 Sirius at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmm31",
                "entity_name": "2006 Lenox Industrial Tools 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065lvkv",
                "entity_name": "2009 Lenox Industrial Tools 301"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cwsm4",
                "entity_name": "2003 Sirius at the Glen"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_instance",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "NASCAR race instance",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "6",
                    "question_node": 0,
                    "function": "<"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.0271xk",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "Tony Stewart",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_race_instance . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 < \"6\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.0271xk } \n?x0 :base.nascar.nascar_race_instance.results ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_driver.nascar_races ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_race_instance (JOIN base.nascar.nascar_race_instance.results (AND (lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk))))",
        "program": "step1:(lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_race_instance.results step3)[SEP]step5:(AND base.nascar.nascar_race_instance step4)[SEP]"
    },
    {
        "qid": 488000200,
        "question": "what races has tony stewart had a starting position before 6? The linked entity is Tony Stewart (m.0271xk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pz66h",
                "entity_name": "2007 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qk12y",
                "entity_name": "2006 DirecTV 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7l_x",
                "entity_name": "2005 Chevy American Revolution 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8tw9",
                "entity_name": "2005 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cgrl0",
                "entity_name": "2003 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chpbr",
                "entity_name": "2002 Sirius Satellite Radio at The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_l",
                "entity_name": "2000 Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4g1",
                "entity_name": "1999 Goody's Body Pain 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4h8",
                "entity_name": "1999 Frontier @ The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hn",
                "entity_name": "1999 Exide NASCAR Select Batteries 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0m",
                "entity_name": "2000 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06yvd26",
                "entity_name": "2009 Sunoco Red Cross Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzm9c",
                "entity_name": "2006 Subway Fresh 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028980f",
                "entity_name": "2007 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdj0l",
                "entity_name": "2004 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cfvym",
                "entity_name": "2002 Pontiac Excitement 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcg6",
                "entity_name": "2006 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rz895",
                "entity_name": "2007 Toyota/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0407qq1",
                "entity_name": "2008 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7lhl",
                "entity_name": "2004 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bncyf",
                "entity_name": "2006 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7r8r",
                "entity_name": "2005 Batman Begins 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c87b6",
                "entity_name": "2005 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8vds",
                "entity_name": "2005 UAW-Ford 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wf8",
                "entity_name": "2005 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wxt",
                "entity_name": "2005 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqxgj",
                "entity_name": "2001 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cr7cs",
                "entity_name": "2001 NAPA Auto Parts 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crd7j",
                "entity_name": "2001 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crlyx",
                "entity_name": "2001 New Hampshire 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0f",
                "entity_name": "2000 NAPA AutoCare 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fp",
                "entity_name": "1999 Cracker Barrel 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hr",
                "entity_name": "1999 Dura Lube/Kmart 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hv",
                "entity_name": "1999 MBNA Gold 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j3",
                "entity_name": "1999 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064v0t9",
                "entity_name": "2009 Toyota/SaveMart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065x32t",
                "entity_name": "2009 Coke Zero 400 Powered by Coca-Cola"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063wzjr",
                "entity_name": "2009 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043r0nf",
                "entity_name": "2008 Dodge Challenger 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7k72",
                "entity_name": "2005 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg284",
                "entity_name": "2002 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crblp",
                "entity_name": "2001 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_9",
                "entity_name": "2000 Save Mart/Kragen 350K"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcw8",
                "entity_name": "2006 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg_pk",
                "entity_name": "2003 Sirius 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cj63n",
                "entity_name": "2002 Mountain Dew Southern 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqk67",
                "entity_name": "2002 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_8m5",
                "entity_name": "2007 Centurion Boats at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqjgc",
                "entity_name": "2002 EA Sports 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fz",
                "entity_name": "1999 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4gt",
                "entity_name": "1999 Save Mart/Kragen 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hg",
                "entity_name": "1999 Goody's Headache Powder 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j0",
                "entity_name": "1999 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzmbr",
                "entity_name": "2006 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043mkq3",
                "entity_name": "2009 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bn1dc",
                "entity_name": "2006 Sharpie 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8qvd",
                "entity_name": "2005 Sirius Satellite Radio at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c9nwb",
                "entity_name": "2003 Auto Club 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdb0r",
                "entity_name": "2004 GFS Marketplace 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ch0rf",
                "entity_name": "2003 Tropicana 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chk66",
                "entity_name": "2002 Brickyard 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqm87",
                "entity_name": "2002 NAPA 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmk3x",
                "entity_name": "2006 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mx7h5",
                "entity_name": "1999 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cd8_m",
                "entity_name": "2004 Sirius at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmm31",
                "entity_name": "2006 Lenox Industrial Tools 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065lvkv",
                "entity_name": "2009 Lenox Industrial Tools 301"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cwsm4",
                "entity_name": "2003 Sirius at the Glen"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_instance",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "NASCAR race instance",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "6",
                    "question_node": 0,
                    "function": "<"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.0271xk",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "Tony Stewart",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_race_instance . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 < \"6\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.0271xk } \n?x0 :base.nascar.nascar_race_instance.results ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_driver.nascar_races ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_race_instance (JOIN base.nascar.nascar_race_instance.results (AND (lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk))))",
        "program": "step1:(lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_race_instance.results step3)[SEP]step5:(AND base.nascar.nascar_race_instance step4)[SEP]"
    },
    {
        "qid": 488000300,
        "question": "in which nascar races the start position of tony stewart was before 6? The linked entity is Tony Stewart (m.0271xk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pz66h",
                "entity_name": "2007 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qk12y",
                "entity_name": "2006 DirecTV 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7l_x",
                "entity_name": "2005 Chevy American Revolution 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8tw9",
                "entity_name": "2005 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cgrl0",
                "entity_name": "2003 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chpbr",
                "entity_name": "2002 Sirius Satellite Radio at The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_l",
                "entity_name": "2000 Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4g1",
                "entity_name": "1999 Goody's Body Pain 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4h8",
                "entity_name": "1999 Frontier @ The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hn",
                "entity_name": "1999 Exide NASCAR Select Batteries 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0m",
                "entity_name": "2000 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06yvd26",
                "entity_name": "2009 Sunoco Red Cross Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzm9c",
                "entity_name": "2006 Subway Fresh 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028980f",
                "entity_name": "2007 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdj0l",
                "entity_name": "2004 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cfvym",
                "entity_name": "2002 Pontiac Excitement 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcg6",
                "entity_name": "2006 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rz895",
                "entity_name": "2007 Toyota/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0407qq1",
                "entity_name": "2008 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7lhl",
                "entity_name": "2004 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bncyf",
                "entity_name": "2006 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7r8r",
                "entity_name": "2005 Batman Begins 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c87b6",
                "entity_name": "2005 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8vds",
                "entity_name": "2005 UAW-Ford 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wf8",
                "entity_name": "2005 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wxt",
                "entity_name": "2005 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqxgj",
                "entity_name": "2001 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cr7cs",
                "entity_name": "2001 NAPA Auto Parts 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crd7j",
                "entity_name": "2001 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crlyx",
                "entity_name": "2001 New Hampshire 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0f",
                "entity_name": "2000 NAPA AutoCare 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fp",
                "entity_name": "1999 Cracker Barrel 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hr",
                "entity_name": "1999 Dura Lube/Kmart 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hv",
                "entity_name": "1999 MBNA Gold 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j3",
                "entity_name": "1999 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064v0t9",
                "entity_name": "2009 Toyota/SaveMart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065x32t",
                "entity_name": "2009 Coke Zero 400 Powered by Coca-Cola"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063wzjr",
                "entity_name": "2009 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043r0nf",
                "entity_name": "2008 Dodge Challenger 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7k72",
                "entity_name": "2005 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg284",
                "entity_name": "2002 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crblp",
                "entity_name": "2001 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_9",
                "entity_name": "2000 Save Mart/Kragen 350K"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcw8",
                "entity_name": "2006 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg_pk",
                "entity_name": "2003 Sirius 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cj63n",
                "entity_name": "2002 Mountain Dew Southern 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqk67",
                "entity_name": "2002 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_8m5",
                "entity_name": "2007 Centurion Boats at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqjgc",
                "entity_name": "2002 EA Sports 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fz",
                "entity_name": "1999 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4gt",
                "entity_name": "1999 Save Mart/Kragen 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hg",
                "entity_name": "1999 Goody's Headache Powder 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j0",
                "entity_name": "1999 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzmbr",
                "entity_name": "2006 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043mkq3",
                "entity_name": "2009 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bn1dc",
                "entity_name": "2006 Sharpie 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8qvd",
                "entity_name": "2005 Sirius Satellite Radio at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c9nwb",
                "entity_name": "2003 Auto Club 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdb0r",
                "entity_name": "2004 GFS Marketplace 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ch0rf",
                "entity_name": "2003 Tropicana 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chk66",
                "entity_name": "2002 Brickyard 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqm87",
                "entity_name": "2002 NAPA 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmk3x",
                "entity_name": "2006 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mx7h5",
                "entity_name": "1999 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cd8_m",
                "entity_name": "2004 Sirius at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmm31",
                "entity_name": "2006 Lenox Industrial Tools 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065lvkv",
                "entity_name": "2009 Lenox Industrial Tools 301"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cwsm4",
                "entity_name": "2003 Sirius at the Glen"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_instance",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "NASCAR race instance",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "6",
                    "question_node": 0,
                    "function": "<"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.0271xk",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "Tony Stewart",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_race_instance . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 < \"6\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.0271xk } \n?x0 :base.nascar.nascar_race_instance.results ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_driver.nascar_races ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_race_instance (JOIN base.nascar.nascar_race_instance.results (AND (lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk))))",
        "program": "step1:(lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_race_instance.results step3)[SEP]step5:(AND base.nascar.nascar_race_instance step4)[SEP]"
    },
    {
        "qid": 488000400,
        "question": "find the races where tony stewart started before position 6. The linked entity is Tony Stewart (m.0271xk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pz66h",
                "entity_name": "2007 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qk12y",
                "entity_name": "2006 DirecTV 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7l_x",
                "entity_name": "2005 Chevy American Revolution 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8tw9",
                "entity_name": "2005 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cgrl0",
                "entity_name": "2003 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chpbr",
                "entity_name": "2002 Sirius Satellite Radio at The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_l",
                "entity_name": "2000 Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4g1",
                "entity_name": "1999 Goody's Body Pain 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4h8",
                "entity_name": "1999 Frontier @ The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hn",
                "entity_name": "1999 Exide NASCAR Select Batteries 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0m",
                "entity_name": "2000 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06yvd26",
                "entity_name": "2009 Sunoco Red Cross Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzm9c",
                "entity_name": "2006 Subway Fresh 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028980f",
                "entity_name": "2007 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdj0l",
                "entity_name": "2004 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cfvym",
                "entity_name": "2002 Pontiac Excitement 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcg6",
                "entity_name": "2006 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rz895",
                "entity_name": "2007 Toyota/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0407qq1",
                "entity_name": "2008 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7lhl",
                "entity_name": "2004 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bncyf",
                "entity_name": "2006 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7r8r",
                "entity_name": "2005 Batman Begins 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c87b6",
                "entity_name": "2005 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8vds",
                "entity_name": "2005 UAW-Ford 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wf8",
                "entity_name": "2005 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wxt",
                "entity_name": "2005 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqxgj",
                "entity_name": "2001 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cr7cs",
                "entity_name": "2001 NAPA Auto Parts 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crd7j",
                "entity_name": "2001 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crlyx",
                "entity_name": "2001 New Hampshire 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0f",
                "entity_name": "2000 NAPA AutoCare 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fp",
                "entity_name": "1999 Cracker Barrel 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hr",
                "entity_name": "1999 Dura Lube/Kmart 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hv",
                "entity_name": "1999 MBNA Gold 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j3",
                "entity_name": "1999 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064v0t9",
                "entity_name": "2009 Toyota/SaveMart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065x32t",
                "entity_name": "2009 Coke Zero 400 Powered by Coca-Cola"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063wzjr",
                "entity_name": "2009 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043r0nf",
                "entity_name": "2008 Dodge Challenger 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7k72",
                "entity_name": "2005 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg284",
                "entity_name": "2002 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crblp",
                "entity_name": "2001 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_9",
                "entity_name": "2000 Save Mart/Kragen 350K"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcw8",
                "entity_name": "2006 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg_pk",
                "entity_name": "2003 Sirius 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cj63n",
                "entity_name": "2002 Mountain Dew Southern 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqk67",
                "entity_name": "2002 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_8m5",
                "entity_name": "2007 Centurion Boats at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqjgc",
                "entity_name": "2002 EA Sports 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fz",
                "entity_name": "1999 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4gt",
                "entity_name": "1999 Save Mart/Kragen 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hg",
                "entity_name": "1999 Goody's Headache Powder 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j0",
                "entity_name": "1999 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzmbr",
                "entity_name": "2006 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043mkq3",
                "entity_name": "2009 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bn1dc",
                "entity_name": "2006 Sharpie 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8qvd",
                "entity_name": "2005 Sirius Satellite Radio at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c9nwb",
                "entity_name": "2003 Auto Club 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdb0r",
                "entity_name": "2004 GFS Marketplace 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ch0rf",
                "entity_name": "2003 Tropicana 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chk66",
                "entity_name": "2002 Brickyard 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqm87",
                "entity_name": "2002 NAPA 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmk3x",
                "entity_name": "2006 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mx7h5",
                "entity_name": "1999 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cd8_m",
                "entity_name": "2004 Sirius at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmm31",
                "entity_name": "2006 Lenox Industrial Tools 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065lvkv",
                "entity_name": "2009 Lenox Industrial Tools 301"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cwsm4",
                "entity_name": "2003 Sirius at the Glen"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_instance",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "NASCAR race instance",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "6",
                    "question_node": 0,
                    "function": "<"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.0271xk",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "Tony Stewart",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_race_instance . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 < \"6\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.0271xk } \n?x0 :base.nascar.nascar_race_instance.results ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_driver.nascar_races ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_race_instance (JOIN base.nascar.nascar_race_instance.results (AND (lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk))))",
        "program": "step1:(lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_race_instance.results step3)[SEP]step5:(AND base.nascar.nascar_race_instance step4)[SEP]"
    },
    {
        "qid": 488000500,
        "question": "in what races did tony stewart have a starting position that was before position 6? The linked entity is Tony Stewart (m.0271xk).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pz66h",
                "entity_name": "2007 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qk12y",
                "entity_name": "2006 DirecTV 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7l_x",
                "entity_name": "2005 Chevy American Revolution 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8tw9",
                "entity_name": "2005 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cgrl0",
                "entity_name": "2003 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chpbr",
                "entity_name": "2002 Sirius Satellite Radio at The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_l",
                "entity_name": "2000 Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4g1",
                "entity_name": "1999 Goody's Body Pain 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4h8",
                "entity_name": "1999 Frontier @ The Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hn",
                "entity_name": "1999 Exide NASCAR Select Batteries 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0m",
                "entity_name": "2000 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06yvd26",
                "entity_name": "2009 Sunoco Red Cross Pennsylvania 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzm9c",
                "entity_name": "2006 Subway Fresh 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028980f",
                "entity_name": "2007 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdj0l",
                "entity_name": "2004 Sylvania 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cfvym",
                "entity_name": "2002 Pontiac Excitement 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcg6",
                "entity_name": "2006 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rz895",
                "entity_name": "2007 Toyota/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0407qq1",
                "entity_name": "2008 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7lhl",
                "entity_name": "2004 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bncyf",
                "entity_name": "2006 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c7r8r",
                "entity_name": "2005 Batman Begins 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c87b6",
                "entity_name": "2005 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8vds",
                "entity_name": "2005 UAW-Ford 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wf8",
                "entity_name": "2005 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8wxt",
                "entity_name": "2005 Subway 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqxgj",
                "entity_name": "2001 UAW-DaimlerChrysler 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cr7cs",
                "entity_name": "2001 NAPA Auto Parts 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crd7j",
                "entity_name": "2001 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crlyx",
                "entity_name": "2001 New Hampshire 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crm0f",
                "entity_name": "2000 NAPA AutoCare 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fp",
                "entity_name": "1999 Cracker Barrel 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hr",
                "entity_name": "1999 Dura Lube/Kmart 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hv",
                "entity_name": "1999 MBNA Gold 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j3",
                "entity_name": "1999 Winston 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064v0t9",
                "entity_name": "2009 Toyota/SaveMart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065x32t",
                "entity_name": "2009 Coke Zero 400 Powered by Coca-Cola"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063wzjr",
                "entity_name": "2009 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043r0nf",
                "entity_name": "2008 Dodge Challenger 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7k72",
                "entity_name": "2005 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg284",
                "entity_name": "2002 Dodge/Save Mart 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crblp",
                "entity_name": "2001 Pocono 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crl_9",
                "entity_name": "2000 Save Mart/Kragen 350K"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02prcw8",
                "entity_name": "2006 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cg_pk",
                "entity_name": "2003 Sirius 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cj63n",
                "entity_name": "2002 Mountain Dew Southern 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqk67",
                "entity_name": "2002 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_8m5",
                "entity_name": "2007 Centurion Boats at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqjgc",
                "entity_name": "2002 EA Sports 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4fz",
                "entity_name": "1999 Food City 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4gt",
                "entity_name": "1999 Save Mart/Kragen 350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4hg",
                "entity_name": "1999 Goody's Headache Powder 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cw4j0",
                "entity_name": "1999 UAW-GM Quality 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qzmbr",
                "entity_name": "2006 Aaron's 499"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043mkq3",
                "entity_name": "2009 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bn1dc",
                "entity_name": "2006 Sharpie 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c8qvd",
                "entity_name": "2005 Sirius Satellite Radio at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c9nwb",
                "entity_name": "2003 Auto Club 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdb0r",
                "entity_name": "2004 GFS Marketplace 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ch0rf",
                "entity_name": "2003 Tropicana 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05chk66",
                "entity_name": "2002 Brickyard 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cqm87",
                "entity_name": "2002 NAPA 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmk3x",
                "entity_name": "2006 Pepsi 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mx7h5",
                "entity_name": "1999 Daytona 500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cd8_m",
                "entity_name": "2004 Sirius at the Glen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bmm31",
                "entity_name": "2006 Lenox Industrial Tools 300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065lvkv",
                "entity_name": "2009 Lenox Industrial Tools 301"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cwsm4",
                "entity_name": "2003 Sirius at the Glen"
            }
        ],
        "function": "<",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_instance",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "NASCAR race instance",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "6",
                    "question_node": 0,
                    "function": "<"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.0271xk",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "Tony Stewart",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_race_instance . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 < \"6\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.0271xk } \n?x0 :base.nascar.nascar_race_instance.results ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_driver.nascar_races ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_race_instance (JOIN base.nascar.nascar_race_instance.results (AND (lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk))))",
        "program": "step1:(lt base.nascar.nascar_race_result.start_position 6^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_driver.nascar_races) m.0271xk)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_race_instance.results step3)[SEP]step5:(AND base.nascar.nascar_race_instance step4)[SEP]"
    },
    {
        "qid": 491000000,
        "question": "verdana's designer created how many other typefaces for microsoft? The linked entities are Verdana (m.0h56_), Microsoft (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "Microsoft",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000001,
        "question": "verdana's designer created how many other typefaces for ms? The linked entities are Verdana (m.0h56_), ms (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "ms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000100,
        "question": "the person who designed verdana also designed how many other typefaces in microsoft? The linked entities are Verdana (m.0h56_), Microsoft (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "Microsoft",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000101,
        "question": "the person who designed verdana also designed how many other typefaces in ms? The linked entities are Verdana (m.0h56_), ms (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "ms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000200,
        "question": "how many other typefaces from microsoft are designed by the same person who designed verdana? The linked entities are Verdana (m.0h56_), Microsoft (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "Microsoft",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000201,
        "question": "how many other typefaces from ms are designed by the same person who designed verdana? The linked entities are Verdana (m.0h56_), ms (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "ms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000300,
        "question": "how many other typefaces from microsoft are designed by the same person as verdana? The linked entities are Verdana (m.0h56_), Microsoft (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "Microsoft",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000301,
        "question": "how many other typefaces from ms are designed by the same person as verdana? The linked entities are Verdana (m.0h56_), ms (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "ms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000400,
        "question": "how many other typefaces were created by the designer of verdana while he was working in microsoft? The linked entities are Verdana (m.0h56_), Microsoft (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "Microsoft",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 491000401,
        "question": "how many other typefaces were created by the designer of verdana while he was working in ms? The linked entities are Verdana (m.0h56_), ms (m.04sv4).",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.typefaces.typeface",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Typeface",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.typefaces.typeface_creator",
                    "class": "base.typefaces.typeface_creator",
                    "friendly_name": "Typeface Creator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h56_",
                    "class": "base.typefaces.typeface",
                    "friendly_name": "Verdana",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04sv4",
                    "class": "base.typefaces.typeface_foundry",
                    "friendly_name": "ms",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "base.typefaces.typeface.typeface_creator",
                    "friendly_name": "Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "base.typefaces.typeface.foundry",
                    "friendly_name": "Foundry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.typefaces.typeface . \n?x1 :type.object.type :base.typefaces.typeface_creator . \nVALUES ?x2 { :m.0h56_ } \nVALUES ?x3 { :m.04sv4 } \n?x0 :base.typefaces.typeface.typeface_creator ?x1 . \n?x2 :base.typefaces.typeface.typeface_creator ?x1 . \n?x0 :base.typefaces.typeface.foundry ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(COUNT (AND base.typefaces.typeface (AND (JOIN base.typefaces.typeface.typeface_creator (JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)) (JOIN base.typefaces.typeface.foundry m.04sv4))))",
        "program": "step1:(JOIN (R base.typefaces.typeface.typeface_creator) m.0h56_)[SEP]step2:(JOIN base.typefaces.typeface.typeface_creator step1)[SEP]step3:(JOIN base.typefaces.typeface.foundry m.04sv4)[SEP]step4:(AND step2 step3)[SEP]step5:(AND base.typefaces.typeface step4)[SEP]step6:(COUNT step5)[SEP]"
    },
    {
        "qid": 492000000,
        "question": "in the 2009 daytona 500, who had a start position after 35? The linked entity is 2009 Daytona 500 (m.043mkq3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03z4mt",
                "entity_name": "Terry Labonte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026z_m",
                "entity_name": "Matt Kenseth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fnrp",
                "entity_name": "Ryan Newman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jlv6",
                "entity_name": "John Andretti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06dzn7",
                "entity_name": "Travis Kvapil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08kqrw",
                "entity_name": "Regan Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hwq5",
                "entity_name": "Scott Speed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nzkg",
                "entity_name": "Bill Elliott"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_driver",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "NASCAR Driver",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "35^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "35",
                    "question_node": 0,
                    "function": ">"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.043mkq3",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "2009 Daytona 500",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_driver . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 > \"35\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.043mkq3 } \n?x0 :base.nascar.nascar_driver.nascar_races ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_race_instance.results ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_driver (JOIN base.nascar.nascar_driver.nascar_races (AND (gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3))))",
        "program": "step1:(gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_driver.nascar_races step3)[SEP]step5:(AND base.nascar.nascar_driver step4)[SEP]"
    },
    {
        "qid": 492000100,
        "question": "which drivers had a start position after 35 in 2009 daytona 500? The linked entity is 2009 Daytona 500 (m.043mkq3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03z4mt",
                "entity_name": "Terry Labonte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026z_m",
                "entity_name": "Matt Kenseth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fnrp",
                "entity_name": "Ryan Newman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jlv6",
                "entity_name": "John Andretti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06dzn7",
                "entity_name": "Travis Kvapil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08kqrw",
                "entity_name": "Regan Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hwq5",
                "entity_name": "Scott Speed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nzkg",
                "entity_name": "Bill Elliott"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_driver",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "NASCAR Driver",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "35^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "35",
                    "question_node": 0,
                    "function": ">"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.043mkq3",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "2009 Daytona 500",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_driver . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 > \"35\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.043mkq3 } \n?x0 :base.nascar.nascar_driver.nascar_races ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_race_instance.results ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_driver (JOIN base.nascar.nascar_driver.nascar_races (AND (gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3))))",
        "program": "step1:(gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_driver.nascar_races step3)[SEP]step5:(AND base.nascar.nascar_driver step4)[SEP]"
    },
    {
        "qid": 492000200,
        "question": "who started after position 35 in the 2009 daytona 500? The linked entity is 2009 Daytona 500 (m.043mkq3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03z4mt",
                "entity_name": "Terry Labonte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026z_m",
                "entity_name": "Matt Kenseth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fnrp",
                "entity_name": "Ryan Newman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jlv6",
                "entity_name": "John Andretti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06dzn7",
                "entity_name": "Travis Kvapil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08kqrw",
                "entity_name": "Regan Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hwq5",
                "entity_name": "Scott Speed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nzkg",
                "entity_name": "Bill Elliott"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_driver",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "NASCAR Driver",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "35^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "35",
                    "question_node": 0,
                    "function": ">"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.043mkq3",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "2009 Daytona 500",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_driver . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 > \"35\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.043mkq3 } \n?x0 :base.nascar.nascar_driver.nascar_races ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_race_instance.results ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_driver (JOIN base.nascar.nascar_driver.nascar_races (AND (gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3))))",
        "program": "step1:(gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_driver.nascar_races step3)[SEP]step5:(AND base.nascar.nascar_driver step4)[SEP]"
    },
    {
        "qid": 492000300,
        "question": "whose start position was after 35 in 2009 daytona 500? The linked entity is 2009 Daytona 500 (m.043mkq3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03z4mt",
                "entity_name": "Terry Labonte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026z_m",
                "entity_name": "Matt Kenseth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fnrp",
                "entity_name": "Ryan Newman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jlv6",
                "entity_name": "John Andretti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06dzn7",
                "entity_name": "Travis Kvapil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08kqrw",
                "entity_name": "Regan Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hwq5",
                "entity_name": "Scott Speed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nzkg",
                "entity_name": "Bill Elliott"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_driver",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "NASCAR Driver",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "35^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "35",
                    "question_node": 0,
                    "function": ">"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.043mkq3",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "2009 Daytona 500",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_driver . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 > \"35\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.043mkq3 } \n?x0 :base.nascar.nascar_driver.nascar_races ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_race_instance.results ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_driver (JOIN base.nascar.nascar_driver.nascar_races (AND (gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3))))",
        "program": "step1:(gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_driver.nascar_races step3)[SEP]step5:(AND base.nascar.nascar_driver step4)[SEP]"
    },
    {
        "qid": 492000400,
        "question": "in the race 2009 daytona 500, which nascar drivers' starting position was after 35? The linked entity is 2009 Daytona 500 (m.043mkq3).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03z4mt",
                "entity_name": "Terry Labonte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026z_m",
                "entity_name": "Matt Kenseth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fnrp",
                "entity_name": "Ryan Newman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jlv6",
                "entity_name": "John Andretti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06dzn7",
                "entity_name": "Travis Kvapil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08kqrw",
                "entity_name": "Regan Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hwq5",
                "entity_name": "Scott Speed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nzkg",
                "entity_name": "Bill Elliott"
            }
        ],
        "function": ">",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.nascar.nascar_driver",
                    "class": "base.nascar.nascar_driver",
                    "friendly_name": "NASCAR Driver",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "base.nascar.nascar_race_result",
                    "class": "base.nascar.nascar_race_result",
                    "friendly_name": "NASCAR race result",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "35^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "35",
                    "question_node": 0,
                    "function": ">"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.043mkq3",
                    "class": "base.nascar.nascar_race_instance",
                    "friendly_name": "2009 Daytona 500",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.nascar.nascar_driver.nascar_races",
                    "friendly_name": "NASCAR Races"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "base.nascar.nascar_race_result.start_position",
                    "friendly_name": "Start position"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "base.nascar.nascar_race_instance.results",
                    "friendly_name": "Results"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.nascar.nascar_driver . \n?x1 :type.object.type :base.nascar.nascar_race_result . \nFILTER (?x2 > \"35\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.043mkq3 } \n?x0 :base.nascar.nascar_driver.nascar_races ?x1 . \n?x1 :base.nascar.nascar_race_result.start_position ?x2 . \n?x3 :base.nascar.nascar_race_instance.results ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND base.nascar.nascar_driver (JOIN base.nascar.nascar_driver.nascar_races (AND (gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer) (JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3))))",
        "program": "step1:(gt base.nascar.nascar_race_result.start_position 35^^http://www.w3.org/2001/XMLSchema#integer)[SEP]step2:(JOIN (R base.nascar.nascar_race_instance.results) m.043mkq3)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN base.nascar.nascar_driver.nascar_races step3)[SEP]step5:(AND base.nascar.nascar_driver step4)[SEP]"
    },
    {
        "qid": 498000000,
        "question": "in what parts of the world can you buy games made by nintendo on virtual console? The linked entities are Nintendo (m.059wk), Virtual Console (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "Virtual Console",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000001,
        "question": "in what parts of the world can you buy games made by nintendo on vc? The linked entities are Nintendo (m.059wk), vc (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "vc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000100,
        "question": "what regions sell virtual console nintendo games? The linked entities are Nintendo (m.059wk), Virtual Console (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "Virtual Console",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000101,
        "question": "what regions sell vc nintendo games? The linked entities are Nintendo (m.059wk), vc (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "vc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000200,
        "question": "in which regions you can buy games developed by nintendo on virtual console? The linked entities are Nintendo (m.059wk), Virtual Console (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "Virtual Console",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000201,
        "question": "in which regions you can buy games developed by nintendo on vc? The linked entities are Nintendo (m.059wk), vc (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "vc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000300,
        "question": "games developed by nintendo on virtual console can be bought in which regions? The linked entities are Nintendo (m.059wk), Virtual Console (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "Virtual Console",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000301,
        "question": "games developed by nintendo on vc can be bought in which regions? The linked entities are Nintendo (m.059wk), vc (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "vc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000400,
        "question": "which parts of the world are games developed by nintendo available on virtual console? The linked entities are Nintendo (m.059wk), Virtual Console (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "Virtual Console",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000401,
        "question": "which parts of the world are games developed by nintendo available on vc? The linked entities are Nintendo (m.059wk), vc (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "vc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000500,
        "question": "where can you get games developed by nintendo on virtual console? The linked entities are Nintendo (m.059wk), Virtual Console (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "Virtual Console",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    },
    {
        "qid": 498000501,
        "question": "where can you get games developed by nintendo on vc? The linked entities are Nintendo (m.059wk), vc (m.07sg3j).",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j9z",
                "entity_name": "Europe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_3d",
                "entity_name": "Japan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059g4",
                "entity_name": "North America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chghy",
                "entity_name": "Australia"
            }
        ],
        "function": "none",
        "commonness": 0.0,
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_region",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Video Game Region",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.059wk",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Nintendo",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.07sg3j",
                    "class": "cvg.computer_game_distribution_system",
                    "friendly_name": "vc",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.game_version.developer",
                    "friendly_name": "Developer"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.game_version.distributed_through",
                    "friendly_name": "Distributed through"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_region . \n?x1 :type.object.type :cvg.game_version . \nVALUES ?x2 { :m.059wk } \nVALUES ?x3 { :m.07sg3j } \n?x1 :cvg.game_version.regions ?x0 . \n?x1 :cvg.game_version.developer ?x2 . \n?x1 :cvg.game_version.distributed_through ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "s_expression": "(AND cvg.computer_game_region (JOIN (R cvg.game_version.regions) (AND (JOIN cvg.game_version.developer m.059wk) (JOIN cvg.game_version.distributed_through m.07sg3j))))",
        "program": "step1:(JOIN cvg.game_version.developer m.059wk)[SEP]step2:(JOIN cvg.game_version.distributed_through m.07sg3j)[SEP]step3:(AND step1 step2)[SEP]step4:(JOIN (R cvg.game_version.regions) step3)[SEP]step5:(AND cvg.computer_game_region step4)[SEP]"
    }
]